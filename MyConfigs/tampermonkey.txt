{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Ultimate Steam Enhancer","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["zoneofgames.ru","raw.githubusercontent.com","gist.githubusercontent.com","store.steampowered.com","api.steampowered.com","steamcommunity.com","community.akamai.steamstatic.com","community.cloudflare.steamstatic.com","community.fastly.steamstatic.com","shared.akamai.steamstatic.com","shared.cloudflare.steamstatic.com","shared.fastly.steamstatic.com","umadb.ro","api.github.com","howlongtobeat.com","vgtimes.ru","api.digiseller.com","plati.market","digiseller.mycdn.ink","steambuy.com","steammachine.ru","playo.ru","steampay.com","gabestore.ru","static.gabestore.ru","gamersbase.store","coreplatform.blob.core.windows.net","cdn-contentprod.azureedge.net","cdn-resize.enaza.games","cdn-static.enaza.games","www.igromagaz.ru","gamesforfarm.com","shared.fastly.steamstatic.com","i.imgur.com","zaka-zaka.com","images.zaka-zaka.com","gamazavr.ru","gameray.ru","shop.buka.ru","upload.wikimedia.org","keysforgamers.com","api4.ggsel.com","ggsel.net","cdn.ggsel.com","explorer.kupikod.com","rushbe.ru","cdn.jsdelivr.net","img.shields.io"],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://store.steampowered.com/*","*://*steamcommunity.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","orig_run_in":[],"orig_tags":[],"use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"run_in":null,"sandbox":null,"tags":[],"unwrap":null,"user_modified":null},"storage":{"ts":1750836341276,"data":{"USE_EarlyAccess_ordateData":"o{\"timestamp\": 1750836341276,\"data\": [{\"appid\": 251570,\"ordate\": \"14.12.2013\"},{\"appid\": 282880,\"ordate\": \"02.04.2014\"},{\"appid\": 333640,\"ordate\": \"15.07.2015\"},{\"appid\": 369080,\"ordate\": \"26.08.2015\"},{\"appid\": 276870,\"ordate\": \"11.09.2014\"},{\"appid\": 402160,\"ordate\": \"17.09.2015\"},{\"appid\": 329970,\"ordate\": \"31.03.2015\"},{\"appid\": 269770,\"ordate\": \"13.07.2015\"},{\"appid\": 385380,\"ordate\": \"03.06.2016\"},{\"appid\": 348740,\"ordate\": \"18.07.2016\"},{\"appid\": 516750,\"ordate\": \"24.10.2016\"},{\"appid\": 446510,\"ordate\": \"01.03.2016\"},{\"appid\": 386650,\"ordate\": \"01.03.2016\"},{\"appid\": 555160,\"ordate\": \"28.02.2017\"},{\"appid\": 285110,\"ordate\": \"30.05.2014\"},{\"appid\": 435230,\"ordate\": \"29.01.2016\"},{\"appid\": 313120,\"ordate\": \"23.01.2015\"},{\"appid\": 493100,\"ordate\": \"26.07.2016\"},{\"appid\": 416000,\"ordate\": \"22.04.2017\"},{\"appid\": 308080,\"ordate\": \"10.09.2014\"},{\"appid\": 688880,\"ordate\": \"26.08.2017\"},{\"appid\": 466770,\"ordate\": \"01.09.2016\"},{\"appid\": 458030,\"ordate\": \"05.04.2016\"},{\"appid\": 423730,\"ordate\": \"08.10.2016\"},{\"appid\": 410000,\"ordate\": \"24.10.2016\"},{\"appid\": 325210,\"ordate\": \"24.11.2014\"},{\"appid\": 480500,\"ordate\": \"11.06.2016\"},{\"appid\": 357330,\"ordate\": \"07.04.2015\"},{\"appid\": 468070,\"ordate\": \"12.07.2016\"},{\"appid\": 517670,\"ordate\": \"08.11.2016\"},{\"appid\": 582050,\"ordate\": \"19.01.2017\"},{\"appid\": 515010,\"ordate\": \"29.08.2017\"},{\"appid\": 338840,\"ordate\": \"23.12.2014\"},{\"appid\": 329310,\"ordate\": \"24.10.2014\"},{\"appid\": 449700,\"ordate\": \"12.07.2017\"},{\"appid\": 523070,\"ordate\": \"09.09.2016\"},{\"appid\": 280720,\"ordate\": \"20.05.2014\"},{\"appid\": 302810,\"ordate\": \"07.10.2015\"},{\"appid\": 696370,\"ordate\": \"26.08.2017\"},{\"appid\": 777610,\"ordate\": \"06.02.2018\"},{\"appid\": 307880,\"ordate\": \"05.03.2015\"},{\"appid\": 335210,\"ordate\": \"01.12.2014\"},{\"appid\": 639230,\"ordate\": \"20.06.2017\"},{\"appid\": 707400,\"ordate\": \"15.09.2017\"},{\"appid\": 418000,\"ordate\": \"18.11.2015\"},{\"appid\": 552100,\"ordate\": \"08.11.2016\"},{\"appid\": 494310,\"ordate\": \"04.07.2016\"},{\"appid\": 327070,\"ordate\": \"09.06.2016\"},{\"appid\": 824720,\"ordate\": \"11.04.2018\"},{\"appid\": 463530,\"ordate\": \"02.12.2017\"},{\"appid\": 418430,\"ordate\": \"17.12.2015\"},{\"appid\": 571740,\"ordate\": \"17.02.2017\"},{\"appid\": 366290,\"ordate\": \"29.04.2015\"},{\"appid\": 681000,\"ordate\": \"21.08.2017\"},{\"appid\": 841600,\"ordate\": \"25.04.2018\"},{\"appid\": 628960,\"ordate\": \"28.04.2017\"},{\"appid\": 512750,\"ordate\": \"23.08.2016\"},{\"appid\": 402710,\"ordate\": \"28.09.2016\"},{\"appid\": 764090,\"ordate\": \"30.01.2018\"},{\"appid\": 268650,\"ordate\": \"08.08.2014\"},{\"appid\": 670160,\"ordate\": \"26.08.2017\"},{\"appid\": 942200,\"ordate\": \"29.11.2018\"},{\"appid\": 906680,\"ordate\": \"29.09.2018\"},{\"appid\": 405010,\"ordate\": \"20.11.2015\"},{\"appid\": 758990,\"ordate\": \"22.12.2017\"},{\"appid\": 822240,\"ordate\": \"11.12.2018\"},{\"appid\": 857180,\"ordate\": \"13.07.2018\"},{\"appid\": 366000,\"ordate\": \"16.05.2016\"},{\"appid\": 370060,\"ordate\": \"05.12.2016\"},{\"appid\": 429790,\"ordate\": \"19.10.2016\"},{\"appid\": 503770,\"ordate\": \"11.09.2016\"},{\"appid\": 690830,\"ordate\": \"01.02.2019\"},{\"appid\": 604150,\"ordate\": \"13.12.2018\"},{\"appid\": 818380,\"ordate\": \"21.03.2018\"},{\"appid\": 1028730,\"ordate\": \"02.03.2019\"},{\"appid\": 1015480,\"ordate\": \"01.02.2019\"},{\"appid\": 763180,\"ordate\": \"26.11.2018\"},{\"appid\": 556640,\"ordate\": \"22.12.2016\"},{\"appid\": 704510,\"ordate\": \"16.10.2017\"},{\"appid\": 251950,\"ordate\": \"05.09.2017\"},{\"appid\": 539190,\"ordate\": \"31.01.2017\"},{\"appid\": 337320,\"ordate\": \"13.10.2015\"},{\"appid\": 414080,\"ordate\": \"03.11.2015\"},{\"appid\": 756600,\"ordate\": \"18.12.2017\"},{\"appid\": 252870,\"ordate\": \"15.09.2015\"},{\"appid\": 508550,\"ordate\": \"06.08.2016\"},{\"appid\": 839630,\"ordate\": \"16.07.2018\"},{\"appid\": 744600,\"ordate\": \"13.02.2018\"},{\"appid\": 315070,\"ordate\": \"15.10.2014\"},{\"appid\": 233860,\"ordate\": \"21.03.2013\"},{\"appid\": 884640,\"ordate\": \"10.07.2018\"},{\"appid\": 673750,\"ordate\": \"31.08.2017\"},{\"appid\": 857850,\"ordate\": \"28.05.2018\"},{\"appid\": 525680,\"ordate\": \"19.12.2016\"},{\"appid\": 206500,\"ordate\": \"03.08.2012\"},{\"appid\": 414770,\"ordate\": \"24.12.2015\"},{\"appid\": 731650,\"ordate\": \"21.06.2019\"},{\"appid\": 688060,\"ordate\": \"11.01.2019\"},{\"appid\": 553150,\"ordate\": \"03.12.2016\"},{\"appid\": 298280,\"ordate\": \"04.06.2014\"},{\"appid\": 1001040,\"ordate\": \"04.06.2019\"},{\"appid\": 510540,\"ordate\": \"28.03.2018\"},{\"appid\": 629730,\"ordate\": \"11.12.2018\"},{\"appid\": 955640,\"ordate\": \"15.11.2018\"},{\"appid\": 806670,\"ordate\": \"14.03.2018\"},{\"appid\": 659540,\"ordate\": \"29.06.2017\"},{\"appid\": 657450,\"ordate\": \"24.06.2017\"},{\"appid\": 350150,\"ordate\": \"07.07.2015\"},{\"appid\": 425260,\"ordate\": \"26.05.2017\"},{\"appid\": 420550,\"ordate\": \"04.04.2016\"},{\"appid\": 858960,\"ordate\": \"08.12.2018\"},{\"appid\": 352720,\"ordate\": \"29.08.2018\"},{\"appid\": 858210,\"ordate\": \"27.03.2019\"},{\"appid\": 714010,\"ordate\": \"07.02.2018\"},{\"appid\": 244850,\"ordate\": \"23.10.2013\"},{\"appid\": 244930,\"ordate\": \"10.10.2013\"},{\"appid\": 391400,\"ordate\": \"04.08.2017\"},{\"appid\": 577570,\"ordate\": \"01.08.2017\"},{\"appid\": 227780,\"ordate\": \"30.04.2014\"},{\"appid\": 483850,\"ordate\": \"22.09.2016\"},{\"appid\": 1019040,\"ordate\": \"06.02.2019\"},{\"appid\": 784150,\"ordate\": \"15.03.2019\"},{\"appid\": 494840,\"ordate\": \"30.04.2019\"},{\"appid\": 363360,\"ordate\": \"23.06.2015\"},{\"appid\": 1004270,\"ordate\": \"31.01.2019\"},{\"appid\": 492340,\"ordate\": \"04.08.2016\"},{\"appid\": 389670,\"ordate\": \"03.08.2015\"},{\"appid\": 1003880,\"ordate\": \"26.04.2019\"},{\"appid\": 460540,\"ordate\": \"18.09.2018\"},{\"appid\": 755530,\"ordate\": \"08.12.2017\"},{\"appid\": 941800,\"ordate\": \"19.11.2018\"},{\"appid\": 520010,\"ordate\": \"26.10.2016\"},{\"appid\": 326460,\"ordate\": \"11.03.2015\"},{\"appid\": 432410,\"ordate\": \"30.01.2016\"},{\"appid\": 1114650,\"ordate\": \"28.07.2019\"},{\"appid\": 907940,\"ordate\": \"03.12.2018\"},{\"appid\": 603320,\"ordate\": \"28.05.2019\"},{\"appid\": 505460,\"ordate\": \"27.07.2017\"},{\"appid\": 693580,\"ordate\": \"10.01.2018\"},{\"appid\": 442210,\"ordate\": \"04.03.2016\"},{\"appid\": 1025600,\"ordate\": \"03.12.2019\"},{\"appid\": 980940,\"ordate\": \"23.12.2019\"},{\"appid\": 821180,\"ordate\": \"07.09.2018\"},{\"appid\": 448060,\"ordate\": \"03.03.2016\"},{\"appid\": 552080,\"ordate\": \"13.03.2017\"},{\"appid\": 375480,\"ordate\": \"28.07.2015\"},{\"appid\": 699010,\"ordate\": \"22.11.2017\"},{\"appid\": 346010,\"ordate\": \"28.01.2015\"},{\"appid\": 300380,\"ordate\": \"18.09.2014\"},{\"appid\": 293480,\"ordate\": \"16.12.2014\"},{\"appid\": 611790,\"ordate\": \"30.06.2017\"},{\"appid\": 1057700,\"ordate\": \"30.06.2019\"},{\"appid\": 886250,\"ordate\": \"08.11.2018\"},{\"appid\": 685240,\"ordate\": \"31.10.2017\"},{\"appid\": 383120,\"ordate\": \"05.08.2015\"},{\"appid\": 803980,\"ordate\": \"13.02.2019\"},{\"appid\": 510500,\"ordate\": \"18.10.2018\"},{\"appid\": 611500,\"ordate\": \"22.08.2017\"},{\"appid\": 370770,\"ordate\": \"24.03.2016\"},{\"appid\": 346970,\"ordate\": \"22.05.2015\"},{\"appid\": 252250,\"ordate\": \"03.12.2013\"},{\"appid\": 328080,\"ordate\": \"27.10.2014\"},{\"appid\": 1159350,\"ordate\": \"09.10.2019\"},{\"appid\": 605740,\"ordate\": \"07.06.2018\"},{\"appid\": 923480,\"ordate\": \"30.08.2018\"},{\"appid\": 268930,\"ordate\": \"05.05.2014\"},{\"appid\": 1170720,\"ordate\": \"10.01.2020\"},{\"appid\": 793030,\"ordate\": \"14.03.2018\"},{\"appid\": 1030760,\"ordate\": \"07.11.2019\"},{\"appid\": 321980,\"ordate\": \"23.10.2014\"},{\"appid\": 743130,\"ordate\": \"07.12.2018\"},{\"appid\": 809310,\"ordate\": \"13.11.2018\"},{\"appid\": 1116350,\"ordate\": \"22.02.2020\"},{\"appid\": 628570,\"ordate\": \"24.06.2017\"},{\"appid\": 362890,\"ordate\": \"05.05.2015\"},{\"appid\": 899770,\"ordate\": \"01.05.2019\"},{\"appid\": 563410,\"ordate\": \"10.01.2017\"},{\"appid\": 872350,\"ordate\": \"11.02.2019\"},{\"appid\": 727130,\"ordate\": \"28.05.2019\"},{\"appid\": 393380,\"ordate\": \"15.12.2015\"},{\"appid\": 863400,\"ordate\": \"21.05.2019\"},{\"appid\": 658630,\"ordate\": \"13.10.2017\"},{\"appid\": 877200,\"ordate\": \"10.11.2018\"},{\"appid\": 311260,\"ordate\": \"26.09.2017\"},{\"appid\": 770200,\"ordate\": \"07.11.2018\"},{\"appid\": 948790,\"ordate\": \"24.01.2019\"},{\"appid\": 550840,\"ordate\": \"16.11.2016\"},{\"appid\": 508710,\"ordate\": \"03.11.2016\"},{\"appid\": 969340,\"ordate\": \"03.06.2020\"},{\"appid\": 649970,\"ordate\": \"22.10.2019\"},{\"appid\": 754320,\"ordate\": \"07.06.2019\"},{\"appid\": 1035320,\"ordate\": \"21.08.2019\"},{\"appid\": 638850,\"ordate\": \"06.07.2017\"},{\"appid\": 895400,\"ordate\": \"14.04.2020\"},{\"appid\": 351290,\"ordate\": \"16.04.2015\"},{\"appid\": 963400,\"ordate\": \"09.08.2019\"},{\"appid\": 490280,\"ordate\": \"06.12.2017\"},{\"appid\": 1130400,\"ordate\": \"03.10.2019\"},{\"appid\": 1268540,\"ordate\": \"21.04.2020\"},{\"appid\": 1153720,\"ordate\": \"11.11.2019\"},{\"appid\": 770810,\"ordate\": \"05.06.2018\"},{\"appid\": 923140,\"ordate\": \"31.08.2018\"},{\"appid\": 992910,\"ordate\": \"12.03.2020\"},{\"appid\": 844860,\"ordate\": \"08.08.2019\"},{\"appid\": 627570,\"ordate\": \"23.08.2018\"},{\"appid\": 670260,\"ordate\": \"17.01.2018\"},{\"appid\": 340150,\"ordate\": \"30.04.2015\"},{\"appid\": 882680,\"ordate\": \"14.10.2019\"},{\"appid\": 683770,\"ordate\": \"14.09.2017\"},{\"appid\": 1298820,\"ordate\": \"27.07.2020\"},{\"appid\": 1013320,\"ordate\": \"26.09.2019\"},{\"appid\": 454830,\"ordate\": \"05.04.2016\"},{\"appid\": 1059640,\"ordate\": \"30.01.2020\"},{\"appid\": 485770,\"ordate\": \"08.08.2019\"},{\"appid\": 374280,\"ordate\": \"21.10.2016\"},{\"appid\": 466980,\"ordate\": \"26.09.2016\"},{\"appid\": 427520,\"ordate\": \"25.02.2016\"},{\"appid\": 426210,\"ordate\": \"28.01.2017\"},{\"appid\": 579120,\"ordate\": \"30.08.2019\"},{\"appid\": 228380,\"ordate\": \"15.01.2014\"},{\"appid\": 916240,\"ordate\": \"16.07.2019\"},{\"appid\": 1250300,\"ordate\": \"30.03.2020\"},{\"appid\": 1142180,\"ordate\": \"08.09.2019\"},{\"appid\": 1194830,\"ordate\": \"04.02.2020\"},{\"appid\": 249630,\"ordate\": \"07.09.2013\"},{\"appid\": 999930,\"ordate\": \"11.01.2019\"},{\"appid\": 1353350,\"ordate\": \"25.07.2020\"},{\"appid\": 922170,\"ordate\": \"17.09.2018\"},{\"appid\": 1126270,\"ordate\": \"04.10.2019\"},{\"appid\": 1188930,\"ordate\": \"20.12.2019\"},{\"appid\": 597170,\"ordate\": \"16.03.2017\"},{\"appid\": 956310,\"ordate\": \"14.01.2020\"},{\"appid\": 1232580,\"ordate\": \"08.04.2020\"},{\"appid\": 1403110,\"ordate\": \"20.09.2020\"},{\"appid\": 1210800,\"ordate\": \"02.05.2020\"},{\"appid\": 461400,\"ordate\": \"16.04.2016\"},{\"appid\": 431240,\"ordate\": \"30.01.2016\"},{\"appid\": 1236670,\"ordate\": \"27.07.2020\"},{\"appid\": 1425390,\"ordate\": \"06.10.2020\"},{\"appid\": 588120,\"ordate\": \"23.10.2017\"},{\"appid\": 946670,\"ordate\": \"27.10.2019\"},{\"appid\": 1239080,\"ordate\": \"04.11.2020\"},{\"appid\": 897900,\"ordate\": \"28.11.2019\"},{\"appid\": 1000410,\"ordate\": \"22.11.2019\"},{\"appid\": 526870,\"ordate\": \"08.06.2020\"},{\"appid\": 948350,\"ordate\": \"22.11.2018\"},{\"appid\": 1291170,\"ordate\": \"24.07.2020\"},{\"appid\": 1257210,\"ordate\": \"21.03.2020\"},{\"appid\": 937770,\"ordate\": \"09.11.2018\"},{\"appid\": 870200,\"ordate\": \"08.11.2018\"},{\"appid\": 1236880,\"ordate\": \"17.04.2020\"},{\"appid\": 670820,\"ordate\": \"18.05.2018\"},{\"appid\": 928880,\"ordate\": \"29.12.2018\"},{\"appid\": 1358430,\"ordate\": \"07.08.2020\"},{\"appid\": 1013000,\"ordate\": \"22.06.2019\"},{\"appid\": 252490,\"ordate\": \"05.12.2013\"},{\"appid\": 749540,\"ordate\": \"29.12.2017\"},{\"appid\": 615120,\"ordate\": \"15.05.2018\"},{\"appid\": 681900,\"ordate\": \"01.10.2017\"},{\"appid\": 330580,\"ordate\": \"28.05.2015\"},{\"appid\": 674020,\"ordate\": \"19.10.2018\"},{\"appid\": 299740,\"ordate\": \"30.10.2014\"},{\"appid\": 588440,\"ordate\": \"30.05.2019\"},{\"appid\": 749960,\"ordate\": \"08.02.2018\"},{\"appid\": 536370,\"ordate\": \"11.11.2016\"},{\"appid\": 1043710,\"ordate\": \"28.04.2020\"},{\"appid\": 1303350,\"ordate\": \"13.05.2020\"},{\"appid\": 447980,\"ordate\": \"26.10.2016\"},{\"appid\": 576480,\"ordate\": \"18.01.2017\"},{\"appid\": 747200,\"ordate\": \"23.04.2018\"},{\"appid\": 408900,\"ordate\": \"12.05.2016\"},{\"appid\": 1314680,\"ordate\": \"07.07.2020\"},{\"appid\": 758870,\"ordate\": \"08.11.2018\"},{\"appid\": 648800,\"ordate\": \"23.05.2018\"},{\"appid\": 1359090,\"ordate\": \"12.08.2020\"},{\"appid\": 1260820,\"ordate\": \"24.04.2020\"},{\"appid\": 438460,\"ordate\": \"08.02.2018\"},{\"appid\": 1005460,\"ordate\": \"30.09.2020\"},{\"appid\": 340210,\"ordate\": \"06.02.2015\"},{\"appid\": 1160750,\"ordate\": \"09.01.2020\"},{\"appid\": 833360,\"ordate\": \"14.07.2018\"},{\"appid\": 391460,\"ordate\": \"25.08.2015\"},{\"appid\": 1266650,\"ordate\": \"28.03.2020\"},{\"appid\": 1270980,\"ordate\": \"11.12.2020\"},{\"appid\": 393420,\"ordate\": \"04.12.2015\"},{\"appid\": 849210,\"ordate\": \"11.12.2019\"},{\"appid\": 514410,\"ordate\": \"19.08.2016\"},{\"appid\": 1069030,\"ordate\": \"13.07.2019\"},{\"appid\": 1382450,\"ordate\": \"09.09.2020\"},{\"appid\": 1045900,\"ordate\": \"01.05.2020\"},{\"appid\": 1403740,\"ordate\": \"25.11.2020\"},{\"appid\": 1148750,\"ordate\": \"26.10.2019\"},{\"appid\": 1162470,\"ordate\": \"13.03.2020\"},{\"appid\": 909500,\"ordate\": \"25.07.2019\"},{\"appid\": 1029570,\"ordate\": \"12.03.2020\"},{\"appid\": 603390,\"ordate\": \"08.08.2019\"},{\"appid\": 582330,\"ordate\": \"02.02.2018\"},{\"appid\": 361100,\"ordate\": \"03.11.2017\"},{\"appid\": 1404090,\"ordate\": \"28.10.2020\"},{\"appid\": 1150540,\"ordate\": \"17.06.2020\"},{\"appid\": 773840,\"ordate\": \"11.08.2020\"},{\"appid\": 846030,\"ordate\": \"12.08.2019\"},{\"appid\": 1150090,\"ordate\": \"18.02.2021\"},{\"appid\": 349510,\"ordate\": \"08.10.2017\"},{\"appid\": 1302510,\"ordate\": \"19.05.2020\"},{\"appid\": 727570,\"ordate\": \"08.10.2018\"},{\"appid\": 242760,\"ordate\": \"30.05.2014\"},{\"appid\": 1037940,\"ordate\": \"18.06.2019\"},{\"appid\": 362940,\"ordate\": \"21.05.2015\"},{\"appid\": 422860,\"ordate\": \"05.04.2016\"},{\"appid\": 227860,\"ordate\": \"23.09.2013\"},{\"appid\": 352430,\"ordate\": \"11.03.2015\"},{\"appid\": 424370,\"ordate\": \"24.03.2016\"},{\"appid\": 822710,\"ordate\": \"12.06.2020\"},{\"appid\": 500350,\"ordate\": \"09.09.2016\"},{\"appid\": 821440,\"ordate\": \"04.05.2019\"},{\"appid\": 1260800,\"ordate\": \"06.08.2020\"},{\"appid\": 1203650,\"ordate\": \"17.07.2020\"},{\"appid\": 469600,\"ordate\": \"20.11.2017\"},{\"appid\": 673210,\"ordate\": \"31.01.2018\"},{\"appid\": 264710,\"ordate\": \"21.03.2014\"},{\"appid\": 1175660,\"ordate\": \"17.10.2019\"},{\"appid\": 576060,\"ordate\": \"11.02.2017\"},{\"appid\": 25000,\"ordate\": \"17.12.2013\"},{\"appid\": 708890,\"ordate\": \"01.12.2017\"},{\"appid\": 433190,\"ordate\": \"06.04.2016\"},{\"appid\": 324510,\"ordate\": \"13.11.2014\"},{\"appid\": 1097620,\"ordate\": \"20.06.2019\"},{\"appid\": 1285310,\"ordate\": \"08.07.2020\"},{\"appid\": 331430,\"ordate\": \"30.11.2019\"},{\"appid\": 809540,\"ordate\": \"04.05.2018\"},{\"appid\": 233610,\"ordate\": \"09.12.2014\"},{\"appid\": 578060,\"ordate\": \"12.01.2017\"},{\"appid\": 602960,\"ordate\": \"05.06.2019\"},{\"appid\": 418620,\"ordate\": \"03.02.2016\"},{\"appid\": 336440,\"ordate\": \"26.08.2015\"},{\"appid\": 1377380,\"ordate\": \"28.08.2020\"},{\"appid\": 664000,\"ordate\": \"27.07.2017\"},{\"appid\": 318100,\"ordate\": \"01.11.2014\"},{\"appid\": 570950,\"ordate\": \"29.01.2021\"},{\"appid\": 467400,\"ordate\": \"06.10.2017\"},{\"appid\": 1114940,\"ordate\": \"13.02.2020\"},{\"appid\": 1324560,\"ordate\": \"30.06.2020\"},{\"appid\": 893900,\"ordate\": \"02.10.2020\"},{\"appid\": 632300,\"ordate\": \"25.07.2017\"},{\"appid\": 992730,\"ordate\": \"15.03.2019\"},{\"appid\": 600100,\"ordate\": \"16.02.2018\"},{\"appid\": 577230,\"ordate\": \"26.05.2017\"},{\"appid\": 1185270,\"ordate\": \"06.02.2020\"},{\"appid\": 1137160,\"ordate\": \"23.08.2019\"},{\"appid\": 1589460,\"ordate\": \"03.05.2021\"},{\"appid\": 291250,\"ordate\": \"13.05.2014\"},{\"appid\": 976230,\"ordate\": \"30.11.2018\"},{\"appid\": 887420,\"ordate\": \"29.07.2019\"},{\"appid\": 870590,\"ordate\": \"20.06.2018\"},{\"appid\": 990900,\"ordate\": \"29.11.2019\"},{\"appid\": 621070,\"ordate\": \"29.07.2017\"},{\"appid\": 1562260,\"ordate\": \"29.05.2021\"},{\"appid\": 589250,\"ordate\": \"09.02.2017\"},{\"appid\": 1012180,\"ordate\": \"01.04.2019\"},{\"appid\": 913740,\"ordate\": \"20.02.2020\"},{\"appid\": 474890,\"ordate\": \"29.07.2016\"},{\"appid\": 1031650,\"ordate\": \"20.03.2020\"},{\"appid\": 1133120,\"ordate\": \"16.03.2021\"},{\"appid\": 843520,\"ordate\": \"11.07.2018\"},{\"appid\": 1085540,\"ordate\": \"01.10.2019\"},{\"appid\": 816550,\"ordate\": \"12.07.2018\"},{\"appid\": 876160,\"ordate\": \"14.11.2018\"},{\"appid\": 835650,\"ordate\": \"28.05.2020\"},{\"appid\": 1034140,\"ordate\": \"26.03.2021\"},{\"appid\": 1052390,\"ordate\": \"15.04.2019\"},{\"appid\": 1273790,\"ordate\": \"01.05.2020\"},{\"appid\": 1647190,\"ordate\": \"19.06.2021\"},{\"appid\": 334540,\"ordate\": \"26.09.2018\"},{\"appid\": 1242700,\"ordate\": \"23.04.2020\"},{\"appid\": 1304130,\"ordate\": \"17.11.2020\"},{\"appid\": 842510,\"ordate\": \"25.04.2018\"},{\"appid\": 1347630,\"ordate\": \"23.04.2021\"},{\"appid\": 1133580,\"ordate\": \"01.09.2020\"},{\"appid\": 1370170,\"ordate\": \"20.11.2020\"},{\"appid\": 405530,\"ordate\": \"15.04.2016\"},{\"appid\": 771500,\"ordate\": \"16.02.2018\"},{\"appid\": 468820,\"ordate\": \"24.05.2016\"},{\"appid\": 510840,\"ordate\": \"23.08.2016\"},{\"appid\": 1639430,\"ordate\": \"07.07.2021\"},{\"appid\": 652050,\"ordate\": \"21.06.2017\"},{\"appid\": 858630,\"ordate\": \"08.06.2019\"},{\"appid\": 342910,\"ordate\": \"22.05.2018\"},{\"appid\": 567080,\"ordate\": \"16.03.2017\"},{\"appid\": 497870,\"ordate\": \"05.09.2019\"},{\"appid\": 244030,\"ordate\": \"01.08.2013\"},{\"appid\": 575430,\"ordate\": \"16.02.2017\"},{\"appid\": 1083880,\"ordate\": \"10.10.2019\"},{\"appid\": 1020450,\"ordate\": \"06.09.2019\"},{\"appid\": 1370940,\"ordate\": \"13.04.2021\"},{\"appid\": 521150,\"ordate\": \"03.11.2016\"},{\"appid\": 342560,\"ordate\": \"25.02.2015\"},{\"appid\": 968250,\"ordate\": \"26.03.2019\"},{\"appid\": 1534980,\"ordate\": \"01.03.2021\"},{\"appid\": 291550,\"ordate\": \"30.04.2014\"},{\"appid\": 1482620,\"ordate\": \"21.05.2021\"},{\"appid\": 345430,\"ordate\": \"11.09.2015\"},{\"appid\": 340440,\"ordate\": \"02.02.2015\"},{\"appid\": 349450,\"ordate\": \"09.02.2015\"},{\"appid\": 1574000,\"ordate\": \"29.03.2021\"},{\"appid\": 1087330,\"ordate\": \"12.09.2019\"},{\"appid\": 1511310,\"ordate\": \"12.03.2021\"},{\"appid\": 526130,\"ordate\": \"15.02.2017\"},{\"appid\": 1048350,\"ordate\": \"12.04.2021\"},{\"appid\": 1074620,\"ordate\": \"18.02.2020\"},{\"appid\": 1163740,\"ordate\": \"23.06.2020\"},{\"appid\": 918610,\"ordate\": \"09.10.2018\"},{\"appid\": 1573730,\"ordate\": \"02.04.2021\"},{\"appid\": 636490,\"ordate\": \"10.01.2018\"},{\"appid\": 511430,\"ordate\": \"12.10.2016\"},{\"appid\": 873840,\"ordate\": \"23.06.2020\"},{\"appid\": 638060,\"ordate\": \"04.10.2017\"},{\"appid\": 744980,\"ordate\": \"25.10.2019\"},{\"appid\": 1120400,\"ordate\": \"17.12.2020\"},{\"appid\": 673610,\"ordate\": \"28.09.2017\"},{\"appid\": 1428520,\"ordate\": \"16.12.2020\"},{\"appid\": 766570,\"ordate\": \"15.06.2018\"},{\"appid\": 1456900,\"ordate\": \"14.11.2020\"},{\"appid\": 559650,\"ordate\": \"31.05.2017\"},{\"appid\": 1058830,\"ordate\": \"22.10.2019\"},{\"appid\": 311310,\"ordate\": \"21.01.2016\"},{\"appid\": 672630,\"ordate\": \"08.09.2017\"},{\"appid\": 722180,\"ordate\": \"29.01.2018\"},{\"appid\": 322770,\"ordate\": \"05.04.2016\"},{\"appid\": 1293220,\"ordate\": \"16.06.2020\"},{\"appid\": 369530,\"ordate\": \"22.09.2016\"},{\"appid\": 1571960,\"ordate\": \"23.04.2021\"},{\"appid\": 1611580,\"ordate\": \"25.08.2021\"},{\"appid\": 1245360,\"ordate\": \"19.03.2020\"},{\"appid\": 403840,\"ordate\": \"03.11.2015\"},{\"appid\": 583530,\"ordate\": \"19.08.2017\"},{\"appid\": 368340,\"ordate\": \"15.05.2015\"},{\"appid\": 733460,\"ordate\": \"01.12.2017\"},{\"appid\": 315460,\"ordate\": \"05.03.2015\"},{\"appid\": 503180,\"ordate\": \"26.08.2016\"},{\"appid\": 1173370,\"ordate\": \"07.12.2020\"},{\"appid\": 326160,\"ordate\": \"24.11.2014\"},{\"appid\": 571630,\"ordate\": \"17.01.2017\"},{\"appid\": 1309290,\"ordate\": \"20.08.2020\"},{\"appid\": 812070,\"ordate\": \"01.06.2018\"},{\"appid\": 897560,\"ordate\": \"07.06.2019\"},{\"appid\": 345690,\"ordate\": \"03.11.2015\"},{\"appid\": 1537480,\"ordate\": \"06.08.2021\"},{\"appid\": 282680,\"ordate\": \"07.10.2014\"},{\"appid\": 327860,\"ordate\": \"15.10.2014\"},{\"appid\": 856110,\"ordate\": \"29.05.2018\"},{\"appid\": 458190,\"ordate\": \"09.01.2017\"},{\"appid\": 1264710,\"ordate\": \"27.03.2020\"},{\"appid\": 1160040,\"ordate\": \"02.11.2020\"},{\"appid\": 886200,\"ordate\": \"01.01.2019\"},{\"appid\": 1270820,\"ordate\": \"28.10.2020\"},{\"appid\": 1142810,\"ordate\": \"15.01.2020\"},{\"appid\": 697950,\"ordate\": \"27.11.2017\"},{\"appid\": 285900,\"ordate\": \"29.08.2014\"},{\"appid\": 305940,\"ordate\": \"05.01.2015\"},{\"appid\": 427880,\"ordate\": \"09.03.2017\"},{\"appid\": 760400,\"ordate\": \"13.12.2017\"},{\"appid\": 362310,\"ordate\": \"24.07.2015\"},{\"appid\": 1426450,\"ordate\": \"07.10.2021\"},{\"appid\": 1418670,\"ordate\": \"02.11.2020\"},{\"appid\": 861330,\"ordate\": \"06.07.2018\"},{\"appid\": 611160,\"ordate\": \"24.04.2017\"},{\"appid\": 1411460,\"ordate\": \"10.06.2021\"},{\"appid\": 1217050,\"ordate\": \"09.03.2020\"},{\"appid\": 713800,\"ordate\": \"05.10.2017\"},{\"appid\": 1085940,\"ordate\": \"28.12.2019\"},{\"appid\": 578690,\"ordate\": \"22.06.2017\"},{\"appid\": 768540,\"ordate\": \"18.05.2018\"},{\"appid\": 1166990,\"ordate\": \"07.11.2020\"},{\"appid\": 406350,\"ordate\": \"01.11.2018\"},{\"appid\": 805270,\"ordate\": \"23.10.2019\"},{\"appid\": 623340,\"ordate\": \"15.10.2019\"},{\"appid\": 693210,\"ordate\": \"03.09.2017\"},{\"appid\": 981090,\"ordate\": \"30.04.2020\"},{\"appid\": 1273710,\"ordate\": \"03.07.2020\"},{\"appid\": 682140,\"ordate\": \"24.10.2017\"},{\"appid\": 1268840,\"ordate\": \"01.04.2020\"},{\"appid\": 727930,\"ordate\": \"31.05.2019\"},{\"appid\": 934180,\"ordate\": \"08.10.2018\"},{\"appid\": 692890,\"ordate\": \"20.08.2020\"},{\"appid\": 1141860,\"ordate\": \"08.04.2021\"},{\"appid\": 1457690,\"ordate\": \"20.11.2020\"},{\"appid\": 1550400,\"ordate\": \"30.04.2021\"},{\"appid\": 898320,\"ordate\": \"27.07.2018\"},{\"appid\": 655740,\"ordate\": \"05.12.2020\"},{\"appid\": 662680,\"ordate\": \"23.08.2017\"},{\"appid\": 431450,\"ordate\": \"21.03.2016\"},{\"appid\": 465200,\"ordate\": \"24.02.2017\"},{\"appid\": 1274210,\"ordate\": \"02.10.2021\"},{\"appid\": 700400,\"ordate\": \"09.09.2017\"},{\"appid\": 1044030,\"ordate\": \"26.03.2019\"},{\"appid\": 1785750,\"ordate\": \"30.11.2021\"},{\"appid\": 323220,\"ordate\": \"17.12.2014\"},{\"appid\": 582890,\"ordate\": \"17.03.2017\"},{\"appid\": 1459960,\"ordate\": \"11.08.2021\"},{\"appid\": 1696810,\"ordate\": \"01.10.2021\"},{\"appid\": 949290,\"ordate\": \"19.02.2019\"},{\"appid\": 611770,\"ordate\": \"24.06.2017\"},{\"appid\": 538100,\"ordate\": \"14.10.2016\"},{\"appid\": 1400260,\"ordate\": \"07.09.2020\"},{\"appid\": 1175360,\"ordate\": \"22.05.2020\"},{\"appid\": 1693090,\"ordate\": \"05.11.2021\"},{\"appid\": 1280290,\"ordate\": \"24.06.2021\"},{\"appid\": 826540,\"ordate\": \"24.10.2019\"},{\"appid\": 1117160,\"ordate\": \"14.02.2020\"},{\"appid\": 935400,\"ordate\": \"18.10.2019\"},{\"appid\": 1802720,\"ordate\": \"06.11.2021\"},{\"appid\": 253250,\"ordate\": \"03.06.2015\"},{\"appid\": 799640,\"ordate\": \"06.06.2019\"},{\"appid\": 691390,\"ordate\": \"15.09.2017\"},{\"appid\": 736420,\"ordate\": \"05.02.2019\"},{\"appid\": 1113880,\"ordate\": \"05.12.2019\"},{\"appid\": 1772270,\"ordate\": \"01.11.2021\"},{\"appid\": 1189490,\"ordate\": \"26.11.2019\"},{\"appid\": 301520,\"ordate\": \"08.07.2014\"},{\"appid\": 1384320,\"ordate\": \"05.11.2020\"},{\"appid\": 1358510,\"ordate\": \"17.12.2020\"},{\"appid\": 939400,\"ordate\": \"30.09.2018\"},{\"appid\": 445220,\"ordate\": \"23.01.2017\"},{\"appid\": 701080,\"ordate\": \"20.09.2017\"},{\"appid\": 1549850,\"ordate\": \"02.12.2021\"},{\"appid\": 1152000,\"ordate\": \"08.11.2019\"},{\"appid\": 656320,\"ordate\": \"13.10.2017\"},{\"appid\": 1166830,\"ordate\": \"02.12.2019\"},{\"appid\": 1527060,\"ordate\": \"03.03.2021\"},{\"appid\": 1288790,\"ordate\": \"16.12.2020\"},{\"appid\": 1148730,\"ordate\": \"25.01.2020\"},{\"appid\": 1287540,\"ordate\": \"16.11.2020\"},{\"appid\": 327090,\"ordate\": \"09.06.2015\"},{\"appid\": 1372640,\"ordate\": \"13.08.2020\"},{\"appid\": 488440,\"ordate\": \"18.11.2016\"},{\"appid\": 1192900,\"ordate\": \"10.11.2021\"},{\"appid\": 1040620,\"ordate\": \"26.07.2019\"},{\"appid\": 1476230,\"ordate\": \"27.08.2021\"},{\"appid\": 798180,\"ordate\": \"06.12.2018\"},{\"appid\": 1360670,\"ordate\": \"15.07.2020\"},{\"appid\": 582290,\"ordate\": \"09.02.2017\"},{\"appid\": 953060,\"ordate\": \"16.11.2018\"},{\"appid\": 1505560,\"ordate\": \"08.02.2021\"},{\"appid\": 745680,\"ordate\": \"27.03.2020\"},{\"appid\": 1216320,\"ordate\": \"23.03.2020\"},{\"appid\": 274520,\"ordate\": \"24.07.2014\"},{\"appid\": 1245580,\"ordate\": \"09.03.2020\"},{\"appid\": 1770210,\"ordate\": \"22.01.2022\"},{\"appid\": 1127840,\"ordate\": \"30.04.2020\"},{\"appid\": 232450,\"ordate\": \"02.07.2013\"},{\"appid\": 915600,\"ordate\": \"07.09.2018\"},{\"appid\": 378760,\"ordate\": \"01.05.2020\"},{\"appid\": 304930,\"ordate\": \"17.06.2014\"},{\"appid\": 895760,\"ordate\": \"16.11.2021\"},{\"appid\": 1225840,\"ordate\": \"25.08.2020\"},{\"appid\": 1712530,\"ordate\": \"17.08.2021\"},{\"appid\": 367240,\"ordate\": \"01.06.2015\"},{\"appid\": 883970,\"ordate\": \"24.01.2019\"},{\"appid\": 668230,\"ordate\": \"08.09.2017\"},{\"appid\": 578210,\"ordate\": \"16.03.2017\"},{\"appid\": 1505270,\"ordate\": \"21.01.2021\"},{\"appid\": 428180,\"ordate\": \"02.02.2016\"},{\"appid\": 992300,\"ordate\": \"16.01.2019\"},{\"appid\": 1009960,\"ordate\": \"29.01.2020\"},{\"appid\": 1524630,\"ordate\": \"26.02.2021\"},{\"appid\": 1158940,\"ordate\": \"06.11.2020\"},{\"appid\": 308060,\"ordate\": \"05.07.2014\"},{\"appid\": 823950,\"ordate\": \"30.08.2019\"},{\"appid\": 929630,\"ordate\": \"02.08.2019\"},{\"appid\": 527960,\"ordate\": \"05.04.2017\"},{\"appid\": 640340,\"ordate\": \"03.04.2019\"},{\"appid\": 1565710,\"ordate\": \"08.04.2021\"},{\"appid\": 861650,\"ordate\": \"17.09.2019\"},{\"appid\": 1277920,\"ordate\": \"25.04.2020\"},{\"appid\": 1335360,\"ordate\": \"19.01.2021\"},{\"appid\": 454350,\"ordate\": \"26.01.2017\"},{\"appid\": 581910,\"ordate\": \"29.12.2017\"},{\"appid\": 538990,\"ordate\": \"16.12.2016\"},{\"appid\": 875760,\"ordate\": \"17.07.2018\"},{\"appid\": 1324270,\"ordate\": \"29.10.2020\"},{\"appid\": 557580,\"ordate\": \"23.12.2016\"},{\"appid\": 636970,\"ordate\": \"31.05.2017\"},{\"appid\": 375530,\"ordate\": \"02.06.2015\"},{\"appid\": 1178780,\"ordate\": \"31.07.2020\"},{\"appid\": 654690,\"ordate\": \"29.09.2017\"},{\"appid\": 1215000,\"ordate\": \"04.02.2020\"},{\"appid\": 420290,\"ordate\": \"24.02.2017\"},{\"appid\": 956450,\"ordate\": \"29.12.2018\"},{\"appid\": 1185600,\"ordate\": \"22.01.2020\"},{\"appid\": 598330,\"ordate\": \"07.03.2017\"},{\"appid\": 1756160,\"ordate\": \"19.11.2021\"},{\"appid\": 1534340,\"ordate\": \"30.03.2021\"},{\"appid\": 1291790,\"ordate\": \"30.10.2020\"},{\"appid\": 879920,\"ordate\": \"17.07.2018\"},{\"appid\": 1340180,\"ordate\": \"12.05.2021\"},{\"appid\": 1411550,\"ordate\": \"28.10.2020\"},{\"appid\": 1044820,\"ordate\": \"05.08.2019\"},{\"appid\": 1704540,\"ordate\": \"01.03.2022\"},{\"appid\": 1316530,\"ordate\": \"08.02.2021\"},{\"appid\": 1451890,\"ordate\": \"05.11.2020\"},{\"appid\": 562730,\"ordate\": \"22.03.2017\"},{\"appid\": 959510,\"ordate\": \"08.11.2018\"},{\"appid\": 1454360,\"ordate\": \"12.11.2020\"},{\"appid\": 287220,\"ordate\": \"15.10.2014\"},{\"appid\": 1036660,\"ordate\": \"22.03.2019\"},{\"appid\": 912900,\"ordate\": \"14.10.2020\"},{\"appid\": 424850,\"ordate\": \"27.03.2016\"},{\"appid\": 1137040,\"ordate\": \"04.10.2019\"},{\"appid\": 793570,\"ordate\": \"09.03.2018\"},{\"appid\": 1516940,\"ordate\": \"08.02.2021\"},{\"appid\": 1203930,\"ordate\": \"20.03.2020\"},{\"appid\": 869340,\"ordate\": \"09.06.2018\"},{\"appid\": 1180630,\"ordate\": \"13.11.2019\"},{\"appid\": 977400,\"ordate\": \"12.12.2018\"},{\"appid\": 257030,\"ordate\": \"05.11.2014\"},{\"appid\": 451600,\"ordate\": \"22.04.2016\"},{\"appid\": 681750,\"ordate\": \"16.08.2017\"},{\"appid\": 341710,\"ordate\": \"24.04.2015\"},{\"appid\": 1817260,\"ordate\": \"26.01.2022\"},{\"appid\": 1079510,\"ordate\": \"02.12.2020\"},{\"appid\": 1035600,\"ordate\": \"01.12.2021\"},{\"appid\": 494430,\"ordate\": \"01.02.2019\"},{\"appid\": 1739300,\"ordate\": \"20.09.2021\"},{\"appid\": 305620,\"ordate\": \"22.09.2014\"},{\"appid\": 965640,\"ordate\": \"16.11.2018\"},{\"appid\": 977270,\"ordate\": \"30.11.2018\"},{\"appid\": 1248800,\"ordate\": \"09.09.2020\"},{\"appid\": 778010,\"ordate\": \"13.11.2020\"},{\"appid\": 523660,\"ordate\": \"22.06.2017\"},{\"appid\": 410340,\"ordate\": \"09.11.2015\"},{\"appid\": 944640,\"ordate\": \"10.10.2018\"},{\"appid\": 886310,\"ordate\": \"06.07.2018\"},{\"appid\": 1054700,\"ordate\": \"20.04.2020\"},{\"appid\": 960040,\"ordate\": \"16.11.2018\"},{\"appid\": 1149800,\"ordate\": \"23.12.2021\"},{\"appid\": 1204330,\"ordate\": \"30.01.2020\"},{\"appid\": 498340,\"ordate\": \"12.10.2016\"},{\"appid\": 1086940,\"ordate\": \"06.10.2020\"},{\"appid\": 1696720,\"ordate\": \"07.12.2021\"},{\"appid\": 621290,\"ordate\": \"11.04.2017\"},{\"appid\": 1076750,\"ordate\": \"14.07.2021\"},{\"appid\": 853140,\"ordate\": \"31.05.2018\"},{\"appid\": 419710,\"ordate\": \"20.10.2016\"},{\"appid\": 1004170,\"ordate\": \"01.02.2019\"},{\"appid\": 1285920,\"ordate\": \"30.04.2021\"},{\"appid\": 1376360,\"ordate\": \"15.10.2020\"},{\"appid\": 1355090,\"ordate\": \"22.12.2020\"},{\"appid\": 1302240,\"ordate\": \"29.10.2020\"},{\"appid\": 1357430,\"ordate\": \"04.08.2021\"},{\"appid\": 746760,\"ordate\": \"11.12.2017\"},{\"appid\": 1100930,\"ordate\": \"01.11.2019\"},{\"appid\": 667170,\"ordate\": \"08.11.2017\"},{\"appid\": 856610,\"ordate\": \"27.02.2019\"},{\"appid\": 930280,\"ordate\": \"08.11.2018\"},{\"appid\": 1262060,\"ordate\": \"21.03.2020\"},{\"appid\": 1127120,\"ordate\": \"02.09.2019\"},{\"appid\": 1625810,\"ordate\": \"30.05.2021\"},{\"appid\": 1815530,\"ordate\": \"29.03.2022\"},{\"appid\": 606920,\"ordate\": \"02.04.2017\"},{\"appid\": 728090,\"ordate\": \"21.01.2019\"},{\"appid\": 806860,\"ordate\": \"13.03.2018\"},{\"appid\": 1515920,\"ordate\": \"31.05.2021\"},{\"appid\": 1339340,\"ordate\": \"25.06.2020\"},{\"appid\": 598060,\"ordate\": \"09.02.2018\"},{\"appid\": 321400,\"ordate\": \"02.05.2016\"},{\"appid\": 254590,\"ordate\": \"25.02.2014\"},{\"appid\": 1550650,\"ordate\": \"22.02.2022\"},{\"appid\": 1848910,\"ordate\": \"03.05.2022\"},{\"appid\": 1966620,\"ordate\": \"03.05.2022\"},{\"appid\": 882460,\"ordate\": \"04.08.2018\"},{\"appid\": 396900,\"ordate\": \"02.02.2016\"},{\"appid\": 906870,\"ordate\": \"11.07.2019\"},{\"appid\": 1049590,\"ordate\": \"14.10.2020\"},{\"appid\": 881310,\"ordate\": \"21.12.2019\"},{\"appid\": 794490,\"ordate\": \"02.05.2018\"},{\"appid\": 302670,\"ordate\": \"30.07.2015\"},{\"appid\": 1932570,\"ordate\": \"29.04.2022\"},{\"appid\": 280790,\"ordate\": \"12.08.2014\"},{\"appid\": 572220,\"ordate\": \"13.01.2017\"},{\"appid\": 1304470,\"ordate\": \"03.07.2020\"},{\"appid\": 1954070,\"ordate\": \"03.05.2022\"},{\"appid\": 1491200,\"ordate\": \"28.04.2022\"},{\"appid\": 993340,\"ordate\": \"22.12.2018\"},{\"appid\": 1880080,\"ordate\": \"23.02.2022\"},{\"appid\": 413740,\"ordate\": \"18.12.2015\"},{\"appid\": 1684100,\"ordate\": \"07.01.2022\"},{\"appid\": 369560,\"ordate\": \"11.06.2015\"},{\"appid\": 322110,\"ordate\": \"25.11.2014\"},{\"appid\": 1909220,\"ordate\": \"17.04.2022\"},{\"appid\": 1678050,\"ordate\": \"14.07.2021\"},{\"appid\": 335430,\"ordate\": \"05.02.2015\"},{\"appid\": 1509810,\"ordate\": \"27.03.2021\"},{\"appid\": 1846000,\"ordate\": \"11.02.2022\"},{\"appid\": 1303010,\"ordate\": \"02.04.2022\"},{\"appid\": 787850,\"ordate\": \"05.06.2019\"},{\"appid\": 755410,\"ordate\": \"10.11.2018\"},{\"appid\": 349710,\"ordate\": \"15.11.2018\"},{\"appid\": 293780,\"ordate\": \"24.07.2014\"},{\"appid\": 1557190,\"ordate\": \"31.03.2021\"},{\"appid\": 684000,\"ordate\": \"22.09.2017\"},{\"appid\": 1198290,\"ordate\": \"20.12.2019\"},{\"appid\": 1494500,\"ordate\": \"16.02.2021\"},{\"appid\": 556960,\"ordate\": \"15.11.2017\"},{\"appid\": 1102930,\"ordate\": \"01.04.2020\"},{\"appid\": 843380,\"ordate\": \"12.12.2018\"},{\"appid\": 1079200,\"ordate\": \"15.08.2019\"},{\"appid\": 1340300,\"ordate\": \"25.09.2020\"},{\"appid\": 1051690,\"ordate\": \"16.07.2019\"},{\"appid\": 738700,\"ordate\": \"23.11.2018\"},{\"appid\": 1435970,\"ordate\": \"12.01.2022\"},{\"appid\": 1964300,\"ordate\": \"25.04.2022\"},{\"appid\": 1043260,\"ordate\": \"14.10.2021\"},{\"appid\": 1208390,\"ordate\": \"16.03.2021\"},{\"appid\": 860890,\"ordate\": \"12.03.2019\"},{\"appid\": 494780,\"ordate\": \"22.07.2016\"},{\"appid\": 857740,\"ordate\": \"05.06.2018\"},{\"appid\": 1271920,\"ordate\": \"23.06.2020\"},{\"appid\": 704030,\"ordate\": \"13.02.2018\"},{\"appid\": 1119730,\"ordate\": \"04.03.2021\"},{\"appid\": 606800,\"ordate\": \"11.08.2017\"},{\"appid\": 1124180,\"ordate\": \"23.06.2021\"},{\"appid\": 237870,\"ordate\": \"11.03.2014\"},{\"appid\": 485900,\"ordate\": \"22.08.2016\"},{\"appid\": 1251380,\"ordate\": \"07.05.2020\"},{\"appid\": 909320,\"ordate\": \"25.08.2020\"},{\"appid\": 1371690,\"ordate\": \"26.05.2021\"},{\"appid\": 634410,\"ordate\": \"27.09.2019\"},{\"appid\": 1097130,\"ordate\": \"05.03.2021\"},{\"appid\": 588210,\"ordate\": \"24.02.2017\"},{\"appid\": 211820,\"ordate\": \"26.11.2013\"},{\"appid\": 1237310,\"ordate\": \"15.01.2021\"},{\"appid\": 526160,\"ordate\": \"08.02.2017\"},{\"appid\": 1272320,\"ordate\": \"09.02.2022\"},{\"appid\": 207140,\"ordate\": \"27.08.2013\"},{\"appid\": 1536470,\"ordate\": \"08.04.2021\"},{\"appid\": 858560,\"ordate\": \"10.10.2018\"},{\"appid\": 724330,\"ordate\": \"10.09.2019\"},{\"appid\": 1460550,\"ordate\": \"28.02.2022\"},{\"appid\": 1663650,\"ordate\": \"21.07.2021\"},{\"appid\": 381750,\"ordate\": \"25.11.2015\"},{\"appid\": 1479480,\"ordate\": \"05.11.2021\"},{\"appid\": 1332220,\"ordate\": \"26.08.2021\"},{\"appid\": 465000,\"ordate\": \"01.05.2016\"},{\"appid\": 1486280,\"ordate\": \"23.06.2022\"},{\"appid\": 1207320,\"ordate\": \"30.04.2020\"},{\"appid\": 285380,\"ordate\": \"30.03.2017\"},{\"appid\": 1649730,\"ordate\": \"21.06.2022\"},{\"appid\": 437340,\"ordate\": \"14.07.2016\"},{\"appid\": 1098000,\"ordate\": \"27.06.2019\"},{\"appid\": 745920,\"ordate\": \"21.01.2020\"},{\"appid\": 1562420,\"ordate\": \"10.09.2021\"},{\"appid\": 1222300,\"ordate\": \"27.05.2020\"},{\"appid\": 1170330,\"ordate\": \"28.10.2019\"},{\"appid\": 1386990,\"ordate\": \"13.10.2020\"},{\"appid\": 422300,\"ordate\": \"15.12.2015\"},{\"appid\": 681390,\"ordate\": \"17.08.2017\"},{\"appid\": 931950,\"ordate\": \"12.03.2020\"},{\"appid\": 348810,\"ordate\": \"18.08.2015\"},{\"appid\": 690040,\"ordate\": \"07.12.2017\"},{\"appid\": 1243560,\"ordate\": \"03.03.2020\"},{\"appid\": 891370,\"ordate\": \"10.05.2019\"},{\"appid\": 498000,\"ordate\": \"05.10.2016\"},{\"appid\": 1086850,\"ordate\": \"10.06.2019\"},{\"appid\": 989440,\"ordate\": \"22.06.2021\"},{\"appid\": 332540,\"ordate\": \"18.11.2014\"},{\"appid\": 648410,\"ordate\": \"06.04.2021\"},{\"appid\": 1227650,\"ordate\": \"03.03.2021\"},{\"appid\": 1446370,\"ordate\": \"25.03.2022\"},{\"appid\": 1463970,\"ordate\": \"29.10.2021\"},{\"appid\": 1104450,\"ordate\": \"06.03.2020\"},{\"appid\": 658480,\"ordate\": \"24.04.2018\"},{\"appid\": 1063990,\"ordate\": \"08.07.2019\"},{\"appid\": 1313700,\"ordate\": \"29.05.2020\"},{\"appid\": 1472060,\"ordate\": \"01.04.2021\"},{\"appid\": 960030,\"ordate\": \"20.12.2018\"},{\"appid\": 261550,\"ordate\": \"30.03.2020\"},{\"appid\": 453090,\"ordate\": \"05.05.2016\"},{\"appid\": 762680,\"ordate\": \"12.04.2018\"},{\"appid\": 1157960,\"ordate\": \"19.12.2019\"},{\"appid\": 363950,\"ordate\": \"01.09.2016\"},{\"appid\": 1942850,\"ordate\": \"09.04.2022\"},{\"appid\": 610250,\"ordate\": \"02.02.2018\"},{\"appid\": 604770,\"ordate\": \"11.08.2020\"},{\"appid\": 744260,\"ordate\": \"18.12.2018\"},{\"appid\": 1617270,\"ordate\": \"15.06.2021\"},{\"appid\": 1515600,\"ordate\": \"19.02.2021\"},{\"appid\": 573090,\"ordate\": \"28.02.2018\"},{\"appid\": 895980,\"ordate\": \"18.07.2018\"},{\"appid\": 1351900,\"ordate\": \"12.08.2020\"},{\"appid\": 406690,\"ordate\": \"18.03.2016\"},{\"appid\": 1276660,\"ordate\": \"03.12.2020\"},{\"appid\": 627690,\"ordate\": \"07.09.2017\"},{\"appid\": 233450,\"ordate\": \"20.03.2013\"},{\"appid\": 236110,\"ordate\": \"05.12.2014\"},{\"appid\": 819940,\"ordate\": \"31.03.2018\"},{\"appid\": 1189630,\"ordate\": \"01.05.2020\"},{\"appid\": 725480,\"ordate\": \"05.03.2018\"},{\"appid\": 436470,\"ordate\": \"27.05.2016\"},{\"appid\": 473770,\"ordate\": \"31.05.2016\"},{\"appid\": 1873780,\"ordate\": \"25.03.2022\"},{\"appid\": 1476720,\"ordate\": \"01.07.2021\"},{\"appid\": 878310,\"ordate\": \"01.07.2018\"},{\"appid\": 284100,\"ordate\": \"24.03.2014\"},{\"appid\": 1560880,\"ordate\": \"10.06.2021\"},{\"appid\": 1083460,\"ordate\": \"06.08.2019\"},{\"appid\": 1173730,\"ordate\": \"21.12.2020\"},{\"appid\": 1280380,\"ordate\": \"23.01.2021\"},{\"appid\": 504620,\"ordate\": \"03.09.2016\"},{\"appid\": 1243200,\"ordate\": \"09.12.2021\"},{\"appid\": 707030,\"ordate\": \"14.10.2019\"},{\"appid\": 1093320,\"ordate\": \"18.09.2019\"},{\"appid\": 1554220,\"ordate\": \"22.04.2021\"},{\"appid\": 975270,\"ordate\": \"09.01.2019\"},{\"appid\": 269190,\"ordate\": \"05.12.2018\"},{\"appid\": 464610,\"ordate\": \"10.06.2016\"},{\"appid\": 529970,\"ordate\": \"28.04.2018\"},{\"appid\": 1783110,\"ordate\": \"15.02.2022\"},{\"appid\": 726840,\"ordate\": \"21.02.2019\"},{\"appid\": 1281190,\"ordate\": \"15.04.2020\"},{\"appid\": 539050,\"ordate\": \"14.11.2016\"},{\"appid\": 955300,\"ordate\": \"20.12.2018\"},{\"appid\": 368180,\"ordate\": \"04.06.2015\"},{\"appid\": 1553890,\"ordate\": \"03.04.2021\"},{\"appid\": 905220,\"ordate\": \"18.04.2019\"},{\"appid\": 552690,\"ordate\": \"09.02.2017\"},{\"appid\": 1669170,\"ordate\": \"09.03.2022\"},{\"appid\": 1260590,\"ordate\": \"26.02.2021\"},{\"appid\": 1487560,\"ordate\": \"16.11.2021\"},{\"appid\": 864430,\"ordate\": \"05.10.2018\"},{\"appid\": 686090,\"ordate\": \"25.09.2017\"},{\"appid\": 890130,\"ordate\": \"27.08.2018\"},{\"appid\": 1398220,\"ordate\": \"13.11.2020\"},{\"appid\": 1557480,\"ordate\": \"02.11.2021\"},{\"appid\": 307110,\"ordate\": \"08.02.2017\"},{\"appid\": 1375760,\"ordate\": \"07.09.2020\"},{\"appid\": 1379120,\"ordate\": \"23.10.2021\"},{\"appid\": 1577470,\"ordate\": \"27.05.2021\"},{\"appid\": 489520,\"ordate\": \"02.12.2016\"},{\"appid\": 1029210,\"ordate\": \"17.02.2021\"},{\"appid\": 1621690,\"ordate\": \"08.03.2022\"},{\"appid\": 931070,\"ordate\": \"06.02.2019\"},{\"appid\": 1042210,\"ordate\": \"13.03.2019\"},{\"appid\": 505740,\"ordate\": \"28.09.2018\"},{\"appid\": 467060,\"ordate\": \"13.10.2016\"},{\"appid\": 589290,\"ordate\": \"21.09.2017\"},{\"appid\": 738520,\"ordate\": \"13.09.2018\"},{\"appid\": 676840,\"ordate\": \"29.06.2018\"},{\"appid\": 824450,\"ordate\": \"09.08.2018\"},{\"appid\": 1690710,\"ordate\": \"22.07.2022\"},{\"appid\": 1074630,\"ordate\": \"11.05.2019\"},{\"appid\": 694480,\"ordate\": \"16.12.2017\"},{\"appid\": 409490,\"ordate\": \"06.11.2015\"},{\"appid\": 746040,\"ordate\": \"07.04.2021\"},{\"appid\": 674840,\"ordate\": \"14.10.2017\"},{\"appid\": 1555310,\"ordate\": \"18.10.2021\"},{\"appid\": 1437280,\"ordate\": \"05.03.2021\"},{\"appid\": 1220170,\"ordate\": \"06.05.2020\"},{\"appid\": 767490,\"ordate\": \"23.08.2019\"},{\"appid\": 1756550,\"ordate\": \"18.12.2021\"},{\"appid\": 512220,\"ordate\": \"12.08.2016\"},{\"appid\": 1522280,\"ordate\": \"12.10.2021\"},{\"appid\": 858250,\"ordate\": \"28.05.2018\"},{\"appid\": 781130,\"ordate\": \"30.10.2018\"},{\"appid\": 1147130,\"ordate\": \"11.06.2021\"},{\"appid\": 246920,\"ordate\": \"31.07.2015\"},{\"appid\": 1291660,\"ordate\": \"31.05.2021\"},{\"appid\": 1836550,\"ordate\": \"20.12.2021\"},{\"appid\": 1465070,\"ordate\": \"09.09.2021\"},{\"appid\": 1097210,\"ordate\": \"16.03.2020\"},{\"appid\": 501220,\"ordate\": \"06.08.2016\"},{\"appid\": 351100,\"ordate\": \"28.04.2016\"},{\"appid\": 1106140,\"ordate\": \"30.01.2021\"},{\"appid\": 500980,\"ordate\": \"14.08.2016\"},{\"appid\": 1670240,\"ordate\": \"15.10.2021\"},{\"appid\": 1289480,\"ordate\": \"31.07.2020\"},{\"appid\": 1054430,\"ordate\": \"23.08.2021\"},{\"appid\": 1330000,\"ordate\": \"14.10.2021\"},{\"appid\": 405670,\"ordate\": \"18.08.2016\"},{\"appid\": 357650,\"ordate\": \"20.03.2015\"},{\"appid\": 919360,\"ordate\": \"30.06.2022\"},{\"appid\": 1204230,\"ordate\": \"05.03.2020\"},{\"appid\": 677380,\"ordate\": \"21.07.2017\"},{\"appid\": 1710670,\"ordate\": \"29.07.2022\"},{\"appid\": 1746620,\"ordate\": \"19.01.2022\"},{\"appid\": 458330,\"ordate\": \"15.06.2016\"},{\"appid\": 788630,\"ordate\": \"02.04.2018\"},{\"appid\": 1138100,\"ordate\": \"11.11.2019\"},{\"appid\": 1935100,\"ordate\": \"22.04.2022\"},{\"appid\": 1354230,\"ordate\": \"31.07.2021\"},{\"appid\": 479020,\"ordate\": \"13.07.2016\"},{\"appid\": 290020,\"ordate\": \"22.09.2014\"},{\"appid\": 995170,\"ordate\": \"01.01.2019\"},{\"appid\": 1695680,\"ordate\": \"02.11.2021\"},{\"appid\": 1425250,\"ordate\": \"06.10.2020\"},{\"appid\": 1478340,\"ordate\": \"27.04.2022\"},{\"appid\": 449960,\"ordate\": \"28.07.2016\"},{\"appid\": 336300,\"ordate\": \"12.12.2014\"},{\"appid\": 1590730,\"ordate\": \"15.04.2021\"},{\"appid\": 1474790,\"ordate\": \"17.09.2021\"},{\"appid\": 1363360,\"ordate\": \"19.05.2021\"},{\"appid\": 1114220,\"ordate\": \"01.06.2020\"},{\"appid\": 764230,\"ordate\": \"05.01.2018\"},{\"appid\": 360620,\"ordate\": \"02.11.2015\"},{\"appid\": 831250,\"ordate\": \"11.04.2018\"},{\"appid\": 679830,\"ordate\": \"13.11.2019\"},{\"appid\": 785860,\"ordate\": \"11.05.2019\"},{\"appid\": 1672440,\"ordate\": \"11.07.2021\"},{\"appid\": 1342330,\"ordate\": \"22.01.2021\"},{\"appid\": 1050160,\"ordate\": \"18.06.2020\"},{\"appid\": 465020,\"ordate\": \"02.05.2016\"},{\"appid\": 1016820,\"ordate\": \"31.01.2021\"},{\"appid\": 269310,\"ordate\": \"04.04.2014\"},{\"appid\": 1297270,\"ordate\": \"18.05.2020\"},{\"appid\": 454140,\"ordate\": \"06.12.2016\"},{\"appid\": 625340,\"ordate\": \"24.05.2019\"},{\"appid\": 589670,\"ordate\": \"11.04.2018\"},{\"appid\": 512900,\"ordate\": \"10.03.2017\"},{\"appid\": 1296610,\"ordate\": \"26.04.2022\"},{\"appid\": 1401340,\"ordate\": \"13.04.2021\"},{\"appid\": 854890,\"ordate\": \"27.09.2018\"},{\"appid\": 1611600,\"ordate\": \"20.01.2022\"},{\"appid\": 1269020,\"ordate\": \"01.12.2021\"},{\"appid\": 1918560,\"ordate\": \"07.08.2022\"},{\"appid\": 1428420,\"ordate\": \"10.11.2020\"},{\"appid\": 481870,\"ordate\": \"13.06.2016\"},{\"appid\": 1133520,\"ordate\": \"09.09.2020\"},{\"appid\": 915360,\"ordate\": \"07.09.2018\"},{\"appid\": 1468810,\"ordate\": \"27.01.2021\"},{\"appid\": 550170,\"ordate\": \"18.11.2016\"},{\"appid\": 530130,\"ordate\": \"01.12.2016\"},{\"appid\": 889260,\"ordate\": \"05.10.2018\"},{\"appid\": 1046490,\"ordate\": \"12.04.2019\"},{\"appid\": 1131620,\"ordate\": \"07.10.2021\"},{\"appid\": 794350,\"ordate\": \"06.01.2020\"},{\"appid\": 1927300,\"ordate\": \"22.04.2022\"},{\"appid\": 1200150,\"ordate\": \"27.03.2020\"},{\"appid\": 1646580,\"ordate\": \"09.10.2021\"},{\"appid\": 470310,\"ordate\": \"31.12.2017\"},{\"appid\": 1757130,\"ordate\": \"17.12.2021\"},{\"appid\": 1613230,\"ordate\": \"11.05.2021\"},{\"appid\": 763610,\"ordate\": \"25.04.2018\"},{\"appid\": 219990,\"ordate\": \"05.11.2013\"},{\"appid\": 1456200,\"ordate\": \"09.12.2020\"},{\"appid\": 1101780,\"ordate\": \"06.08.2019\"},{\"appid\": 1904130,\"ordate\": \"12.04.2022\"},{\"appid\": 949450,\"ordate\": \"31.05.2019\"},{\"appid\": 338810,\"ordate\": \"22.04.2015\"},{\"appid\": 1270280,\"ordate\": \"15.04.2020\"},{\"appid\": 606500,\"ordate\": \"09.11.2018\"},{\"appid\": 1044760,\"ordate\": \"21.06.2019\"},{\"appid\": 355180,\"ordate\": \"17.07.2015\"},{\"appid\": 1804640,\"ordate\": \"06.09.2022\"},{\"appid\": 824600,\"ordate\": \"29.01.2021\"},{\"appid\": 1343520,\"ordate\": \"04.02.2021\"},{\"appid\": 1781290,\"ordate\": \"16.11.2021\"},{\"appid\": 905120,\"ordate\": \"13.08.2018\"},{\"appid\": 848450,\"ordate\": \"31.01.2019\"},{\"appid\": 1789050,\"ordate\": \"07.01.2022\"},{\"appid\": 1999140,\"ordate\": \"15.06.2022\"},{\"appid\": 1999170,\"ordate\": \"01.06.2022\"},{\"appid\": 1395330,\"ordate\": \"13.10.2020\"},{\"appid\": 1304680,\"ordate\": \"25.02.2021\"},{\"appid\": 833170,\"ordate\": \"30.04.2019\"},{\"appid\": 898920,\"ordate\": \"31.07.2019\"},{\"appid\": 227940,\"ordate\": \"10.07.2014\"},{\"appid\": 338330,\"ordate\": \"15.09.2016\"},{\"appid\": 1142240,\"ordate\": \"13.09.2019\"},{\"appid\": 433170,\"ordate\": \"05.06.2017\"},{\"appid\": 622870,\"ordate\": \"10.05.2017\"},{\"appid\": 487120,\"ordate\": \"26.07.2017\"},{\"appid\": 910490,\"ordate\": \"16.07.2019\"},{\"appid\": 1374580,\"ordate\": \"26.10.2021\"},{\"appid\": 667610,\"ordate\": \"17.12.2020\"},{\"appid\": 1049890,\"ordate\": \"24.06.2020\"},{\"appid\": 780290,\"ordate\": \"17.07.2019\"},{\"appid\": 1190150,\"ordate\": \"02.12.2019\"},{\"appid\": 1371580,\"ordate\": \"18.11.2021\"},{\"appid\": 1089630,\"ordate\": \"12.11.2019\"},{\"appid\": 1514430,\"ordate\": \"17.02.2021\"},{\"appid\": 294100,\"ordate\": \"15.07.2016\"},{\"appid\": 1552080,\"ordate\": \"22.07.2021\"},{\"appid\": 651280,\"ordate\": \"12.06.2017\"},{\"appid\": 1184460,\"ordate\": \"31.01.2020\"},{\"appid\": 1211960,\"ordate\": \"17.04.2020\"},{\"appid\": 556550,\"ordate\": \"27.02.2018\"},{\"appid\": 1454010,\"ordate\": \"25.11.2020\"},{\"appid\": 640700,\"ordate\": \"04.06.2020\"},{\"appid\": 1467590,\"ordate\": \"01.12.2020\"},{\"appid\": 880730,\"ordate\": \"19.02.2021\"},{\"appid\": 1094760,\"ordate\": \"12.07.2019\"},{\"appid\": 957660,\"ordate\": \"17.08.2022\"},{\"appid\": 616680,\"ordate\": \"30.10.2019\"},{\"appid\": 605100,\"ordate\": \"30.05.2017\"},{\"appid\": 2075760,\"ordate\": \"29.07.2022\"},{\"appid\": 985240,\"ordate\": \"30.04.2021\"},{\"appid\": 391240,\"ordate\": \"30.05.2016\"},{\"appid\": 772750,\"ordate\": \"09.05.2018\"},{\"appid\": 981430,\"ordate\": \"27.03.2020\"},{\"appid\": 811620,\"ordate\": \"28.04.2018\"},{\"appid\": 346110,\"ordate\": \"02.06.2015\"},{\"appid\": 726000,\"ordate\": \"21.11.2017\"},{\"appid\": 1806420,\"ordate\": \"10.12.2021\"},{\"appid\": 250520,\"ordate\": \"24.09.2013\"},{\"appid\": 883780,\"ordate\": \"10.07.2018\"},{\"appid\": 270210,\"ordate\": \"26.02.2014\"},{\"appid\": 288220,\"ordate\": \"01.06.2014\"},{\"appid\": 1842730,\"ordate\": \"07.01.2022\"},{\"appid\": 361800,\"ordate\": \"27.05.2015\"},{\"appid\": 1491660,\"ordate\": \"30.12.2020\"},{\"appid\": 1525410,\"ordate\": \"10.11.2021\"},{\"appid\": 2058150,\"ordate\": \"19.07.2022\"},{\"appid\": 919260,\"ordate\": \"15.09.2020\"},{\"appid\": 1196240,\"ordate\": \"01.09.2021\"},{\"appid\": 1363680,\"ordate\": \"15.07.2020\"},{\"appid\": 911430,\"ordate\": \"31.03.2020\"},{\"appid\": 1557690,\"ordate\": \"13.04.2021\"},{\"appid\": 1836740,\"ordate\": \"08.07.2022\"},{\"appid\": 751940,\"ordate\": \"07.08.2019\"},{\"appid\": 238240,\"ordate\": \"30.06.2013\"},{\"appid\": 466110,\"ordate\": \"09.05.2016\"},{\"appid\": 1018960,\"ordate\": \"02.03.2019\"},{\"appid\": 1128920,\"ordate\": \"19.01.2021\"},{\"appid\": 378410,\"ordate\": \"04.08.2015\"},{\"appid\": 1674820,\"ordate\": \"29.03.2022\"},{\"appid\": 1653770,\"ordate\": \"16.09.2022\"},{\"appid\": 1137750,\"ordate\": \"05.08.2021\"},{\"appid\": 2089170,\"ordate\": \"01.09.2022\"},{\"appid\": 548430,\"ordate\": \"28.02.2018\"},{\"appid\": 1515320,\"ordate\": \"12.05.2022\"},{\"appid\": 290870,\"ordate\": \"16.05.2014\"},{\"appid\": 457140,\"ordate\": \"18.05.2017\"},{\"appid\": 224740,\"ordate\": \"15.08.2014\"},{\"appid\": 1631010,\"ordate\": \"08.07.2021\"},{\"appid\": 985510,\"ordate\": \"01.02.2019\"},{\"appid\": 986920,\"ordate\": \"16.08.2019\"},{\"appid\": 676760,\"ordate\": \"04.08.2017\"},{\"appid\": 1407450,\"ordate\": \"16.08.2022\"},{\"appid\": 1428100,\"ordate\": \"02.03.2022\"},{\"appid\": 812180,\"ordate\": \"27.03.2018\"},{\"appid\": 574980,\"ordate\": \"22.02.2018\"},{\"appid\": 318970,\"ordate\": \"17.03.2015\"},{\"appid\": 576650,\"ordate\": \"03.01.2017\"},{\"appid\": 1219790,\"ordate\": \"02.11.2020\"},{\"appid\": 700360,\"ordate\": \"28.03.2020\"},{\"appid\": 1454660,\"ordate\": \"19.11.2020\"},{\"appid\": 1655420,\"ordate\": \"15.07.2022\"},{\"appid\": 828730,\"ordate\": \"20.05.2018\"},{\"appid\": 1245910,\"ordate\": \"22.03.2020\"},{\"appid\": 1244630,\"ordate\": \"11.11.2021\"},{\"appid\": 1348760,\"ordate\": \"17.03.2022\"},{\"appid\": 616640,\"ordate\": \"10.05.2017\"},{\"appid\": 1289340,\"ordate\": \"18.02.2021\"},{\"appid\": 1239690,\"ordate\": \"06.03.2020\"},{\"appid\": 950620,\"ordate\": \"06.10.2022\"},{\"appid\": 962130,\"ordate\": \"28.07.2020\"},{\"appid\": 446120,\"ordate\": \"30.03.2016\"},{\"appid\": 708970,\"ordate\": \"08.12.2017\"},{\"appid\": 1299330,\"ordate\": \"26.02.2021\"},{\"appid\": 474880,\"ordate\": \"10.02.2017\"},{\"appid\": 1952310,\"ordate\": \"30.04.2022\"},{\"appid\": 883680,\"ordate\": \"30.05.2019\"},{\"appid\": 2020460,\"ordate\": \"20.06.2022\"},{\"appid\": 280180,\"ordate\": \"06.04.2015\"},{\"appid\": 242680,\"ordate\": \"11.10.2013\"},{\"appid\": 2001000,\"ordate\": \"28.06.2022\"},{\"appid\": 299480,\"ordate\": \"16.07.2014\"},{\"appid\": 882250,\"ordate\": \"31.05.2019\"},{\"appid\": 1160770,\"ordate\": \"19.11.2019\"},{\"appid\": 1965860,\"ordate\": \"19.12.2022\"},{\"appid\": 1651090,\"ordate\": \"15.02.2022\"},{\"appid\": 1273740,\"ordate\": \"20.05.2020\"},{\"appid\": 728110,\"ordate\": \"21.11.2017\"},{\"appid\": 651380,\"ordate\": \"15.03.2018\"},{\"appid\": 686810,\"ordate\": \"06.06.2019\"},{\"appid\": 2091500,\"ordate\": \"02.12.2022\"},{\"appid\": 638990,\"ordate\": \"18.10.2021\"},{\"appid\": 682450,\"ordate\": \"28.03.2018\"},{\"appid\": 657240,\"ordate\": \"28.09.2017\"},{\"appid\": 1784730,\"ordate\": \"28.10.2021\"},{\"appid\": 993840,\"ordate\": \"07.06.2019\"},{\"appid\": 1885200,\"ordate\": \"19.08.2022\"},{\"appid\": 1160950,\"ordate\": \"10.02.2020\"},{\"appid\": 1140870,\"ordate\": \"10.09.2019\"},{\"appid\": 1568620,\"ordate\": \"28.10.2021\"},{\"appid\": 326060,\"ordate\": \"19.05.2016\"},{\"appid\": 384740,\"ordate\": \"28.08.2015\"},{\"appid\": 1514840,\"ordate\": \"26.02.2021\"},{\"appid\": 1412070,\"ordate\": \"11.11.2021\"},{\"appid\": 439340,\"ordate\": \"31.01.2017\"},{\"appid\": 1538730,\"ordate\": \"29.09.2022\"},{\"appid\": 1549440,\"ordate\": \"03.11.2022\"},{\"appid\": 687630,\"ordate\": \"01.09.2017\"},{\"appid\": 1735640,\"ordate\": \"02.10.2021\"},{\"appid\": 572620,\"ordate\": \"29.06.2019\"},{\"appid\": 747850,\"ordate\": \"29.12.2017\"},{\"appid\": 220200,\"ordate\": \"21.03.2013\"},{\"appid\": 1961040,\"ordate\": \"06.05.2022\"},{\"appid\": 1131530,\"ordate\": \"14.08.2019\"},{\"appid\": 290000,\"ordate\": \"13.06.2014\"},{\"appid\": 944710,\"ordate\": \"10.12.2018\"},{\"appid\": 1143810,\"ordate\": \"09.07.2021\"},{\"appid\": 1306570,\"ordate\": \"18.05.2020\"},{\"appid\": 795490,\"ordate\": \"07.07.2018\"},{\"appid\": 270270,\"ordate\": \"01.07.2014\"},{\"appid\": 2151290,\"ordate\": \"12.12.2022\"},{\"appid\": 1381070,\"ordate\": \"18.08.2020\"},{\"appid\": 1506850,\"ordate\": \"20.04.2021\"},{\"appid\": 1427860,\"ordate\": \"19.04.2021\"},{\"appid\": 657480,\"ordate\": \"21.01.2021\"},{\"appid\": 666730,\"ordate\": \"04.08.2017\"},{\"appid\": 1536210,\"ordate\": \"31.08.2021\"},{\"appid\": 750520,\"ordate\": \"12.09.2019\"},{\"appid\": 853450,\"ordate\": \"10.06.2022\"},{\"appid\": 926610,\"ordate\": \"04.10.2018\"},{\"appid\": 1247570,\"ordate\": \"24.02.2020\"},{\"appid\": 1705030,\"ordate\": \"16.11.2021\"},{\"appid\": 594330,\"ordate\": \"02.10.2018\"},{\"appid\": 801760,\"ordate\": \"21.03.2018\"},{\"appid\": 235380,\"ordate\": \"06.05.2015\"},{\"appid\": 1382920,\"ordate\": \"17.08.2020\"},{\"appid\": 1945250,\"ordate\": \"19.04.2022\"},{\"appid\": 829590,\"ordate\": \"03.04.2019\"},{\"appid\": 381020,\"ordate\": \"30.07.2015\"},{\"appid\": 1422180,\"ordate\": \"07.05.2021\"},{\"appid\": 681150,\"ordate\": \"04.08.2017\"},{\"appid\": 386710,\"ordate\": \"08.09.2015\"},{\"appid\": 250110,\"ordate\": \"29.08.2013\"},{\"appid\": 1416520,\"ordate\": \"25.11.2020\"},{\"appid\": 1380650,\"ordate\": \"30.07.2021\"},{\"appid\": 2022190,\"ordate\": \"13.10.2022\"},{\"appid\": 455980,\"ordate\": \"11.04.2016\"},{\"appid\": 290060,\"ordate\": \"14.04.2014\"},{\"appid\": 1430760,\"ordate\": \"08.03.2022\"},{\"appid\": 1445370,\"ordate\": \"10.01.2021\"},{\"appid\": 804870,\"ordate\": \"19.03.2018\"},{\"appid\": 1037080,\"ordate\": \"17.03.2021\"},{\"appid\": 576390,\"ordate\": \"04.02.2017\"},{\"appid\": 1993560,\"ordate\": \"29.08.2022\"},{\"appid\": 623320,\"ordate\": \"20.07.2017\"},{\"appid\": 1932700,\"ordate\": \"16.04.2022\"},{\"appid\": 1753670,\"ordate\": \"05.10.2021\"},{\"appid\": 513250,\"ordate\": \"06.01.2017\"},{\"appid\": 812380,\"ordate\": \"30.11.2022\"},{\"appid\": 2265130,\"ordate\": \"21.01.2023\"},{\"appid\": 1284190,\"ordate\": \"25.03.2022\"},{\"appid\": 320240,\"ordate\": \"26.07.2016\"},{\"appid\": 731670,\"ordate\": \"10.11.2017\"},{\"appid\": 810360,\"ordate\": \"17.05.2018\"},{\"appid\": 744040,\"ordate\": \"30.11.2017\"},{\"appid\": 280520,\"ordate\": \"29.05.2014\"},{\"appid\": 467820,\"ordate\": \"28.07.2016\"},{\"appid\": 1535560,\"ordate\": \"25.08.2022\"},{\"appid\": 433850,\"ordate\": \"18.02.2016\"},{\"appid\": 761300,\"ordate\": \"02.06.2018\"},{\"appid\": 1275600,\"ordate\": \"28.11.2020\"},{\"appid\": 1488070,\"ordate\": \"16.08.2022\"},{\"appid\": 1481440,\"ordate\": \"27.02.2021\"},{\"appid\": 867210,\"ordate\": \"10.05.2022\"},{\"appid\": 1218580,\"ordate\": \"05.05.2020\"},{\"appid\": 1918790,\"ordate\": \"23.03.2022\"},{\"appid\": 802120,\"ordate\": \"02.10.2020\"},{\"appid\": 942010,\"ordate\": \"17.04.2019\"},{\"appid\": 530830,\"ordate\": \"22.10.2016\"},{\"appid\": 1989140,\"ordate\": \"12.07.2022\"},{\"appid\": 1581800,\"ordate\": \"07.10.2021\"},{\"appid\": 704920,\"ordate\": \"15.05.2020\"},{\"appid\": 578620,\"ordate\": \"10.07.2017\"},{\"appid\": 2016080,\"ordate\": \"12.10.2022\"},{\"appid\": 264120,\"ordate\": \"06.02.2014\"},{\"appid\": 1063570,\"ordate\": \"20.08.2019\"},{\"appid\": 438000,\"ordate\": \"23.02.2016\"},{\"appid\": 514920,\"ordate\": \"14.12.2016\"},{\"appid\": 1119840,\"ordate\": \"21.10.2021\"},{\"appid\": 340580,\"ordate\": \"28.05.2015\"},{\"appid\": 1003150,\"ordate\": \"28.05.2020\"},{\"appid\": 1479880,\"ordate\": \"15.02.2021\"},{\"appid\": 291010,\"ordate\": \"06.06.2014\"},{\"appid\": 1204320,\"ordate\": \"14.01.2020\"},{\"appid\": 1868000,\"ordate\": \"22.07.2022\"},{\"appid\": 941600,\"ordate\": \"14.02.2019\"},{\"appid\": 811320,\"ordate\": \"01.08.2019\"},{\"appid\": 1394130,\"ordate\": \"04.06.2021\"},{\"appid\": 1878720,\"ordate\": \"14.10.2022\"},{\"appid\": 292330,\"ordate\": \"29.04.2016\"},{\"appid\": 1676380,\"ordate\": \"08.01.2022\"},{\"appid\": 1026380,\"ordate\": \"02.03.2019\"},{\"appid\": 1504570,\"ordate\": \"15.04.2022\"},{\"appid\": 1008700,\"ordate\": \"16.07.2020\"},{\"appid\": 848080,\"ordate\": \"30.10.2020\"},{\"appid\": 1719390,\"ordate\": \"02.11.2021\"},{\"appid\": 669500,\"ordate\": \"31.01.2019\"},{\"appid\": 493520,\"ordate\": \"10.12.2019\"},{\"appid\": 508440,\"ordate\": \"01.04.2019\"},{\"appid\": 2174420,\"ordate\": \"01.01.2023\"},{\"appid\": 1201830,\"ordate\": \"27.03.2020\"},{\"appid\": 1585530,\"ordate\": \"14.10.2021\"},{\"appid\": 1266430,\"ordate\": \"27.09.2022\"},{\"appid\": 1166910,\"ordate\": \"04.11.2019\"},{\"appid\": 298610,\"ordate\": \"06.12.2017\"},{\"appid\": 1291540,\"ordate\": \"03.09.2020\"},{\"appid\": 854680,\"ordate\": \"03.07.2018\"},{\"appid\": 437730,\"ordate\": \"09.01.2017\"},{\"appid\": 1623880,\"ordate\": \"30.06.2021\"},{\"appid\": 1665900,\"ordate\": \"20.01.2022\"},{\"appid\": 402330,\"ordate\": \"09.10.2015\"},{\"appid\": 1088790,\"ordate\": \"15.10.2019\"},{\"appid\": 1584690,\"ordate\": \"28.04.2022\"},{\"appid\": 246620,\"ordate\": \"20.02.2014\"},{\"appid\": 488550,\"ordate\": \"23.09.2016\"},{\"appid\": 1404850,\"ordate\": \"09.01.2021\"},{\"appid\": 604550,\"ordate\": \"17.10.2017\"},{\"appid\": 544920,\"ordate\": \"17.01.2018\"},{\"appid\": 531640,\"ordate\": \"19.11.2016\"},{\"appid\": 1651680,\"ordate\": \"01.09.2021\"},{\"appid\": 2015620,\"ordate\": \"23.10.2022\"},{\"appid\": 1147550,\"ordate\": \"31.01.2020\"},{\"appid\": 760630,\"ordate\": \"07.06.2019\"},{\"appid\": 997710,\"ordate\": \"23.07.2019\"},{\"appid\": 1144200,\"ordate\": \"18.12.2021\"},{\"appid\": 1134520,\"ordate\": \"04.10.2020\"},{\"appid\": 674090,\"ordate\": \"26.11.2020\"},{\"appid\": 1168870,\"ordate\": \"28.05.2020\"},{\"appid\": 483490,\"ordate\": \"15.07.2017\"},{\"appid\": 580820,\"ordate\": \"24.02.2017\"},{\"appid\": 958220,\"ordate\": \"11.09.2019\"},{\"appid\": 967120,\"ordate\": \"06.04.2021\"},{\"appid\": 1091460,\"ordate\": \"01.10.2019\"},{\"appid\": 434300,\"ordate\": \"08.01.2017\"},{\"appid\": 1499310,\"ordate\": \"03.11.2021\"},{\"appid\": 1937700,\"ordate\": \"27.04.2022\"},{\"appid\": 1604030,\"ordate\": \"17.05.2022\"},{\"appid\": 915810,\"ordate\": \"31.03.2022\"},{\"appid\": 612570,\"ordate\": \"27.04.2018\"},{\"appid\": 543910,\"ordate\": \"16.06.2017\"},{\"appid\": 1372530,\"ordate\": \"28.05.2021\"},{\"appid\": 1481720,\"ordate\": \"09.04.2021\"},{\"appid\": 262120,\"ordate\": \"01.03.2014\"},{\"appid\": 2105910,\"ordate\": \"16.09.2022\"},{\"appid\": 330100,\"ordate\": \"07.11.2014\"},{\"appid\": 1731260,\"ordate\": \"14.11.2022\"},{\"appid\": 229580,\"ordate\": \"13.08.2013\"},{\"appid\": 1444320,\"ordate\": \"26.10.2020\"},{\"appid\": 896440,\"ordate\": \"22.05.2020\"},{\"appid\": 1049870,\"ordate\": \"29.04.2019\"},{\"appid\": 2252820,\"ordate\": \"04.01.2023\"},{\"appid\": 459830,\"ordate\": \"03.10.2016\"},{\"appid\": 1829170,\"ordate\": \"14.10.2022\"},{\"appid\": 1765240,\"ordate\": \"06.10.2021\"},{\"appid\": 1548350,\"ordate\": \"23.12.2022\"},{\"appid\": 299250,\"ordate\": \"21.11.2014\"},{\"appid\": 1246490,\"ordate\": \"14.04.2020\"},{\"appid\": 939450,\"ordate\": \"23.11.2018\"},{\"appid\": 1094520,\"ordate\": \"03.01.2020\"},{\"appid\": 788670,\"ordate\": \"08.01.2020\"},{\"appid\": 921800,\"ordate\": \"26.09.2019\"},{\"appid\": 1878300,\"ordate\": \"01.03.2022\"},{\"appid\": 984910,\"ordate\": \"21.01.2019\"},{\"appid\": 1335370,\"ordate\": \"22.12.2021\"},{\"appid\": 504050,\"ordate\": \"25.05.2017\"},{\"appid\": 1333490,\"ordate\": \"08.11.2021\"},{\"appid\": 1782120,\"ordate\": \"15.11.2022\"},{\"appid\": 1352930,\"ordate\": \"16.09.2020\"},{\"appid\": 678900,\"ordate\": \"14.12.2017\"},{\"appid\": 1049560,\"ordate\": \"03.05.2019\"},{\"appid\": 1161580,\"ordate\": \"16.06.2020\"},{\"appid\": 1073350,\"ordate\": \"08.05.2019\"},{\"appid\": 1511460,\"ordate\": \"15.10.2021\"},{\"appid\": 641960,\"ordate\": \"14.06.2017\"},{\"appid\": 446020,\"ordate\": \"22.04.2016\"},{\"appid\": 1885250,\"ordate\": \"03.03.2022\"},{\"appid\": 1291970,\"ordate\": \"18.05.2020\"},{\"appid\": 1038370,\"ordate\": \"07.05.2019\"},{\"appid\": 1151580,\"ordate\": \"08.10.2019\"},{\"appid\": 884990,\"ordate\": \"22.11.2018\"},{\"appid\": 342150,\"ordate\": \"26.05.2015\"},{\"appid\": 645930,\"ordate\": \"05.10.2018\"},{\"appid\": 1168690,\"ordate\": \"01.12.2022\"},{\"appid\": 1069640,\"ordate\": \"20.11.2019\"},{\"appid\": 314950,\"ordate\": \"04.11.2014\"},{\"appid\": 369700,\"ordate\": \"28.04.2017\"},{\"appid\": 1422130,\"ordate\": \"13.01.2023\"},{\"appid\": 364050,\"ordate\": \"11.07.2015\"},{\"appid\": 254200,\"ordate\": \"10.12.2013\"},{\"appid\": 1552600,\"ordate\": \"20.03.2021\"},{\"appid\": 588630,\"ordate\": \"16.03.2017\"},{\"appid\": 1285230,\"ordate\": \"12.10.2021\"},{\"appid\": 970760,\"ordate\": \"06.08.2019\"},{\"appid\": 550650,\"ordate\": \"28.07.2017\"},{\"appid\": 1574240,\"ordate\": \"16.06.2022\"},{\"appid\": 880130,\"ordate\": \"16.09.2018\"},{\"appid\": 1023550,\"ordate\": \"09.03.2019\"},{\"appid\": 1335400,\"ordate\": \"31.07.2020\"},{\"appid\": 230070,\"ordate\": \"16.11.2013\"},{\"appid\": 365360,\"ordate\": \"27.04.2015\"},{\"appid\": 386930,\"ordate\": \"31.08.2015\"},{\"appid\": 1122250,\"ordate\": \"30.07.2019\"},{\"appid\": 2211090,\"ordate\": \"13.12.2022\"},{\"appid\": 268360,\"ordate\": \"31.03.2014\"},{\"appid\": 1504230,\"ordate\": \"05.02.2021\"},{\"appid\": 838790,\"ordate\": \"14.08.2018\"},{\"appid\": 1452910,\"ordate\": \"24.08.2021\"},{\"appid\": 2314090,\"ordate\": \"05.03.2023\"},{\"appid\": 1464420,\"ordate\": \"23.11.2020\"},{\"appid\": 437440,\"ordate\": \"04.10.2022\"},{\"appid\": 386140,\"ordate\": \"13.07.2015\"},{\"appid\": 1958190,\"ordate\": \"27.05.2022\"},{\"appid\": 1120480,\"ordate\": \"14.01.2022\"},{\"appid\": 800310,\"ordate\": \"10.03.2018\"},{\"appid\": 1442670,\"ordate\": \"22.08.2022\"},{\"appid\": 1502040,\"ordate\": \"24.03.2021\"},{\"appid\": 591460,\"ordate\": \"25.09.2018\"},{\"appid\": 1101960,\"ordate\": \"26.02.2020\"},{\"appid\": 1533390,\"ordate\": \"12.02.2021\"},{\"appid\": 529100,\"ordate\": \"17.10.2016\"},{\"appid\": 1124260,\"ordate\": \"26.01.2021\"},{\"appid\": 1259140,\"ordate\": \"17.07.2020\"},{\"appid\": 230190,\"ordate\": \"16.05.2013\"},{\"appid\": 325730,\"ordate\": \"10.10.2014\"},{\"appid\": 785660,\"ordate\": \"16.03.2018\"},{\"appid\": 1830280,\"ordate\": \"24.10.2022\"},{\"appid\": 2081240,\"ordate\": \"26.07.2022\"},{\"appid\": 1063870,\"ordate\": \"17.07.2019\"},{\"appid\": 1959990,\"ordate\": \"06.09.2022\"},{\"appid\": 955900,\"ordate\": \"10.01.2019\"},{\"appid\": 1719690,\"ordate\": \"31.03.2022\"},{\"appid\": 670240,\"ordate\": \"21.01.2018\"},{\"appid\": 1083070,\"ordate\": \"11.03.2021\"},{\"appid\": 964800,\"ordate\": \"10.11.2020\"},{\"appid\": 1135810,\"ordate\": \"21.11.2020\"},{\"appid\": 1693540,\"ordate\": \"08.10.2021\"},{\"appid\": 757420,\"ordate\": \"16.04.2018\"},{\"appid\": 865540,\"ordate\": \"22.06.2018\"},{\"appid\": 390560,\"ordate\": \"14.09.2017\"},{\"appid\": 425450,\"ordate\": \"20.01.2017\"},{\"appid\": 1370390,\"ordate\": \"18.09.2020\"},{\"appid\": 214420,\"ordate\": \"21.03.2013\"},{\"appid\": 1058650,\"ordate\": \"21.10.2020\"},{\"appid\": 981600,\"ordate\": \"11.10.2021\"},{\"appid\": 1598730,\"ordate\": \"03.09.2021\"},{\"appid\": 1398110,\"ordate\": \"01.05.2021\"},{\"appid\": 1308700,\"ordate\": \"17.12.2021\"},{\"appid\": 1426050,\"ordate\": \"15.09.2022\"},{\"appid\": 2250190,\"ordate\": \"02.03.2023\"},{\"appid\": 2189150,\"ordate\": \"25.12.2022\"},{\"appid\": 1252400,\"ordate\": \"06.11.2020\"},{\"appid\": 690950,\"ordate\": \"10.11.2017\"},{\"appid\": 432940,\"ordate\": \"02.02.2016\"},{\"appid\": 1000770,\"ordate\": \"02.12.2019\"},{\"appid\": 528460,\"ordate\": \"10.12.2016\"},{\"appid\": 531530,\"ordate\": \"13.10.2016\"},{\"appid\": 1144090,\"ordate\": \"27.11.2019\"},{\"appid\": 1826090,\"ordate\": \"11.03.2022\"},{\"appid\": 326840,\"ordate\": \"07.10.2014\"},{\"appid\": 1018800,\"ordate\": \"21.01.2020\"},{\"appid\": 1215390,\"ordate\": \"12.06.2020\"},{\"appid\": 2134060,\"ordate\": \"27.12.2022\"},{\"appid\": 715660,\"ordate\": \"27.04.2018\"},{\"appid\": 528970,\"ordate\": \"29.12.2016\"},{\"appid\": 1771990,\"ordate\": \"22.04.2022\"},{\"appid\": 1366810,\"ordate\": \"23.07.2020\"},{\"appid\": 1827700,\"ordate\": \"13.08.2022\"},{\"appid\": 644010,\"ordate\": \"03.05.2018\"},{\"appid\": 312430,\"ordate\": \"09.04.2015\"},{\"appid\": 444740,\"ordate\": \"07.03.2016\"},{\"appid\": 579840,\"ordate\": \"07.04.2017\"},{\"appid\": 1363740,\"ordate\": \"22.12.2021\"},{\"appid\": 2290890,\"ordate\": \"23.02.2023\"},{\"appid\": 547670,\"ordate\": \"07.06.2022\"},{\"appid\": 971690,\"ordate\": \"19.12.2018\"},{\"appid\": 1075570,\"ordate\": \"04.06.2019\"},{\"appid\": 300260,\"ordate\": \"15.04.2016\"},{\"appid\": 1974220,\"ordate\": \"01.10.2022\"},{\"appid\": 1876340,\"ordate\": \"05.05.2022\"},{\"appid\": 1587130,\"ordate\": \"10.02.2022\"},{\"appid\": 2116260,\"ordate\": \"04.02.2023\"},{\"appid\": 424040,\"ordate\": \"29.02.2016\"},{\"appid\": 1932210,\"ordate\": \"29.03.2023\"},{\"appid\": 763100,\"ordate\": \"13.12.2019\"},{\"appid\": 745970,\"ordate\": \"04.12.2018\"},{\"appid\": 619230,\"ordate\": \"03.10.2017\"},{\"appid\": 331210,\"ordate\": \"20.04.2016\"},{\"appid\": 1568720,\"ordate\": \"14.09.2021\"},{\"appid\": 591370,\"ordate\": \"18.05.2017\"},{\"appid\": 1404840,\"ordate\": \"20.10.2022\"},{\"appid\": 2373030,\"ordate\": \"23.04.2023\"},{\"appid\": 1254320,\"ordate\": \"17.01.2023\"},{\"appid\": 559280,\"ordate\": \"01.02.2017\"},{\"appid\": 1131240,\"ordate\": \"28.08.2020\"},{\"appid\": 1779070,\"ordate\": \"07.03.2022\"},{\"appid\": 1000870,\"ordate\": \"08.03.2019\"},{\"appid\": 286240,\"ordate\": \"08.12.2014\"},{\"appid\": 1460510,\"ordate\": \"02.11.2020\"},{\"appid\": 1440360,\"ordate\": \"20.04.2021\"},{\"appid\": 1037750,\"ordate\": \"11.06.2019\"},{\"appid\": 2157290,\"ordate\": \"05.10.2022\"},{\"appid\": 1148710,\"ordate\": \"20.10.2019\"},{\"appid\": 1056840,\"ordate\": \"08.12.2020\"},{\"appid\": 1634990,\"ordate\": \"26.08.2021\"},{\"appid\": 1741420,\"ordate\": \"29.11.2021\"},{\"appid\": 407000,\"ordate\": \"02.10.2015\"},{\"appid\": 2015240,\"ordate\": \"16.12.2022\"},{\"appid\": 450700,\"ordate\": \"07.07.2016\"},{\"appid\": 1134700,\"ordate\": \"28.01.2021\"},{\"appid\": 1681060,\"ordate\": \"18.04.2023\"},{\"appid\": 1016800,\"ordate\": \"17.10.2019\"},{\"appid\": 1566220,\"ordate\": \"30.10.2021\"},{\"appid\": 531180,\"ordate\": \"13.10.2016\"},{\"appid\": 2350000,\"ordate\": \"07.05.2023\"},{\"appid\": 365810,\"ordate\": \"20.08.2015\"},{\"appid\": 2190170,\"ordate\": \"11.03.2023\"},{\"appid\": 1297790,\"ordate\": \"06.08.2020\"},{\"appid\": 573490,\"ordate\": \"16.08.2017\"},{\"appid\": 644290,\"ordate\": \"05.06.2018\"},{\"appid\": 419020,\"ordate\": \"20.12.2015\"},{\"appid\": 604240,\"ordate\": \"01.06.2017\"},{\"appid\": 332310,\"ordate\": \"01.06.2015\"},{\"appid\": 740080,\"ordate\": \"13.12.2017\"},{\"appid\": 1123500,\"ordate\": \"23.09.2019\"},{\"appid\": 1801370,\"ordate\": \"24.11.2021\"},{\"appid\": 1781580,\"ordate\": \"23.11.2021\"},{\"appid\": 1105670,\"ordate\": \"03.06.2021\"},{\"appid\": 1292040,\"ordate\": \"04.09.2020\"},{\"appid\": 2159120,\"ordate\": \"01.04.2023\"},{\"appid\": 1424290,\"ordate\": \"27.10.2022\"},{\"appid\": 828680,\"ordate\": \"15.12.2018\"},{\"appid\": 1110890,\"ordate\": \"07.09.2020\"},{\"appid\": 1492140,\"ordate\": \"21.11.2021\"},{\"appid\": 645200,\"ordate\": \"15.01.2021\"},{\"appid\": 1061240,\"ordate\": \"04.05.2019\"},{\"appid\": 622670,\"ordate\": \"26.08.2017\"},{\"appid\": 2016220,\"ordate\": \"30.07.2022\"},{\"appid\": 1672230,\"ordate\": \"16.08.2021\"},{\"appid\": 1937180,\"ordate\": \"23.11.2022\"},{\"appid\": 678910,\"ordate\": \"31.05.2019\"},{\"appid\": 2318480,\"ordate\": \"21.04.2023\"},{\"appid\": 1500940,\"ordate\": \"22.04.2022\"},{\"appid\": 1540960,\"ordate\": \"06.05.2021\"},{\"appid\": 2124930,\"ordate\": \"09.01.2023\"},{\"appid\": 1268420,\"ordate\": \"07.07.2022\"},{\"appid\": 2236490,\"ordate\": \"31.12.2022\"},{\"appid\": 200150,\"ordate\": \"17.03.2014\"},{\"appid\": 2113770,\"ordate\": \"23.11.2022\"},{\"appid\": 1972460,\"ordate\": \"23.11.2022\"},{\"appid\": 1687570,\"ordate\": \"24.03.2022\"},{\"appid\": 1684410,\"ordate\": \"01.04.2022\"},{\"appid\": 1635440,\"ordate\": \"04.06.2021\"},{\"appid\": 1612770,\"ordate\": \"28.07.2022\"},{\"appid\": 1254390,\"ordate\": \"25.03.2020\"},{\"appid\": 577380,\"ordate\": \"24.02.2017\"},{\"appid\": 1386650,\"ordate\": \"17.12.2020\"},{\"appid\": 1891560,\"ordate\": \"01.03.2022\"},{\"appid\": 979520,\"ordate\": \"21.12.2018\"},{\"appid\": 405240,\"ordate\": \"30.09.2015\"},{\"appid\": 1141600,\"ordate\": \"20.05.2020\"},{\"appid\": 1990060,\"ordate\": \"12.06.2022\"},{\"appid\": 246760,\"ordate\": \"09.10.2013\"},{\"appid\": 475960,\"ordate\": \"19.07.2016\"},{\"appid\": 1131930,\"ordate\": \"07.01.2020\"},{\"appid\": 1625230,\"ordate\": \"05.06.2021\"},{\"appid\": 886300,\"ordate\": \"01.08.2018\"},{\"appid\": 1884850,\"ordate\": \"19.03.2022\"},{\"appid\": 371520,\"ordate\": \"25.08.2015\"},{\"appid\": 1138440,\"ordate\": \"11.11.2020\"},{\"appid\": 870090,\"ordate\": \"22.06.2018\"},{\"appid\": 895620,\"ordate\": \"24.09.2019\"},{\"appid\": 1858900,\"ordate\": \"17.02.2023\"},{\"appid\": 1201230,\"ordate\": \"28.04.2022\"},{\"appid\": 1184530,\"ordate\": \"13.12.2019\"},{\"appid\": 961200,\"ordate\": \"30.11.2022\"},{\"appid\": 1923900,\"ordate\": \"18.10.2022\"},{\"appid\": 1750770,\"ordate\": \"14.12.2022\"},{\"appid\": 1672670,\"ordate\": \"01.09.2022\"},{\"appid\": 348670,\"ordate\": \"25.03.2015\"},{\"appid\": 1550280,\"ordate\": \"23.07.2021\"},{\"appid\": 628710,\"ordate\": \"06.06.2017\"},{\"appid\": 1042960,\"ordate\": \"22.04.2021\"},{\"appid\": 855740,\"ordate\": \"26.08.2021\"},{\"appid\": 552880,\"ordate\": \"01.06.2017\"},{\"appid\": 1045180,\"ordate\": \"05.06.2019\"},{\"appid\": 392610,\"ordate\": \"12.11.2015\"},{\"appid\": 1432860,\"ordate\": \"26.06.2021\"},{\"appid\": 886900,\"ordate\": \"06.12.2018\"},{\"appid\": 344740,\"ordate\": \"07.10.2015\"},{\"appid\": 1232100,\"ordate\": \"01.10.2020\"},{\"appid\": 409410,\"ordate\": \"02.03.2016\"},{\"appid\": 1897420,\"ordate\": \"23.04.2022\"},{\"appid\": 1395420,\"ordate\": \"07.09.2020\"},{\"appid\": 1487680,\"ordate\": \"24.05.2021\"},{\"appid\": 1960270,\"ordate\": \"31.08.2022\"},{\"appid\": 1922980,\"ordate\": \"10.03.2023\"},{\"appid\": 1741640,\"ordate\": \"01.11.2021\"},{\"appid\": 655780,\"ordate\": \"04.12.2017\"},{\"appid\": 2114090,\"ordate\": \"31.08.2022\"},{\"appid\": 1186650,\"ordate\": \"07.01.2020\"},{\"appid\": 1871840,\"ordate\": \"04.11.2022\"},{\"appid\": 1528470,\"ordate\": \"15.03.2021\"},{\"appid\": 876650,\"ordate\": \"08.08.2018\"},{\"appid\": 461410,\"ordate\": \"05.07.2016\"},{\"appid\": 1253920,\"ordate\": \"18.08.2020\"},{\"appid\": 341000,\"ordate\": \"05.01.2015\"},{\"appid\": 1413020,\"ordate\": \"08.10.2020\"},{\"appid\": 1979410,\"ordate\": \"23.05.2023\"},{\"appid\": 349250,\"ordate\": \"11.08.2016\"},{\"appid\": 430070,\"ordate\": \"31.08.2017\"},{\"appid\": 681640,\"ordate\": \"16.07.2020\"},{\"appid\": 1451190,\"ordate\": \"31.01.2023\"},{\"appid\": 1575590,\"ordate\": \"08.01.2022\"},{\"appid\": 1121200,\"ordate\": \"14.10.2021\"},{\"appid\": 1270850,\"ordate\": \"10.04.2020\"},{\"appid\": 572010,\"ordate\": \"28.01.2017\"},{\"appid\": 685340,\"ordate\": \"06.10.2017\"},{\"appid\": 679700,\"ordate\": \"02.03.2020\"},{\"appid\": 903710,\"ordate\": \"07.11.2018\"},{\"appid\": 530860,\"ordate\": \"23.05.2017\"},{\"appid\": 402940,\"ordate\": \"17.10.2017\"},{\"appid\": 1039350,\"ordate\": \"26.03.2019\"},{\"appid\": 227160,\"ordate\": \"21.03.2013\"},{\"appid\": 1712510,\"ordate\": \"25.02.2022\"},{\"appid\": 819630,\"ordate\": \"17.04.2018\"},{\"appid\": 468240,\"ordate\": \"31.05.2016\"},{\"appid\": 1818180,\"ordate\": \"06.01.2022\"},{\"appid\": 314590,\"ordate\": \"15.05.2015\"},{\"appid\": 1105960,\"ordate\": \"22.02.2021\"},{\"appid\": 1055610,\"ordate\": \"06.03.2020\"},{\"appid\": 1245430,\"ordate\": \"10.07.2020\"},{\"appid\": 1324350,\"ordate\": \"04.08.2022\"},{\"appid\": 1701340,\"ordate\": \"01.04.2023\"},{\"appid\": 551860,\"ordate\": \"21.02.2018\"},{\"appid\": 2220850,\"ordate\": \"27.12.2022\"},{\"appid\": 542770,\"ordate\": \"12.11.2016\"},{\"appid\": 1446930,\"ordate\": \"29.06.2021\"},{\"appid\": 847780,\"ordate\": \"14.08.2021\"},{\"appid\": 1612950,\"ordate\": \"23.06.2021\"},{\"appid\": 1510460,\"ordate\": \"16.04.2021\"},{\"appid\": 1179570,\"ordate\": \"22.04.2020\"},{\"appid\": 793830,\"ordate\": \"05.06.2020\"},{\"appid\": 433530,\"ordate\": \"15.02.2016\"},{\"appid\": 1322100,\"ordate\": \"17.03.2022\"},{\"appid\": 771530,\"ordate\": \"24.12.2018\"},{\"appid\": 769110,\"ordate\": \"03.01.2018\"},{\"appid\": 1347800,\"ordate\": \"20.06.2020\"},{\"appid\": 1228570,\"ordate\": \"13.03.2020\"},{\"appid\": 2186970,\"ordate\": \"03.11.2022\"},{\"appid\": 2150820,\"ordate\": \"28.10.2022\"},{\"appid\": 1487390,\"ordate\": \"02.12.2021\"},{\"appid\": 1889620,\"ordate\": \"03.03.2022\"},{\"appid\": 1466100,\"ordate\": \"13.01.2021\"},{\"appid\": 235800,\"ordate\": \"02.10.2013\"},{\"appid\": 1441430,\"ordate\": \"29.12.2020\"},{\"appid\": 2261610,\"ordate\": \"01.04.2023\"},{\"appid\": 444090,\"ordate\": \"15.09.2016\"},{\"appid\": 1362120,\"ordate\": \"02.12.2022\"},{\"appid\": 1296770,\"ordate\": \"19.06.2020\"},{\"appid\": 1383280,\"ordate\": \"23.02.2021\"},{\"appid\": 893420,\"ordate\": \"30.07.2019\"},{\"appid\": 976030,\"ordate\": \"23.04.2019\"},{\"appid\": 903790,\"ordate\": \"13.09.2018\"},{\"appid\": 1857020,\"ordate\": \"14.02.2022\"},{\"appid\": 324810,\"ordate\": \"22.01.2015\"},{\"appid\": 1477070,\"ordate\": \"20.12.2022\"},{\"appid\": 587920,\"ordate\": \"13.03.2017\"},{\"appid\": 1401560,\"ordate\": \"20.11.2020\"},{\"appid\": 1189290,\"ordate\": \"10.03.2023\"},{\"appid\": 331360,\"ordate\": \"31.01.2017\"},{\"appid\": 585420,\"ordate\": \"30.01.2018\"},{\"appid\": 417290,\"ordate\": \"25.07.2016\"},{\"appid\": 386200,\"ordate\": \"02.10.2015\"},{\"appid\": 957710,\"ordate\": \"16.06.2020\"},{\"appid\": 2343930,\"ordate\": \"16.06.2023\"},{\"appid\": 704970,\"ordate\": \"30.11.2019\"},{\"appid\": 467760,\"ordate\": \"19.07.2016\"},{\"appid\": 1156500,\"ordate\": \"04.05.2021\"},{\"appid\": 1699530,\"ordate\": \"31.12.2021\"},{\"appid\": 270110,\"ordate\": \"25.04.2014\"},{\"appid\": 1745510,\"ordate\": \"15.03.2022\"},{\"appid\": 1126110,\"ordate\": \"30.07.2021\"},{\"appid\": 1364210,\"ordate\": \"10.11.2022\"},{\"appid\": 2250690,\"ordate\": \"05.03.2023\"},{\"appid\": 1231970,\"ordate\": \"21.08.2020\"},{\"appid\": 2159500,\"ordate\": \"25.04.2023\"},{\"appid\": 511540,\"ordate\": \"14.07.2018\"},{\"appid\": 1256530,\"ordate\": \"05.06.2020\"},{\"appid\": 1693710,\"ordate\": \"01.04.2023\"},{\"appid\": 844390,\"ordate\": \"12.03.2022\"},{\"appid\": 1175870,\"ordate\": \"22.09.2021\"},{\"appid\": 1298620,\"ordate\": \"18.07.2022\"},{\"appid\": 830820,\"ordate\": \"11.12.2018\"},{\"appid\": 803760,\"ordate\": \"22.03.2018\"},{\"appid\": 926140,\"ordate\": \"20.09.2018\"},{\"appid\": 2286440,\"ordate\": \"30.06.2023\"},{\"appid\": 383840,\"ordate\": \"03.10.2018\"},{\"appid\": 583240,\"ordate\": \"15.03.2017\"},{\"appid\": 1429500,\"ordate\": \"15.12.2022\"},{\"appid\": 427940,\"ordate\": \"21.06.2021\"},{\"appid\": 2162780,\"ordate\": \"05.11.2022\"},{\"appid\": 1353920,\"ordate\": \"31.03.2022\"},{\"appid\": 1179110,\"ordate\": \"12.11.2019\"},{\"appid\": 1896170,\"ordate\": \"11.05.2022\"},{\"appid\": 1776170,\"ordate\": \"07.04.2022\"},{\"appid\": 2153430,\"ordate\": \"08.06.2023\"},{\"appid\": 704020,\"ordate\": \"16.10.2020\"},{\"appid\": 1342900,\"ordate\": \"29.10.2020\"},{\"appid\": 962730,\"ordate\": \"19.12.2018\"},{\"appid\": 1319550,\"ordate\": \"03.06.2021\"},{\"appid\": 860660,\"ordate\": \"19.07.2018\"},{\"appid\": 1493520,\"ordate\": \"14.11.2022\"},{\"appid\": 1093170,\"ordate\": \"28.01.2021\"},{\"appid\": 1402020,\"ordate\": \"17.05.2021\"},{\"appid\": 242860,\"ordate\": \"20.09.2013\"},{\"appid\": 474020,\"ordate\": \"17.09.2020\"},{\"appid\": 1487740,\"ordate\": \"06.01.2021\"},{\"appid\": 487000,\"ordate\": \"01.08.2017\"},{\"appid\": 446850,\"ordate\": \"05.12.2016\"},{\"appid\": 978650,\"ordate\": \"13.03.2019\"},{\"appid\": 1969650,\"ordate\": \"21.04.2023\"},{\"appid\": 1226510,\"ordate\": \"22.09.2020\"},{\"appid\": 1084220,\"ordate\": \"12.08.2020\"},{\"appid\": 878380,\"ordate\": \"10.09.2018\"},{\"appid\": 1395760,\"ordate\": \"26.08.2021\"},{\"appid\": 1833190,\"ordate\": \"21.12.2021\"},{\"appid\": 437220,\"ordate\": \"04.03.2016\"},{\"appid\": 1280930,\"ordate\": \"12.04.2022\"},{\"appid\": 1185620,\"ordate\": \"27.11.2019\"},{\"appid\": 1003860,\"ordate\": \"22.10.2020\"},{\"appid\": 758080,\"ordate\": \"24.08.2018\"},{\"appid\": 1133060,\"ordate\": \"05.11.2021\"},{\"appid\": 1937110,\"ordate\": \"07.09.2022\"},{\"appid\": 1506420,\"ordate\": \"17.01.2021\"},{\"appid\": 651120,\"ordate\": \"23.06.2017\"},{\"appid\": 763890,\"ordate\": \"13.11.2019\"},{\"appid\": 810500,\"ordate\": \"18.04.2019\"},{\"appid\": 1304090,\"ordate\": \"23.10.2020\"},{\"appid\": 2242370,\"ordate\": \"20.03.2023\"},{\"appid\": 517210,\"ordate\": \"06.01.2017\"},{\"appid\": 657000,\"ordate\": \"17.10.2019\"},{\"appid\": 1729900,\"ordate\": \"09.09.2021\"},{\"appid\": 1094960,\"ordate\": \"20.07.2020\"},{\"appid\": 908390,\"ordate\": \"20.06.2019\"},{\"appid\": 232090,\"ordate\": \"21.04.2015\"},{\"appid\": 1228320,\"ordate\": \"14.10.2022\"},{\"appid\": 519080,\"ordate\": \"08.11.2016\"},{\"appid\": 839500,\"ordate\": \"17.05.2018\"},{\"appid\": 1872860,\"ordate\": \"01.03.2022\"},{\"appid\": 377150,\"ordate\": \"25.06.2015\"},{\"appid\": 1036740,\"ordate\": \"25.08.2021\"},{\"appid\": 1543270,\"ordate\": \"19.03.2021\"},{\"appid\": 1794470,\"ordate\": \"04.11.2021\"},{\"appid\": 988310,\"ordate\": \"23.07.2019\"},{\"appid\": 296010,\"ordate\": \"28.07.2014\"},{\"appid\": 826740,\"ordate\": \"24.10.2019\"},{\"appid\": 657170,\"ordate\": \"06.09.2019\"},{\"appid\": 499660,\"ordate\": \"09.06.2017\"},{\"appid\": 1009560,\"ordate\": \"26.03.2021\"},{\"appid\": 1092630,\"ordate\": \"14.08.2019\"},{\"appid\": 1355620,\"ordate\": \"25.08.2020\"},{\"appid\": 1677090,\"ordate\": \"08.11.2022\"},{\"appid\": 1074280,\"ordate\": \"19.07.2023\"},{\"appid\": 2239870,\"ordate\": \"14.04.2023\"},{\"appid\": 1682380,\"ordate\": \"21.01.2022\"},{\"appid\": 525640,\"ordate\": \"08.09.2016\"},{\"appid\": 1393420,\"ordate\": \"07.11.2020\"},{\"appid\": 1374170,\"ordate\": \"04.08.2022\"},{\"appid\": 1485690,\"ordate\": \"13.03.2023\"},{\"appid\": 612930,\"ordate\": \"04.09.2017\"},{\"appid\": 2483930,\"ordate\": \"20.07.2023\"},{\"appid\": 1640890,\"ordate\": \"14.03.2023\"},{\"appid\": 1046140,\"ordate\": \"30.05.2019\"},{\"appid\": 406760,\"ordate\": \"01.12.2015\"},{\"appid\": 246900,\"ordate\": \"04.04.2014\"},{\"appid\": 2060750,\"ordate\": \"02.03.2023\"},{\"appid\": 299340,\"ordate\": \"08.07.2014\"},{\"appid\": 510740,\"ordate\": \"05.08.2016\"},{\"appid\": 2254750,\"ordate\": \"31.01.2023\"},{\"appid\": 1694740,\"ordate\": \"22.09.2021\"},{\"appid\": 1192380,\"ordate\": \"19.12.2019\"},{\"appid\": 2126600,\"ordate\": \"26.11.2022\"},{\"appid\": 667550,\"ordate\": \"01.07.2017\"},{\"appid\": 1293530,\"ordate\": \"02.06.2020\"},{\"appid\": 433340,\"ordate\": \"14.01.2016\"},{\"appid\": 1512450,\"ordate\": \"25.01.2021\"},{\"appid\": 1906570,\"ordate\": \"01.02.2023\"},{\"appid\": 957790,\"ordate\": \"20.10.2018\"},{\"appid\": 1482750,\"ordate\": \"21.07.2021\"},{\"appid\": 2484430,\"ordate\": \"12.07.2023\"},{\"appid\": 788020,\"ordate\": \"16.06.2018\"},{\"appid\": 573370,\"ordate\": \"03.02.2017\"},{\"appid\": 2279430,\"ordate\": \"14.02.2023\"},{\"appid\": 1266840,\"ordate\": \"01.05.2020\"},{\"appid\": 1734280,\"ordate\": \"13.01.2022\"},{\"appid\": 1313970,\"ordate\": \"03.06.2020\"},{\"appid\": 839040,\"ordate\": \"21.07.2018\"},{\"appid\": 496540,\"ordate\": \"08.01.2017\"},{\"appid\": 1943740,\"ordate\": \"13.05.2022\"},{\"appid\": 338820,\"ordate\": \"11.05.2022\"},{\"appid\": 1275210,\"ordate\": \"22.04.2020\"},{\"appid\": 699330,\"ordate\": \"19.04.2022\"},{\"appid\": 1056330,\"ordate\": \"29.08.2019\"},{\"appid\": 1217060,\"ordate\": \"05.05.2020\"},{\"appid\": 274190,\"ordate\": \"03.04.2014\"},{\"appid\": 1924460,\"ordate\": \"15.11.2022\"},{\"appid\": 2250780,\"ordate\": \"04.05.2023\"},{\"appid\": 1000880,\"ordate\": \"01.03.2019\"},{\"appid\": 1239300,\"ordate\": \"20.10.2021\"},{\"appid\": 1665170,\"ordate\": \"03.08.2022\"},{\"appid\": 877010,\"ordate\": \"21.09.2021\"},{\"appid\": 495600,\"ordate\": \"29.09.2018\"},{\"appid\": 1492070,\"ordate\": \"06.10.2022\"},{\"appid\": 1315980,\"ordate\": \"30.10.2020\"},{\"appid\": 269990,\"ordate\": \"18.04.2014\"},{\"appid\": 458520,\"ordate\": \"21.09.2016\"},{\"appid\": 350600,\"ordate\": \"04.06.2015\"},{\"appid\": 1446950,\"ordate\": \"27.01.2023\"},{\"appid\": 725100,\"ordate\": \"22.07.2020\"},{\"appid\": 1101420,\"ordate\": \"10.07.2019\"},{\"appid\": 314240,\"ordate\": \"04.08.2014\"},{\"appid\": 2109060,\"ordate\": \"29.05.2023\"},{\"appid\": 1768880,\"ordate\": \"28.01.2022\"},{\"appid\": 1177380,\"ordate\": \"22.03.2021\"},{\"appid\": 985650,\"ordate\": \"24.01.2020\"},{\"appid\": 523740,\"ordate\": \"24.03.2017\"},{\"appid\": 1840330,\"ordate\": \"07.02.2022\"},{\"appid\": 682530,\"ordate\": \"26.09.2017\"},{\"appid\": 418650,\"ordate\": \"05.04.2016\"},{\"appid\": 722660,\"ordate\": \"13.04.2018\"},{\"appid\": 1507110,\"ordate\": \"17.07.2021\"},{\"appid\": 1301410,\"ordate\": \"09.06.2020\"},{\"appid\": 2182500,\"ordate\": \"16.01.2023\"},{\"appid\": 644930,\"ordate\": \"12.12.2017\"},{\"appid\": 383980,\"ordate\": \"22.09.2015\"},{\"appid\": 338170,\"ordate\": \"21.01.2015\"},{\"appid\": 509570,\"ordate\": \"12.08.2016\"},{\"appid\": 1616520,\"ordate\": \"28.05.2021\"},{\"appid\": 1140460,\"ordate\": \"02.07.2020\"},{\"appid\": 496790,\"ordate\": \"22.11.2016\"},{\"appid\": 476700,\"ordate\": \"23.08.2016\"},{\"appid\": 2314650,\"ordate\": \"19.05.2023\"},{\"appid\": 1329880,\"ordate\": \"16.02.2023\"},{\"appid\": 1916310,\"ordate\": \"19.07.2022\"},{\"appid\": 539400,\"ordate\": \"10.11.2016\"},{\"appid\": 986070,\"ordate\": \"02.06.2020\"},{\"appid\": 1554970,\"ordate\": \"01.09.2021\"},{\"appid\": 1772530,\"ordate\": \"17.03.2023\"},{\"appid\": 1440010,\"ordate\": \"11.02.2022\"},{\"appid\": 594650,\"ordate\": \"22.02.2018\"},{\"appid\": 1443170,\"ordate\": \"25.11.2020\"},{\"appid\": 618850,\"ordate\": \"31.07.2019\"},{\"appid\": 575850,\"ordate\": \"30.06.2017\"},{\"appid\": 1234240,\"ordate\": \"15.10.2020\"},{\"appid\": 434030,\"ordate\": \"19.05.2016\"},{\"appid\": 1099790,\"ordate\": \"24.02.2023\"},{\"appid\": 1681510,\"ordate\": \"19.07.2021\"},{\"appid\": 826180,\"ordate\": \"24.05.2018\"},{\"appid\": 380860,\"ordate\": \"18.07.2015\"},{\"appid\": 2006140,\"ordate\": \"04.10.2022\"},{\"appid\": 1261300,\"ordate\": \"10.07.2020\"},{\"appid\": 1727020,\"ordate\": \"21.01.2022\"},{\"appid\": 2150950,\"ordate\": \"25.10.2022\"},{\"appid\": 1101580,\"ordate\": \"22.12.2020\"},{\"appid\": 338640,\"ordate\": \"08.03.2017\"},{\"appid\": 504610,\"ordate\": \"12.06.2017\"},{\"appid\": 314010,\"ordate\": \"08.01.2015\"},{\"appid\": 1874880,\"ordate\": \"17.05.2022\"},{\"appid\": 1913980,\"ordate\": \"12.03.2022\"},{\"appid\": 1990850,\"ordate\": \"04.06.2022\"},{\"appid\": 735060,\"ordate\": \"07.02.2018\"},{\"appid\": 1063930,\"ordate\": \"16.07.2019\"},{\"appid\": 1575750,\"ordate\": \"29.09.2022\"},{\"appid\": 1051840,\"ordate\": \"18.04.2019\"},{\"appid\": 249950,\"ordate\": \"22.11.2013\"},{\"appid\": 676830,\"ordate\": \"25.10.2017\"},{\"appid\": 1208590,\"ordate\": \"18.08.2021\"},{\"appid\": 1119110,\"ordate\": \"05.08.2019\"},{\"appid\": 1910860,\"ordate\": \"22.06.2023\"},{\"appid\": 693750,\"ordate\": \"29.09.2017\"},{\"appid\": 1116880,\"ordate\": \"14.10.2020\"},{\"appid\": 1400910,\"ordate\": \"11.10.2021\"},{\"appid\": 489380,\"ordate\": \"20.12.2016\"},{\"appid\": 2132530,\"ordate\": \"17.02.2023\"},{\"appid\": 1963360,\"ordate\": \"16.10.2022\"},{\"appid\": 884660,\"ordate\": \"16.06.2018\"},{\"appid\": 2002220,\"ordate\": \"03.05.2023\"},{\"appid\": 1552220,\"ordate\": \"28.09.2022\"},{\"appid\": 1379870,\"ordate\": \"24.02.2021\"},{\"appid\": 1979570,\"ordate\": \"30.03.2023\"},{\"appid\": 1604710,\"ordate\": \"25.08.2021\"},{\"appid\": 585710,\"ordate\": \"15.11.2017\"},{\"appid\": 1455070,\"ordate\": \"19.05.2022\"},{\"appid\": 2074490,\"ordate\": \"18.07.2022\"},{\"appid\": 585190,\"ordate\": \"10.04.2017\"},{\"appid\": 524250,\"ordate\": \"23.02.2017\"},{\"appid\": 679490,\"ordate\": \"02.01.2019\"},{\"appid\": 1187870,\"ordate\": \"24.11.2021\"},{\"appid\": 252470,\"ordate\": \"17.05.2016\"},{\"appid\": 1315660,\"ordate\": \"14.09.2020\"},{\"appid\": 872680,\"ordate\": \"15.06.2018\"},{\"appid\": 1058800,\"ordate\": \"13.05.2020\"},{\"appid\": 340030,\"ordate\": \"02.01.2015\"},{\"appid\": 2071280,\"ordate\": \"06.04.2023\"},{\"appid\": 1167630,\"ordate\": \"29.10.2020\"},{\"appid\": 1314000,\"ordate\": \"12.05.2022\"},{\"appid\": 601540,\"ordate\": \"28.04.2017\"},{\"appid\": 1171120,\"ordate\": \"24.04.2020\"},{\"appid\": 762980,\"ordate\": \"29.05.2018\"},{\"appid\": 913710,\"ordate\": \"23.08.2018\"},{\"appid\": 296300,\"ordate\": \"08.10.2015\"},{\"appid\": 1158980,\"ordate\": \"14.05.2020\"},{\"appid\": 1843050,\"ordate\": \"15.12.2022\"},{\"appid\": 294000,\"ordate\": \"29.05.2014\"},{\"appid\": 923370,\"ordate\": \"08.09.2018\"},{\"appid\": 808160,\"ordate\": \"14.08.2018\"},{\"appid\": 1462830,\"ordate\": \"08.10.2021\"},{\"appid\": 1707310,\"ordate\": \"26.08.2021\"},{\"appid\": 1184090,\"ordate\": \"16.11.2019\"},{\"appid\": 422030,\"ordate\": \"04.12.2015\"},{\"appid\": 262630,\"ordate\": \"09.02.2015\"},{\"appid\": 436560,\"ordate\": \"31.05.2016\"},{\"appid\": 1491780,\"ordate\": \"27.04.2021\"},{\"appid\": 652770,\"ordate\": \"27.09.2022\"},{\"appid\": 552630,\"ordate\": \"15.11.2016\"},{\"appid\": 1090100,\"ordate\": \"07.02.2023\"},{\"appid\": 562860,\"ordate\": \"28.02.2018\"},{\"appid\": 1584320,\"ordate\": \"24.06.2021\"},{\"appid\": 1367960,\"ordate\": \"29.07.2020\"},{\"appid\": 1083350,\"ordate\": \"08.05.2020\"},{\"appid\": 2248760,\"ordate\": \"18.05.2023\"},{\"appid\": 1889640,\"ordate\": \"31.03.2022\"},{\"appid\": 1851790,\"ordate\": \"08.01.2022\"},{\"appid\": 359840,\"ordate\": \"09.09.2015\"},{\"appid\": 1070860,\"ordate\": \"11.03.2020\"},{\"appid\": 428080,\"ordate\": \"31.01.2017\"},{\"appid\": 599180,\"ordate\": \"16.03.2017\"},{\"appid\": 1100300,\"ordate\": \"10.04.2020\"},{\"appid\": 879000,\"ordate\": \"13.03.2020\"},{\"appid\": 407530,\"ordate\": \"16.03.2016\"},{\"appid\": 726360,\"ordate\": \"08.12.2018\"},{\"appid\": 1116600,\"ordate\": \"25.07.2019\"},{\"appid\": 361040,\"ordate\": \"04.06.2015\"},{\"appid\": 1759130,\"ordate\": \"29.03.2022\"},{\"appid\": 1012530,\"ordate\": \"23.02.2019\"},{\"appid\": 1334730,\"ordate\": \"14.08.2021\"},{\"appid\": 1918880,\"ordate\": \"30.04.2022\"},{\"appid\": 1380850,\"ordate\": \"12.08.2020\"},{\"appid\": 1489970,\"ordate\": \"24.03.2022\"},{\"appid\": 230310,\"ordate\": \"16.06.2013\"},{\"appid\": 764050,\"ordate\": \"11.04.2018\"},{\"appid\": 2424230,\"ordate\": \"31.05.2023\"},{\"appid\": 1016600,\"ordate\": \"12.11.2019\"},{\"appid\": 2350020,\"ordate\": \"20.04.2023\"},{\"appid\": 837400,\"ordate\": \"28.05.2018\"},{\"appid\": 1084600,\"ordate\": \"26.05.2022\"},{\"appid\": 1750740,\"ordate\": \"01.04.2022\"},{\"appid\": 1728840,\"ordate\": \"27.09.2022\"},{\"appid\": 748370,\"ordate\": \"09.12.2017\"},{\"appid\": 1489140,\"ordate\": \"18.04.2023\"},{\"appid\": 944920,\"ordate\": \"23.10.2019\"},{\"appid\": 2079710,\"ordate\": \"11.08.2022\"},{\"appid\": 1464010,\"ordate\": \"28.10.2021\"},{\"appid\": 577470,\"ordate\": \"28.04.2018\"},{\"appid\": 1407000,\"ordate\": \"12.05.2022\"},{\"appid\": 799500,\"ordate\": \"19.02.2018\"},{\"appid\": 2053050,\"ordate\": \"28.06.2022\"},{\"appid\": 1344530,\"ordate\": \"15.07.2020\"},{\"appid\": 1066180,\"ordate\": \"08.06.2020\"},{\"appid\": 986130,\"ordate\": \"24.04.2023\"},{\"appid\": 611190,\"ordate\": \"07.09.2021\"},{\"appid\": 596970,\"ordate\": \"30.08.2017\"},{\"appid\": 383230,\"ordate\": \"02.07.2015\"},{\"appid\": 2091720,\"ordate\": \"11.11.2022\"},{\"appid\": 777430,\"ordate\": \"15.03.2018\"},{\"appid\": 310370,\"ordate\": \"30.12.2014\"},{\"appid\": 594130,\"ordate\": \"21.03.2018\"},{\"appid\": 537340,\"ordate\": \"16.02.2017\"},{\"appid\": 2390520,\"ordate\": \"22.05.2023\"},{\"appid\": 1104330,\"ordate\": \"19.07.2019\"},{\"appid\": 1125390,\"ordate\": \"10.08.2021\"},{\"appid\": 931320,\"ordate\": \"09.04.2020\"},{\"appid\": 666820,\"ordate\": \"20.10.2017\"},{\"appid\": 2268160,\"ordate\": \"01.02.2023\"},{\"appid\": 1244910,\"ordate\": \"22.07.2023\"},{\"appid\": 1427620,\"ordate\": \"19.11.2020\"},{\"appid\": 1059980,\"ordate\": \"21.07.2022\"},{\"appid\": 440660,\"ordate\": \"06.11.2016\"},{\"appid\": 2425360,\"ordate\": \"30.08.2023\"},{\"appid\": 1466950,\"ordate\": \"29.01.2021\"},{\"appid\": 1666520,\"ordate\": \"22.07.2021\"},{\"appid\": 2158270,\"ordate\": \"14.11.2022\"},{\"appid\": 2369320,\"ordate\": \"06.04.2023\"},{\"appid\": 1587540,\"ordate\": \"21.06.2022\"},{\"appid\": 743380,\"ordate\": \"06.04.2022\"},{\"appid\": 2102530,\"ordate\": \"09.09.2022\"},{\"appid\": 1268750,\"ordate\": \"17.05.2023\"},{\"appid\": 656240,\"ordate\": \"31.01.2019\"},{\"appid\": 1510280,\"ordate\": \"19.01.2021\"},{\"appid\": 290180,\"ordate\": \"12.11.2019\"},{\"appid\": 590840,\"ordate\": \"26.01.2019\"},{\"appid\": 587520,\"ordate\": \"18.07.2022\"},{\"appid\": 1947530,\"ordate\": \"03.05.2022\"},{\"appid\": 2011650,\"ordate\": \"09.06.2022\"},{\"appid\": 875480,\"ordate\": \"27.09.2018\"},{\"appid\": 1228910,\"ordate\": \"10.03.2020\"},{\"appid\": 541930,\"ordate\": \"16.05.2019\"},{\"appid\": 588560,\"ordate\": \"20.04.2017\"},{\"appid\": 997010,\"ordate\": \"17.06.2021\"},{\"appid\": 1691000,\"ordate\": \"12.01.2022\"},{\"appid\": 2181720,\"ordate\": \"01.11.2022\"},{\"appid\": 1491340,\"ordate\": \"07.05.2021\"},{\"appid\": 731250,\"ordate\": \"29.07.2019\"},{\"appid\": 539320,\"ordate\": \"07.11.2020\"},{\"appid\": 226100,\"ordate\": \"13.03.2014\"},{\"appid\": 1126310,\"ordate\": \"23.05.2020\"},{\"appid\": 1671480,\"ordate\": \"14.04.2022\"},{\"appid\": 488760,\"ordate\": \"20.06.2016\"},{\"appid\": 1661500,\"ordate\": \"18.11.2021\"},{\"appid\": 1591630,\"ordate\": \"03.05.2021\"},{\"appid\": 1731880,\"ordate\": \"13.09.2021\"},{\"appid\": 1289750,\"ordate\": \"24.08.2020\"},{\"appid\": 2229050,\"ordate\": \"17.12.2022\"},{\"appid\": 1419070,\"ordate\": \"21.12.2020\"},{\"appid\": 1227690,\"ordate\": \"28.04.2020\"},{\"appid\": 1290780,\"ordate\": \"20.04.2020\"},{\"appid\": 1064010,\"ordate\": \"13.05.2019\"},{\"appid\": 1012850,\"ordate\": \"25.08.2020\"},{\"appid\": 2135030,\"ordate\": \"18.09.2022\"},{\"appid\": 1608470,\"ordate\": \"19.04.2022\"},{\"appid\": 1562700,\"ordate\": \"21.06.2022\"},{\"appid\": 668840,\"ordate\": \"01.08.2017\"},{\"appid\": 1712120,\"ordate\": \"12.01.2022\"},{\"appid\": 1605220,\"ordate\": \"26.04.2022\"},{\"appid\": 1305310,\"ordate\": \"01.06.2020\"},{\"appid\": 718650,\"ordate\": \"29.11.2017\"},{\"appid\": 355010,\"ordate\": \"17.11.2015\"},{\"appid\": 1352470,\"ordate\": \"18.09.2020\"},{\"appid\": 1183480,\"ordate\": \"11.12.2019\"},{\"appid\": 891850,\"ordate\": \"22.11.2018\"},{\"appid\": 802480,\"ordate\": \"28.05.2018\"},{\"appid\": 1144910,\"ordate\": \"22.10.2019\"},{\"appid\": 1024460,\"ordate\": \"02.04.2020\"},{\"appid\": 1592360,\"ordate\": \"02.09.2022\"},{\"appid\": 1694560,\"ordate\": \"15.09.2021\"},{\"appid\": 339590,\"ordate\": \"16.01.2016\"},{\"appid\": 669330,\"ordate\": \"11.05.2023\"},{\"appid\": 1885690,\"ordate\": \"20.05.2022\"},{\"appid\": 464360,\"ordate\": \"28.04.2016\"},{\"appid\": 2409780,\"ordate\": \"06.06.2023\"},{\"appid\": 1096140,\"ordate\": \"12.10.2022\"},{\"appid\": 930110,\"ordate\": \"28.09.2018\"},{\"appid\": 2211260,\"ordate\": \"14.06.2023\"},{\"appid\": 706020,\"ordate\": \"14.12.2017\"},{\"appid\": 2548830,\"ordate\": \"04.09.2023\"},{\"appid\": 1572320,\"ordate\": \"13.08.2021\"},{\"appid\": 1735670,\"ordate\": \"03.04.2022\"},{\"appid\": 632360,\"ordate\": \"28.03.2019\"},{\"appid\": 2306080,\"ordate\": \"10.03.2023\"},{\"appid\": 772230,\"ordate\": \"22.06.2018\"},{\"appid\": 945140,\"ordate\": \"17.01.2019\"},{\"appid\": 1658880,\"ordate\": \"05.08.2021\"},{\"appid\": 1902880,\"ordate\": \"27.03.2022\"},{\"appid\": 1834290,\"ordate\": \"15.12.2021\"},{\"appid\": 1146420,\"ordate\": \"09.03.2023\"},{\"appid\": 1118410,\"ordate\": \"12.02.2020\"},{\"appid\": 2068280,\"ordate\": \"15.12.2022\"},{\"appid\": 946210,\"ordate\": \"09.10.2018\"},{\"appid\": 264140,\"ordate\": \"12.12.2013\"},{\"appid\": 1450790,\"ordate\": \"01.03.2021\"},{\"appid\": 1527950,\"ordate\": \"01.12.2021\"},{\"appid\": 517220,\"ordate\": \"29.09.2016\"},{\"appid\": 1062960,\"ordate\": \"18.05.2019\"},{\"appid\": 617680,\"ordate\": \"08.04.2017\"},{\"appid\": 1709900,\"ordate\": \"28.09.2021\"},{\"appid\": 2317540,\"ordate\": \"06.03.2023\"},{\"appid\": 724300,\"ordate\": \"08.06.2018\"},{\"appid\": 1003450,\"ordate\": \"21.03.2019\"},{\"appid\": 1649630,\"ordate\": \"10.01.2022\"},{\"appid\": 1822640,\"ordate\": \"28.01.2022\"},{\"appid\": 1220140,\"ordate\": \"18.03.2021\"},{\"appid\": 1985420,\"ordate\": \"09.12.2022\"},{\"appid\": 746930,\"ordate\": \"15.12.2017\"},{\"appid\": 1385380,\"ordate\": \"08.04.2021\"},{\"appid\": 252390,\"ordate\": \"26.09.2017\"},{\"appid\": 787050,\"ordate\": \"08.04.2018\"},{\"appid\": 982250,\"ordate\": \"24.04.2020\"},{\"appid\": 322330,\"ordate\": \"15.12.2014\"},{\"appid\": 445950,\"ordate\": \"03.11.2016\"},{\"appid\": 2138580,\"ordate\": \"01.10.2022\"},{\"appid\": 1415220,\"ordate\": \"16.06.2023\"},{\"appid\": 1985960,\"ordate\": \"24.03.2023\"},{\"appid\": 1345320,\"ordate\": \"08.10.2021\"},{\"appid\": 1442840,\"ordate\": \"01.11.2021\"},{\"appid\": 887970,\"ordate\": \"06.10.2018\"},{\"appid\": 2327600,\"ordate\": \"04.04.2023\"},{\"appid\": 746560,\"ordate\": \"23.04.2019\"},{\"appid\": 720090,\"ordate\": \"30.03.2021\"},{\"appid\": 2538580,\"ordate\": \"29.09.2023\"},{\"appid\": 1599000,\"ordate\": \"26.10.2021\"},{\"appid\": 775940,\"ordate\": \"24.01.2018\"},{\"appid\": 1363210,\"ordate\": \"23.06.2021\"},{\"appid\": 1399170,\"ordate\": \"16.02.2022\"},{\"appid\": 2421880,\"ordate\": \"29.06.2023\"},{\"appid\": 364300,\"ordate\": \"14.05.2015\"},{\"appid\": 1409760,\"ordate\": \"20.07.2022\"},{\"appid\": 1575520,\"ordate\": \"03.12.2021\"},{\"appid\": 845890,\"ordate\": \"29.09.2022\"},{\"appid\": 1714270,\"ordate\": \"06.10.2021\"},{\"appid\": 1139940,\"ordate\": \"11.05.2020\"},{\"appid\": 1062830,\"ordate\": \"21.05.2020\"},{\"appid\": 1383370,\"ordate\": \"15.05.2023\"},{\"appid\": 924070,\"ordate\": \"07.05.2020\"},{\"appid\": 466860,\"ordate\": \"07.03.2017\"},{\"appid\": 2539840,\"ordate\": \"21.08.2023\"},{\"appid\": 491070,\"ordate\": \"29.07.2016\"},{\"appid\": 2319390,\"ordate\": \"02.06.2023\"},{\"appid\": 760050,\"ordate\": \"08.02.2018\"},{\"appid\": 1741040,\"ordate\": \"11.11.2021\"},{\"appid\": 2190180,\"ordate\": \"23.12.2022\"},{\"appid\": 2218750,\"ordate\": \"24.05.2023\"},{\"appid\": 477910,\"ordate\": \"27.05.2016\"},{\"appid\": 511370,\"ordate\": \"18.08.2016\"},{\"appid\": 263720,\"ordate\": \"20.04.2017\"},{\"appid\": 265750,\"ordate\": \"13.06.2014\"},{\"appid\": 871940,\"ordate\": \"25.02.2021\"},{\"appid\": 726110,\"ordate\": \"06.06.2019\"},{\"appid\": 1430180,\"ordate\": \"15.03.2021\"},{\"appid\": 934580,\"ordate\": \"31.01.2019\"},{\"appid\": 1140030,\"ordate\": \"29.11.2019\"},{\"appid\": 1220510,\"ordate\": \"24.01.2020\"},{\"appid\": 2491620,\"ordate\": \"16.10.2023\"},{\"appid\": 788100,\"ordate\": \"16.03.2019\"},{\"appid\": 1714100,\"ordate\": \"02.09.2021\"},{\"appid\": 589110,\"ordate\": \"13.03.2017\"},{\"appid\": 2075820,\"ordate\": \"21.07.2022\"},{\"appid\": 1900230,\"ordate\": \"01.04.2022\"},{\"appid\": 1810310,\"ordate\": \"22.11.2021\"},{\"appid\": 453690,\"ordate\": \"07.11.2016\"},{\"appid\": 420910,\"ordate\": \"03.12.2015\"},{\"appid\": 1860490,\"ordate\": \"05.10.2023\"},{\"appid\": 2146490,\"ordate\": \"08.08.2023\"},{\"appid\": 1140130,\"ordate\": \"24.10.2019\"},{\"appid\": 1948430,\"ordate\": \"01.07.2022\"},{\"appid\": 640800,\"ordate\": \"10.11.2017\"},{\"appid\": 1416220,\"ordate\": \"29.10.2020\"},{\"appid\": 946700,\"ordate\": \"22.10.2018\"},{\"appid\": 877610,\"ordate\": \"20.05.2020\"},{\"appid\": 1196030,\"ordate\": \"10.11.2020\"},{\"appid\": 1153100,\"ordate\": \"20.11.2019\"},{\"appid\": 899090,\"ordate\": \"05.08.2018\"},{\"appid\": 2289920,\"ordate\": \"01.03.2023\"},{\"appid\": 1184820,\"ordate\": \"20.07.2021\"},{\"appid\": 889150,\"ordate\": \"25.01.2019\"},{\"appid\": 1444950,\"ordate\": \"25.10.2020\"},{\"appid\": 1350840,\"ordate\": \"07.04.2023\"},{\"appid\": 824000,\"ordate\": \"02.06.2021\"},{\"appid\": 574080,\"ordate\": \"22.02.2017\"},{\"appid\": 1036700,\"ordate\": \"19.06.2020\"},{\"appid\": 1303870,\"ordate\": \"30.07.2020\"},{\"appid\": 1618050,\"ordate\": \"21.05.2021\"},{\"appid\": 792390,\"ordate\": \"21.01.2019\"},{\"appid\": 317530,\"ordate\": \"27.11.2014\"},{\"appid\": 512000,\"ordate\": \"12.11.2016\"},{\"appid\": 402220,\"ordate\": \"29.09.2015\"},{\"appid\": 615020,\"ordate\": \"30.06.2017\"},{\"appid\": 1257280,\"ordate\": \"14.11.2022\"},{\"appid\": 644370,\"ordate\": \"09.06.2017\"},{\"appid\": 568220,\"ordate\": \"16.12.2016\"},{\"appid\": 2054060,\"ordate\": \"30.08.2022\"},{\"appid\": 2254830,\"ordate\": \"31.01.2023\"},{\"appid\": 2467840,\"ordate\": \"25.07.2023\"},{\"appid\": 942020,\"ordate\": \"10.10.2018\"},{\"appid\": 1292020,\"ordate\": \"14.05.2020\"},{\"appid\": 1457320,\"ordate\": \"18.07.2023\"},{\"appid\": 976700,\"ordate\": \"21.11.2019\"},{\"appid\": 276730,\"ordate\": \"04.06.2014\"},{\"appid\": 1203960,\"ordate\": \"05.07.2020\"},{\"appid\": 727850,\"ordate\": \"11.10.2018\"},{\"appid\": 489940,\"ordate\": \"01.02.2018\"},{\"appid\": 638000,\"ordate\": \"04.10.2017\"},{\"appid\": 441790,\"ordate\": \"26.04.2016\"},{\"appid\": 1328350,\"ordate\": \"22.04.2022\"},{\"appid\": 2357950,\"ordate\": \"29.08.2023\"},{\"appid\": 504560,\"ordate\": \"12.10.2016\"},{\"appid\": 1449070,\"ordate\": \"10.03.2022\"},{\"appid\": 586170,\"ordate\": \"25.02.2017\"},{\"appid\": 1358090,\"ordate\": \"15.07.2020\"},{\"appid\": 1347760,\"ordate\": \"28.10.2022\"},{\"appid\": 1145570,\"ordate\": \"05.09.2019\"},{\"appid\": 1092140,\"ordate\": \"29.12.2019\"},{\"appid\": 330770,\"ordate\": \"11.12.2014\"},{\"appid\": 2283490,\"ordate\": \"04.02.2023\"},{\"appid\": 866450,\"ordate\": \"07.08.2018\"},{\"appid\": 2276230,\"ordate\": \"22.03.2023\"},{\"appid\": 358130,\"ordate\": \"19.05.2015\"},{\"appid\": 797410,\"ordate\": \"24.07.2018\"},{\"appid\": 293460,\"ordate\": \"10.05.2014\"},{\"appid\": 2322320,\"ordate\": \"01.05.2023\"},{\"appid\": 1403400,\"ordate\": \"14.12.2022\"},{\"appid\": 1883840,\"ordate\": \"12.01.2023\"},{\"appid\": 279900,\"ordate\": \"17.11.2014\"},{\"appid\": 1300700,\"ordate\": \"10.07.2020\"},{\"appid\": 976930,\"ordate\": \"29.10.2020\"},{\"appid\": 2116970,\"ordate\": \"31.01.2023\"},{\"appid\": 690510,\"ordate\": \"06.12.2017\"},{\"appid\": 1832370,\"ordate\": \"10.12.2021\"},{\"appid\": 1828940,\"ordate\": \"09.12.2021\"},{\"appid\": 1145380,\"ordate\": \"17.01.2020\"},{\"appid\": 1193430,\"ordate\": \"27.02.2020\"},{\"appid\": 806230,\"ordate\": \"07.03.2018\"},{\"appid\": 2290000,\"ordate\": \"05.04.2023\"},{\"appid\": 2298950,\"ordate\": \"26.08.2023\"},{\"appid\": 820610,\"ordate\": \"27.04.2018\"},{\"appid\": 809140,\"ordate\": \"26.04.2018\"},{\"appid\": 1081670,\"ordate\": \"18.10.2019\"},{\"appid\": 1601740,\"ordate\": \"15.02.2023\"},{\"appid\": 814370,\"ordate\": \"28.08.2019\"},{\"appid\": 288140,\"ordate\": \"22.01.2015\"},{\"appid\": 2493950,\"ordate\": \"18.09.2023\"},{\"appid\": 455770,\"ordate\": \"01.04.2016\"},{\"appid\": 1314770,\"ordate\": \"07.01.2022\"},{\"appid\": 1183580,\"ordate\": \"04.02.2020\"},{\"appid\": 673130,\"ordate\": \"12.03.2018\"},{\"appid\": 1717020,\"ordate\": \"04.04.2022\"},{\"appid\": 756560,\"ordate\": \"13.01.2018\"},{\"appid\": 1620540,\"ordate\": \"07.07.2021\"},{\"appid\": 1151250,\"ordate\": \"21.07.2020\"},{\"appid\": 602240,\"ordate\": \"13.05.2021\"},{\"appid\": 1049840,\"ordate\": \"27.03.2019\"},{\"appid\": 1410710,\"ordate\": \"07.10.2020\"},{\"appid\": 1658040,\"ordate\": \"08.08.2023\"},{\"appid\": 957390,\"ordate\": \"16.11.2018\"},{\"appid\": 440900,\"ordate\": \"31.01.2017\"},{\"appid\": 346460,\"ordate\": \"21.10.2015\"},{\"appid\": 407710,\"ordate\": \"09.10.2015\"},{\"appid\": 1080010,\"ordate\": \"21.07.2020\"},{\"appid\": 1590160,\"ordate\": \"15.02.2022\"},{\"appid\": 882620,\"ordate\": \"09.11.2018\"},{\"appid\": 2206270,\"ordate\": \"26.07.2023\"},{\"appid\": 585020,\"ordate\": \"05.03.2021\"},{\"appid\": 586920,\"ordate\": \"27.05.2017\"},{\"appid\": 2144460,\"ordate\": \"11.10.2022\"},{\"appid\": 215550,\"ordate\": \"28.07.2015\"},{\"appid\": 2497940,\"ordate\": \"31.10.2023\"},{\"appid\": 2502350,\"ordate\": \"11.08.2023\"},{\"appid\": 1252210,\"ordate\": \"04.07.2020\"},{\"appid\": 2398660,\"ordate\": \"16.07.2023\"},{\"appid\": 938040,\"ordate\": \"27.11.2018\"},{\"appid\": 737880,\"ordate\": \"07.12.2017\"},{\"appid\": 1346960,\"ordate\": \"30.08.2020\"},{\"appid\": 690370,\"ordate\": \"12.05.2022\"},{\"appid\": 796290,\"ordate\": \"11.10.2018\"},{\"appid\": 879050,\"ordate\": \"27.03.2023\"},{\"appid\": 287980,\"ordate\": \"05.08.2014\"},{\"appid\": 559340,\"ordate\": \"28.11.2016\"},{\"appid\": 1613580,\"ordate\": \"11.10.2022\"},{\"appid\": 1374230,\"ordate\": \"17.03.2023\"},{\"appid\": 1850020,\"ordate\": \"02.02.2022\"},{\"appid\": 2186980,\"ordate\": \"14.02.2023\"},{\"appid\": 1175800,\"ordate\": \"08.06.2021\"},{\"appid\": 2116920,\"ordate\": \"30.09.2022\"},{\"appid\": 2108840,\"ordate\": \"30.08.2022\"},{\"appid\": 1378890,\"ordate\": \"14.07.2021\"},{\"appid\": 2328380,\"ordate\": \"12.09.2023\"},{\"appid\": 1405260,\"ordate\": \"05.11.2020\"},{\"appid\": 450630,\"ordate\": \"01.06.2017\"},{\"appid\": 509770,\"ordate\": \"13.10.2016\"},{\"appid\": 1970580,\"ordate\": \"15.08.2022\"},{\"appid\": 492410,\"ordate\": \"10.02.2017\"},{\"appid\": 801550,\"ordate\": \"16.11.2022\"},{\"appid\": 1380410,\"ordate\": \"28.02.2022\"},{\"appid\": 2239140,\"ordate\": \"09.11.2023\"},{\"appid\": 1293180,\"ordate\": \"14.07.2021\"},{\"appid\": 1965680,\"ordate\": \"01.06.2022\"},{\"appid\": 1469490,\"ordate\": \"27.11.2020\"},{\"appid\": 1157390,\"ordate\": \"26.01.2021\"},{\"appid\": 1702010,\"ordate\": \"10.08.2023\"},{\"appid\": 1186660,\"ordate\": \"04.05.2023\"},{\"appid\": 841140,\"ordate\": \"02.05.2018\"},{\"appid\": 1815230,\"ordate\": \"16.06.2022\"},{\"appid\": 1401590,\"ordate\": \"06.09.2022\"},{\"appid\": 1958950,\"ordate\": \"02.12.2022\"},{\"appid\": 416360,\"ordate\": \"11.11.2015\"},{\"appid\": 633460,\"ordate\": \"16.11.2017\"},{\"appid\": 2419020,\"ordate\": \"17.08.2023\"},{\"appid\": 1439070,\"ordate\": \"30.07.2021\"},{\"appid\": 588650,\"ordate\": \"10.05.2017\"},{\"appid\": 978180,\"ordate\": \"20.06.2019\"},{\"appid\": 1135230,\"ordate\": \"20.04.2022\"},{\"appid\": 401810,\"ordate\": \"06.11.2015\"},{\"appid\": 910880,\"ordate\": \"18.10.2018\"},{\"appid\": 1926690,\"ordate\": \"22.03.2022\"},{\"appid\": 1346460,\"ordate\": \"20.08.2021\"},{\"appid\": 681280,\"ordate\": \"09.02.2018\"},{\"appid\": 560080,\"ordate\": \"02.04.2017\"},{\"appid\": 2008980,\"ordate\": \"18.08.2023\"},{\"appid\": 1333270,\"ordate\": \"16.06.2020\"},{\"appid\": 1256670,\"ordate\": \"15.05.2020\"},{\"appid\": 1336040,\"ordate\": \"16.06.2020\"},{\"appid\": 1088150,\"ordate\": \"26.07.2019\"},{\"appid\": 1664060,\"ordate\": \"29.07.2021\"},{\"appid\": 1622050,\"ordate\": \"27.07.2021\"},{\"appid\": 684510,\"ordate\": \"25.09.2017\"},{\"appid\": 517160,\"ordate\": \"19.09.2016\"},{\"appid\": 1046210,\"ordate\": \"30.03.2019\"},{\"appid\": 1611060,\"ordate\": \"01.06.2021\"},{\"appid\": 820640,\"ordate\": \"18.05.2018\"},{\"appid\": 900010,\"ordate\": \"17.01.2019\"},{\"appid\": 436320,\"ordate\": \"14.07.2016\"},{\"appid\": 1963040,\"ordate\": \"15.01.2023\"},{\"appid\": 1472660,\"ordate\": \"24.12.2020\"},{\"appid\": 485390,\"ordate\": \"19.07.2016\"},{\"appid\": 374040,\"ordate\": \"25.02.2016\"},{\"appid\": 1315220,\"ordate\": \"26.05.2021\"},{\"appid\": 746110,\"ordate\": \"17.01.2018\"},{\"appid\": 1210320,\"ordate\": \"21.09.2021\"},{\"appid\": 1550730,\"ordate\": \"18.08.2022\"},{\"appid\": 762560,\"ordate\": \"08.03.2019\"},{\"appid\": 671440,\"ordate\": \"09.02.2018\"},{\"appid\": 1460480,\"ordate\": \"16.12.2020\"},{\"appid\": 1453640,\"ordate\": \"31.03.2022\"},{\"appid\": 1797680,\"ordate\": \"23.02.2022\"},{\"appid\": 839350,\"ordate\": \"22.12.2018\"},{\"appid\": 387090,\"ordate\": \"17.07.2015\"},{\"appid\": 300280,\"ordate\": \"28.06.2014\"},{\"appid\": 1646070,\"ordate\": \"07.04.2023\"},{\"appid\": 1714240,\"ordate\": \"04.08.2023\"},{\"appid\": 921970,\"ordate\": \"21.09.2018\"},{\"appid\": 2058500,\"ordate\": \"29.07.2022\"},{\"appid\": 739100,\"ordate\": \"28.09.2018\"},{\"appid\": 1063420,\"ordate\": \"07.09.2023\"},{\"appid\": 1712690,\"ordate\": \"20.12.2021\"},{\"appid\": 1708270,\"ordate\": \"07.02.2023\"},{\"appid\": 1850280,\"ordate\": \"08.02.2022\"},{\"appid\": 448850,\"ordate\": \"13.03.2017\"},{\"appid\": 1199180,\"ordate\": \"04.05.2020\"},{\"appid\": 1351180,\"ordate\": \"27.10.2020\"},{\"appid\": 405710,\"ordate\": \"23.01.2018\"},{\"appid\": 508190,\"ordate\": \"23.11.2016\"},{\"appid\": 732400,\"ordate\": \"27.03.2018\"},{\"appid\": 454330,\"ordate\": \"27.03.2016\"},{\"appid\": 415590,\"ordate\": \"26.04.2017\"},{\"appid\": 2227040,\"ordate\": \"21.01.2023\"},{\"appid\": 1101120,\"ordate\": \"19.07.2023\"},{\"appid\": 1348690,\"ordate\": \"03.05.2022\"},{\"appid\": 2061750,\"ordate\": \"14.10.2022\"},{\"appid\": 397810,\"ordate\": \"03.02.2016\"},{\"appid\": 1341620,\"ordate\": \"26.06.2020\"},{\"appid\": 1745000,\"ordate\": \"22.10.2021\"},{\"appid\": 1687990,\"ordate\": \"09.11.2021\"},{\"appid\": 1450800,\"ordate\": \"20.08.2021\"},{\"appid\": 477900,\"ordate\": \"08.03.2019\"},{\"appid\": 271240,\"ordate\": \"12.02.2015\"},{\"appid\": 1622800,\"ordate\": \"15.02.2022\"},{\"appid\": 348160,\"ordate\": \"26.02.2016\"},{\"appid\": 644150,\"ordate\": \"30.06.2017\"},{\"appid\": 401970,\"ordate\": \"15.06.2017\"},{\"appid\": 993110,\"ordate\": \"05.06.2021\"},{\"appid\": 2254600,\"ordate\": \"16.01.2023\"},{\"appid\": 1907000,\"ordate\": \"11.07.2022\"},{\"appid\": 897410,\"ordate\": \"20.06.2019\"},{\"appid\": 508410,\"ordate\": \"21.03.2017\"},{\"appid\": 1586150,\"ordate\": \"04.12.2021\"},{\"appid\": 676500,\"ordate\": \"03.11.2018\"},{\"appid\": 909660,\"ordate\": \"22.07.2020\"},{\"appid\": 2361450,\"ordate\": \"22.09.2023\"},{\"appid\": 955050,\"ordate\": \"11.01.2019\"},{\"appid\": 1819240,\"ordate\": \"16.02.2022\"},{\"appid\": 1540060,\"ordate\": \"23.02.2021\"},{\"appid\": 884610,\"ordate\": \"01.08.2019\"},{\"appid\": 411120,\"ordate\": \"07.11.2015\"},{\"appid\": 1025260,\"ordate\": \"29.03.2019\"},{\"appid\": 830370,\"ordate\": \"31.07.2020\"},{\"appid\": 1679670,\"ordate\": \"21.07.2021\"},{\"appid\": 1159240,\"ordate\": \"04.11.2019\"},{\"appid\": 2084000,\"ordate\": \"27.06.2023\"},{\"appid\": 2344630,\"ordate\": \"22.05.2023\"},{\"appid\": 1690790,\"ordate\": \"07.03.2022\"},{\"appid\": 1301390,\"ordate\": \"24.06.2020\"},{\"appid\": 2239150,\"ordate\": \"02.08.2023\"},{\"appid\": 1880160,\"ordate\": \"23.09.2022\"},{\"appid\": 1899200,\"ordate\": \"22.07.2022\"},{\"appid\": 861050,\"ordate\": \"04.07.2018\"},{\"appid\": 2288210,\"ordate\": \"14.02.2023\"},{\"appid\": 319830,\"ordate\": \"26.09.2014\"},{\"appid\": 1179580,\"ordate\": \"03.05.2023\"},{\"appid\": 2304130,\"ordate\": \"17.02.2023\"},{\"appid\": 759260,\"ordate\": \"29.03.2018\"},{\"appid\": 1468720,\"ordate\": \"12.05.2022\"},{\"appid\": 298560,\"ordate\": \"27.03.2015\"},{\"appid\": 2292440,\"ordate\": \"18.07.2023\"},{\"appid\": 646570,\"ordate\": \"15.11.2017\"},{\"appid\": 1650610,\"ordate\": \"18.06.2021\"},{\"appid\": 1701760,\"ordate\": \"18.08.2021\"},{\"appid\": 1272010,\"ordate\": \"28.09.2022\"},{\"appid\": 265810,\"ordate\": \"22.04.2014\"},{\"appid\": 342310,\"ordate\": \"06.12.2017\"},{\"appid\": 1696440,\"ordate\": \"30.08.2023\"},{\"appid\": 1040460,\"ordate\": \"12.06.2020\"},{\"appid\": 1152160,\"ordate\": \"14.12.2019\"},{\"appid\": 1260810,\"ordate\": \"17.04.2020\"},{\"appid\": 1034540,\"ordate\": \"30.07.2019\"},{\"appid\": 1145590,\"ordate\": \"11.10.2019\"},{\"appid\": 2327580,\"ordate\": \"30.03.2023\"},{\"appid\": 2125190,\"ordate\": \"29.09.2022\"},{\"appid\": 1918100,\"ordate\": \"23.04.2022\"},{\"appid\": 1881610,\"ordate\": \"25.06.2023\"},{\"appid\": 2559550,\"ordate\": \"29.09.2023\"},{\"appid\": 523940,\"ordate\": \"11.09.2016\"},{\"appid\": 2187230,\"ordate\": \"30.03.2023\"},{\"appid\": 1063280,\"ordate\": \"07.06.2019\"},{\"appid\": 822660,\"ordate\": \"29.04.2020\"},{\"appid\": 1906800,\"ordate\": \"04.03.2022\"},{\"appid\": 2629660,\"ordate\": \"04.11.2023\"},{\"appid\": 644420,\"ordate\": \"24.06.2017\"},{\"appid\": 261490,\"ordate\": \"09.08.2014\"},{\"appid\": 593600,\"ordate\": \"27.03.2018\"},{\"appid\": 1512940,\"ordate\": \"25.12.2021\"},{\"appid\": 445860,\"ordate\": \"05.04.2016\"},{\"appid\": 849670,\"ordate\": \"08.06.2018\"},{\"appid\": 1197820,\"ordate\": \"13.10.2020\"},{\"appid\": 1527710,\"ordate\": \"19.02.2021\"},{\"appid\": 640210,\"ordate\": \"11.07.2017\"},{\"appid\": 1757610,\"ordate\": \"01.03.2023\"},{\"appid\": 2093910,\"ordate\": \"26.09.2022\"},{\"appid\": 762650,\"ordate\": \"20.07.2018\"},{\"appid\": 2277300,\"ordate\": \"15.03.2023\"},{\"appid\": 1421290,\"ordate\": \"03.10.2023\"},{\"appid\": 2196640,\"ordate\": \"07.08.2023\"},{\"appid\": 357670,\"ordate\": \"28.05.2015\"},{\"appid\": 2178590,\"ordate\": \"29.12.2022\"},{\"appid\": 341460,\"ordate\": \"04.02.2015\"},{\"appid\": 416210,\"ordate\": \"10.03.2016\"},{\"appid\": 2117930,\"ordate\": \"01.09.2022\"},{\"appid\": 2451820,\"ordate\": \"31.08.2023\"},{\"appid\": 1864860,\"ordate\": \"19.01.2022\"},{\"appid\": 858260,\"ordate\": \"27.08.2019\"},{\"appid\": 977720,\"ordate\": \"05.09.2019\"},{\"appid\": 1542760,\"ordate\": \"25.01.2022\"},{\"appid\": 2027040,\"ordate\": \"20.10.2022\"},{\"appid\": 469820,\"ordate\": \"17.11.2016\"},{\"appid\": 773540,\"ordate\": \"15.03.2018\"},{\"appid\": 2263980,\"ordate\": \"27.09.2023\"},{\"appid\": 1343670,\"ordate\": \"16.12.2020\"},{\"appid\": 1270580,\"ordate\": \"14.12.2023\"},{\"appid\": 656740,\"ordate\": \"22.11.2017\"},{\"appid\": 1907900,\"ordate\": \"12.03.2022\"},{\"appid\": 399820,\"ordate\": \"18.09.2015\"},{\"appid\": 719180,\"ordate\": \"21.12.2017\"},{\"appid\": 392580,\"ordate\": \"15.08.2015\"},{\"appid\": 2422540,\"ordate\": \"09.06.2023\"},{\"appid\": 1016730,\"ordate\": \"11.04.2019\"},{\"appid\": 1864850,\"ordate\": \"20.01.2022\"},{\"appid\": 416530,\"ordate\": \"15.01.2016\"},{\"appid\": 1893370,\"ordate\": \"12.04.2023\"},{\"appid\": 1860610,\"ordate\": \"08.07.2022\"},{\"appid\": 282860,\"ordate\": \"17.04.2014\"},{\"appid\": 2105460,\"ordate\": \"29.08.2022\"},{\"appid\": 290080,\"ordate\": \"19.09.2014\"},{\"appid\": 988490,\"ordate\": \"30.01.2020\"},{\"appid\": 2181640,\"ordate\": \"27.10.2022\"},{\"appid\": 2097480,\"ordate\": \"13.02.2023\"},{\"appid\": 1863750,\"ordate\": \"07.02.2022\"},{\"appid\": 908100,\"ordate\": \"30.12.2019\"},{\"appid\": 1295910,\"ordate\": \"05.06.2020\"},{\"appid\": 811070,\"ordate\": \"22.12.2019\"},{\"appid\": 861080,\"ordate\": \"23.06.2018\"},{\"appid\": 1291340,\"ordate\": \"30.06.2020\"},{\"appid\": 286160,\"ordate\": \"10.04.2014\"},{\"appid\": 1908500,\"ordate\": \"02.05.2022\"},{\"appid\": 1185780,\"ordate\": \"24.04.2023\"},{\"appid\": 1317950,\"ordate\": \"28.05.2020\"},{\"appid\": 1324780,\"ordate\": \"11.11.2020\"},{\"appid\": 2296550,\"ordate\": \"02.08.2023\"},{\"appid\": 1271280,\"ordate\": \"07.07.2020\"},{\"appid\": 1136730,\"ordate\": \"06.10.2021\"},{\"appid\": 1045010,\"ordate\": \"23.04.2019\"},{\"appid\": 1290000,\"ordate\": \"19.05.2021\"},{\"appid\": 1377450,\"ordate\": \"09.10.2020\"},{\"appid\": 1736550,\"ordate\": \"27.01.2022\"},{\"appid\": 747650,\"ordate\": \"22.02.2018\"},{\"appid\": 2247850,\"ordate\": \"26.05.2023\"},{\"appid\": 1626530,\"ordate\": \"28.04.2022\"},{\"appid\": 1578110,\"ordate\": \"27.07.2021\"},{\"appid\": 2095120,\"ordate\": \"02.11.2022\"},{\"appid\": 1074500,\"ordate\": \"19.05.2020\"},{\"appid\": 1332760,\"ordate\": \"28.01.2022\"},{\"appid\": 297740,\"ordate\": \"23.07.2014\"},{\"appid\": 681330,\"ordate\": \"18.08.2017\"},{\"appid\": 936960,\"ordate\": \"20.10.2018\"},{\"appid\": 1114950,\"ordate\": \"21.10.2022\"},{\"appid\": 861410,\"ordate\": \"19.02.2022\"},{\"appid\": 1255650,\"ordate\": \"08.04.2020\"},{\"appid\": 1757580,\"ordate\": \"26.10.2023\"},{\"appid\": 452060,\"ordate\": \"01.04.2016\"},{\"appid\": 581630,\"ordate\": \"27.01.2017\"},{\"appid\": 1985710,\"ordate\": \"14.01.2023\"},{\"appid\": 1483100,\"ordate\": \"28.07.2021\"},{\"appid\": 1426490,\"ordate\": \"05.06.2021\"},{\"appid\": 2516870,\"ordate\": \"30.11.2023\"},{\"appid\": 1108370,\"ordate\": \"01.11.2019\"},{\"appid\": 2125340,\"ordate\": \"01.10.2022\"},{\"appid\": 2083240,\"ordate\": \"30.09.2023\"},{\"appid\": 1039060,\"ordate\": \"13.04.2019\"},{\"appid\": 230860,\"ordate\": \"30.07.2013\"},{\"appid\": 1920120,\"ordate\": \"29.04.2022\"},{\"appid\": 2435090,\"ordate\": \"31.10.2023\"},{\"appid\": 384940,\"ordate\": \"29.08.2015\"},{\"appid\": 527230,\"ordate\": \"28.02.2017\"},{\"appid\": 2711770,\"ordate\": \"26.12.2023\"},{\"appid\": 1806700,\"ordate\": \"06.03.2022\"},{\"appid\": 2387310,\"ordate\": \"30.05.2023\"},{\"appid\": 1547670,\"ordate\": \"09.05.2023\"},{\"appid\": 841190,\"ordate\": \"14.09.2021\"},{\"appid\": 604510,\"ordate\": \"05.02.2020\"},{\"appid\": 504370,\"ordate\": \"20.09.2016\"},{\"appid\": 1174050,\"ordate\": \"02.11.2019\"},{\"appid\": 1175460,\"ordate\": \"03.03.2021\"},{\"appid\": 1271110,\"ordate\": \"01.09.2020\"},{\"appid\": 226860,\"ordate\": \"27.03.2014\"},{\"appid\": 490490,\"ordate\": \"14.07.2016\"},{\"appid\": 966430,\"ordate\": \"30.04.2019\"},{\"appid\": 291860,\"ordate\": \"13.01.2017\"},{\"appid\": 894940,\"ordate\": \"18.06.2019\"},{\"appid\": 1044220,\"ordate\": \"09.05.2019\"},{\"appid\": 2247670,\"ordate\": \"10.02.2023\"},{\"appid\": 1269300,\"ordate\": \"17.03.2022\"},{\"appid\": 1129730,\"ordate\": \"21.11.2019\"},{\"appid\": 917140,\"ordate\": \"18.10.2022\"},{\"appid\": 1038820,\"ordate\": \"13.06.2020\"},{\"appid\": 562500,\"ordate\": \"06.04.2017\"},{\"appid\": 555880,\"ordate\": \"21.12.2016\"},{\"appid\": 342970,\"ordate\": \"20.03.2015\"},{\"appid\": 1824250,\"ordate\": \"18.12.2021\"},{\"appid\": 1424930,\"ordate\": \"26.01.2021\"},{\"appid\": 265590,\"ordate\": \"24.05.2014\"},{\"appid\": 248610,\"ordate\": \"04.09.2013\"},{\"appid\": 2223170,\"ordate\": \"20.05.2023\"},{\"appid\": 1643180,\"ordate\": \"28.10.2021\"},{\"appid\": 1069660,\"ordate\": \"10.12.2021\"},{\"appid\": 1080410,\"ordate\": \"07.07.2019\"},{\"appid\": 1948800,\"ordate\": \"06.12.2022\"},{\"appid\": 1424330,\"ordate\": \"29.01.2021\"},{\"appid\": 1103550,\"ordate\": \"08.02.2020\"},{\"appid\": 1973080,\"ordate\": \"04.06.2022\"},{\"appid\": 310870,\"ordate\": \"01.07.2014\"},{\"appid\": 345010,\"ordate\": \"27.02.2015\"},{\"appid\": 389220,\"ordate\": \"25.01.2016\"},{\"appid\": 1858120,\"ordate\": \"12.07.2022\"},{\"appid\": 2066490,\"ordate\": \"22.10.2022\"},{\"appid\": 2113010,\"ordate\": \"27.10.2022\"},{\"appid\": 559260,\"ordate\": \"16.07.2018\"},{\"appid\": 2295410,\"ordate\": \"03.10.2023\"},{\"appid\": 1565860,\"ordate\": \"17.03.2021\"},{\"appid\": 1624600,\"ordate\": \"01.10.2021\"},{\"appid\": 278440,\"ordate\": \"16.04.2014\"},{\"appid\": 233980,\"ordate\": \"13.06.2013\"},{\"appid\": 1673650,\"ordate\": \"18.03.2022\"},{\"appid\": 1404660,\"ordate\": \"11.09.2021\"},{\"appid\": 244210,\"ordate\": \"08.11.2013\"},{\"appid\": 1992940,\"ordate\": \"25.05.2022\"},{\"appid\": 1800480,\"ordate\": \"10.01.2022\"},{\"appid\": 1747430,\"ordate\": \"11.02.2022\"},{\"appid\": 1287530,\"ordate\": \"30.09.2021\"},{\"appid\": 978520,\"ordate\": \"19.03.2020\"},{\"appid\": 1495760,\"ordate\": \"12.02.2021\"},{\"appid\": 1460650,\"ordate\": \"08.07.2022\"},{\"appid\": 1807590,\"ordate\": \"06.01.2022\"},{\"appid\": 994220,\"ordate\": \"09.01.2019\"},{\"appid\": 321270,\"ordate\": \"21.08.2015\"},{\"appid\": 1645780,\"ordate\": \"09.06.2021\"},{\"appid\": 2351160,\"ordate\": \"04.08.2023\"},{\"appid\": 419480,\"ordate\": \"14.04.2016\"},{\"appid\": 616520,\"ordate\": \"27.09.2017\"},{\"appid\": 1956800,\"ordate\": \"21.04.2023\"},{\"appid\": 941890,\"ordate\": \"10.02.2021\"},{\"appid\": 1371620,\"ordate\": \"03.08.2020\"},{\"appid\": 1155870,\"ordate\": \"01.09.2021\"},{\"appid\": 1764660,\"ordate\": \"16.09.2022\"},{\"appid\": 1524550,\"ordate\": \"09.06.2022\"},{\"appid\": 486440,\"ordate\": \"31.01.2019\"},{\"appid\": 662960,\"ordate\": \"23.08.2019\"},{\"appid\": 1955830,\"ordate\": \"25.02.2023\"},{\"appid\": 386100,\"ordate\": \"15.08.2016\"},{\"appid\": 2446080,\"ordate\": \"18.06.2023\"},{\"appid\": 1336490,\"ordate\": \"01.11.2022\"},{\"appid\": 2154350,\"ordate\": \"29.11.2022\"},{\"appid\": 1460220,\"ordate\": \"31.10.2022\"},{\"appid\": 2628800,\"ordate\": \"30.10.2023\"},{\"appid\": 812190,\"ordate\": \"23.01.2019\"},{\"appid\": 1778060,\"ordate\": \"08.03.2022\"},{\"appid\": 1840710,\"ordate\": \"25.09.2023\"},{\"appid\": 1155290,\"ordate\": \"21.10.2019\"},{\"appid\": 505220,\"ordate\": \"06.09.2016\"},{\"appid\": 692690,\"ordate\": \"28.09.2018\"},{\"appid\": 1034150,\"ordate\": \"25.08.2021\"},{\"appid\": 697550,\"ordate\": \"25.04.2018\"},{\"appid\": 598700,\"ordate\": \"09.06.2017\"},{\"appid\": 738600,\"ordate\": \"15.12.2017\"},{\"appid\": 611730,\"ordate\": \"15.06.2017\"},{\"appid\": 1334420,\"ordate\": \"07.07.2020\"},{\"appid\": 865980,\"ordate\": \"18.04.2019\"},{\"appid\": 2365120,\"ordate\": \"26.06.2023\"},{\"appid\": 1245370,\"ordate\": \"04.08.2020\"},{\"appid\": 654890,\"ordate\": \"21.08.2020\"},{\"appid\": 520950,\"ordate\": \"07.05.2020\"},{\"appid\": 1018830,\"ordate\": \"28.02.2020\"},{\"appid\": 600610,\"ordate\": \"11.05.2021\"},{\"appid\": 1158160,\"ordate\": \"11.10.2022\"},{\"appid\": 1001860,\"ordate\": \"11.01.2019\"},{\"appid\": 1552620,\"ordate\": \"18.08.2022\"},{\"appid\": 2361390,\"ordate\": \"03.08.2023\"},{\"appid\": 1455840,\"ordate\": \"25.03.2021\"},{\"appid\": 719930,\"ordate\": \"15.05.2020\"},{\"appid\": 1570830,\"ordate\": \"21.02.2023\"},{\"appid\": 1834570,\"ordate\": \"05.03.2022\"},{\"appid\": 1783280,\"ordate\": \"14.04.2022\"},{\"appid\": 917150,\"ordate\": \"10.07.2019\"},{\"appid\": 666870,\"ordate\": \"30.08.2019\"},{\"appid\": 867980,\"ordate\": \"01.08.2019\"},{\"appid\": 1967630,\"ordate\": \"19.04.2023\"},{\"appid\": 493410,\"ordate\": \"28.07.2016\"},{\"appid\": 762850,\"ordate\": \"06.01.2018\"},{\"appid\": 1844410,\"ordate\": \"17.01.2022\"},{\"appid\": 1922060,\"ordate\": \"15.07.2022\"},{\"appid\": 1651560,\"ordate\": \"13.04.2023\"},{\"appid\": 1164690,\"ordate\": \"25.02.2021\"},{\"appid\": 1428880,\"ordate\": \"22.04.2023\"},{\"appid\": 1766350,\"ordate\": \"19.05.2022\"},{\"appid\": 944690,\"ordate\": \"06.02.2019\"},{\"appid\": 1278060,\"ordate\": \"01.05.2020\"},{\"appid\": 1888520,\"ordate\": \"14.02.2022\"},{\"appid\": 1425050,\"ordate\": \"17.11.2020\"},{\"appid\": 2112680,\"ordate\": \"10.01.2023\"},{\"appid\": 726450,\"ordate\": \"30.03.2020\"},{\"appid\": 1117220,\"ordate\": \"02.09.2019\"},{\"appid\": 267750,\"ordate\": \"31.03.2014\"},{\"appid\": 645270,\"ordate\": \"17.02.2020\"},{\"appid\": 1477590,\"ordate\": \"17.03.2021\"},{\"appid\": 968350,\"ordate\": \"03.12.2018\"},{\"appid\": 1098220,\"ordate\": \"06.08.2020\"},{\"appid\": 813630,\"ordate\": \"09.03.2018\"},{\"appid\": 1998510,\"ordate\": \"30.05.2022\"},{\"appid\": 1585650,\"ordate\": \"29.04.2022\"},{\"appid\": 1685940,\"ordate\": \"29.08.2022\"},{\"appid\": 1694420,\"ordate\": \"21.08.2021\"},{\"appid\": 781680,\"ordate\": \"20.02.2018\"},{\"appid\": 1012430,\"ordate\": \"20.06.2020\"},{\"appid\": 1029550,\"ordate\": \"24.03.2020\"},{\"appid\": 1134100,\"ordate\": \"20.05.2021\"},{\"appid\": 278910,\"ordate\": \"16.04.2014\"},{\"appid\": 616250,\"ordate\": \"27.07.2017\"},{\"appid\": 1401970,\"ordate\": \"12.10.2023\"},{\"appid\": 1373260,\"ordate\": \"28.04.2021\"},{\"appid\": 495580,\"ordate\": \"07.09.2016\"},{\"appid\": 1914580,\"ordate\": \"25.05.2022\"},{\"appid\": 1597610,\"ordate\": \"27.09.2022\"},{\"appid\": 1156480,\"ordate\": \"31.10.2020\"},{\"appid\": 2670260,\"ordate\": \"21.11.2023\"},{\"appid\": 1220010,\"ordate\": \"22.01.2021\"},{\"appid\": 272330,\"ordate\": \"17.07.2014\"},{\"appid\": 1269710,\"ordate\": \"11.11.2021\"},{\"appid\": 684450,\"ordate\": \"22.10.2020\"},{\"appid\": 1629300,\"ordate\": \"08.12.2021\"},{\"appid\": 1944660,\"ordate\": \"21.01.2023\"},{\"appid\": 622810,\"ordate\": \"23.05.2017\"},{\"appid\": 2183790,\"ordate\": \"13.12.2022\"},{\"appid\": 1195140,\"ordate\": \"10.01.2020\"},{\"appid\": 1333800,\"ordate\": \"04.01.2021\"},{\"appid\": 2139730,\"ordate\": \"05.12.2022\"},{\"appid\": 898580,\"ordate\": \"26.09.2018\"},{\"appid\": 1621490,\"ordate\": \"27.05.2021\"},{\"appid\": 577360,\"ordate\": \"30.08.2017\"},{\"appid\": 1513820,\"ordate\": \"04.02.2021\"},{\"appid\": 881100,\"ordate\": \"24.09.2019\"},{\"appid\": 1997630,\"ordate\": \"04.11.2022\"},{\"appid\": 957960,\"ordate\": \"31.01.2023\"},{\"appid\": 750240,\"ordate\": \"09.08.2018\"},{\"appid\": 1455300,\"ordate\": \"17.12.2020\"},{\"appid\": 552620,\"ordate\": \"28.11.2017\"},{\"appid\": 386750,\"ordate\": \"12.08.2015\"},{\"appid\": 875240,\"ordate\": \"04.09.2018\"},{\"appid\": 1482980,\"ordate\": \"13.02.2021\"},{\"appid\": 1890170,\"ordate\": \"14.02.2022\"},{\"appid\": 620980,\"ordate\": \"01.05.2018\"},{\"appid\": 1968730,\"ordate\": \"18.08.2022\"},{\"appid\": 1768780,\"ordate\": \"19.10.2022\"},{\"appid\": 406280,\"ordate\": \"30.10.2015\"},{\"appid\": 1848330,\"ordate\": \"03.01.2022\"},{\"appid\": 488920,\"ordate\": \"24.01.2017\"},{\"appid\": 270150,\"ordate\": \"13.03.2014\"},{\"appid\": 1069760,\"ordate\": \"02.08.2019\"},{\"appid\": 1911400,\"ordate\": \"01.06.2022\"},{\"appid\": 1492650,\"ordate\": \"17.03.2021\"},{\"appid\": 760650,\"ordate\": \"27.10.2020\"},{\"appid\": 1096690,\"ordate\": \"08.02.2020\"},{\"appid\": 1185490,\"ordate\": \"04.05.2022\"},{\"appid\": 1251090,\"ordate\": \"01.09.2020\"},{\"appid\": 1520380,\"ordate\": \"20.08.2021\"},{\"appid\": 788250,\"ordate\": \"30.01.2018\"},{\"appid\": 677710,\"ordate\": \"31.12.2017\"},{\"appid\": 1014360,\"ordate\": \"08.03.2019\"},{\"appid\": 916960,\"ordate\": \"09.11.2018\"},{\"appid\": 822800,\"ordate\": \"16.07.2019\"},{\"appid\": 2503690,\"ordate\": \"06.08.2023\"},{\"appid\": 236150,\"ordate\": \"08.09.2013\"},{\"appid\": 282560,\"ordate\": \"30.10.2015\"},{\"appid\": 459150,\"ordate\": \"19.02.2017\"},{\"appid\": 1707570,\"ordate\": \"14.08.2021\"},{\"appid\": 1393570,\"ordate\": \"05.03.2021\"},{\"appid\": 1975860,\"ordate\": \"13.05.2022\"},{\"appid\": 1165910,\"ordate\": \"08.04.2020\"},{\"appid\": 577410,\"ordate\": \"26.10.2018\"},{\"appid\": 602320,\"ordate\": \"29.03.2018\"},{\"appid\": 1680020,\"ordate\": \"20.09.2021\"},{\"appid\": 1182110,\"ordate\": \"03.04.2021\"},{\"appid\": 338040,\"ordate\": \"24.07.2015\"},{\"appid\": 223830,\"ordate\": \"31.05.2013\"},{\"appid\": 377980,\"ordate\": \"30.10.2015\"},{\"appid\": 1004200,\"ordate\": \"28.01.2019\"},{\"appid\": 440730,\"ordate\": \"22.04.2016\"},{\"appid\": 1264790,\"ordate\": \"06.08.2021\"},{\"appid\": 814730,\"ordate\": \"24.12.2022\"},{\"appid\": 1245540,\"ordate\": \"16.10.2020\"},{\"appid\": 455100,\"ordate\": \"03.12.2018\"},{\"appid\": 1111330,\"ordate\": \"03.10.2019\"},{\"appid\": 311930,\"ordate\": \"19.08.2014\"},{\"appid\": 1302290,\"ordate\": \"12.05.2020\"},{\"appid\": 2193370,\"ordate\": \"17.11.2022\"},{\"appid\": 995310,\"ordate\": \"09.09.2019\"},{\"appid\": 1203630,\"ordate\": \"12.03.2020\"},{\"appid\": 1016920,\"ordate\": \"09.09.2019\"},{\"appid\": 1949370,\"ordate\": \"09.05.2022\"},{\"appid\": 844850,\"ordate\": \"28.09.2018\"},{\"appid\": 2473830,\"ordate\": \"06.07.2023\"},{\"appid\": 854770,\"ordate\": \"29.07.2018\"},{\"appid\": 257170,\"ordate\": \"16.05.2014\"},{\"appid\": 895670,\"ordate\": \"25.09.2018\"},{\"appid\": 976950,\"ordate\": \"30.11.2018\"},{\"appid\": 1181830,\"ordate\": \"14.02.2020\"},{\"appid\": 755920,\"ordate\": \"31.08.2018\"},{\"appid\": 981630,\"ordate\": \"21.11.2019\"},{\"appid\": 367450,\"ordate\": \"30.06.2015\"},{\"appid\": 677480,\"ordate\": \"12.07.2018\"},{\"appid\": 1740720,\"ordate\": \"09.03.2022\"},{\"appid\": 466560,\"ordate\": \"22.02.2017\"},{\"appid\": 618740,\"ordate\": \"03.10.2018\"},{\"appid\": 1853780,\"ordate\": \"05.01.2022\"},{\"appid\": 359140,\"ordate\": \"06.11.2015\"},{\"appid\": 1509510,\"ordate\": \"11.10.2021\"},{\"appid\": 1361000,\"ordate\": \"16.10.2020\"},{\"appid\": 1380220,\"ordate\": \"04.11.2021\"},{\"appid\": 428200,\"ordate\": \"15.04.2016\"},{\"appid\": 246090,\"ordate\": \"15.10.2013\"},{\"appid\": 1969010,\"ordate\": \"03.05.2023\"},{\"appid\": 1525370,\"ordate\": \"03.09.2021\"},{\"appid\": 1684660,\"ordate\": \"04.08.2021\"},{\"appid\": 792710,\"ordate\": \"18.04.2019\"},{\"appid\": 2619280,\"ordate\": \"01.12.2023\"},{\"appid\": 1235350,\"ordate\": \"14.04.2020\"},{\"appid\": 1133260,\"ordate\": \"02.10.2019\"},{\"appid\": 503010,\"ordate\": \"19.08.2016\"},{\"appid\": 577080,\"ordate\": \"13.01.2017\"},{\"appid\": 1532080,\"ordate\": \"07.04.2021\"},{\"appid\": 1899210,\"ordate\": \"05.05.2022\"},{\"appid\": 1906020,\"ordate\": \"02.06.2022\"},{\"appid\": 2152630,\"ordate\": \"12.12.2022\"},{\"appid\": 1440910,\"ordate\": \"28.01.2022\"},{\"appid\": 1230800,\"ordate\": \"27.02.2020\"},{\"appid\": 1694310,\"ordate\": \"22.10.2021\"},{\"appid\": 671470,\"ordate\": \"12.08.2018\"},{\"appid\": 2692040,\"ordate\": \"09.01.2024\"},{\"appid\": 1072640,\"ordate\": \"14.08.2020\"},{\"appid\": 1677570,\"ordate\": \"19.10.2021\"},{\"appid\": 321350,\"ordate\": \"11.10.2014\"},{\"appid\": 772060,\"ordate\": \"18.01.2018\"},{\"appid\": 1674780,\"ordate\": \"28.03.2022\"},{\"appid\": 2219410,\"ordate\": \"26.12.2022\"},{\"appid\": 2180340,\"ordate\": \"24.05.2023\"},{\"appid\": 1370370,\"ordate\": \"01.06.2021\"},{\"appid\": 248860,\"ordate\": \"06.12.2013\"},{\"appid\": 846770,\"ordate\": \"06.11.2020\"},{\"appid\": 1704920,\"ordate\": \"20.10.2021\"},{\"appid\": 251170,\"ordate\": \"27.09.2013\"},{\"appid\": 1432650,\"ordate\": \"29.10.2020\"},{\"appid\": 506500,\"ordate\": \"29.07.2016\"},{\"appid\": 783230,\"ordate\": \"15.03.2019\"},{\"appid\": 2338200,\"ordate\": \"09.09.2023\"},{\"appid\": 1389610,\"ordate\": \"01.10.2020\"},{\"appid\": 1210960,\"ordate\": \"23.06.2020\"},{\"appid\": 895040,\"ordate\": \"26.08.2019\"},{\"appid\": 1140740,\"ordate\": \"20.01.2020\"},{\"appid\": 1475780,\"ordate\": \"13.12.2020\"},{\"appid\": 2688400,\"ordate\": \"19.01.2024\"},{\"appid\": 259660,\"ordate\": \"12.01.2014\"},{\"appid\": 375580,\"ordate\": \"11.05.2016\"},{\"appid\": 1708200,\"ordate\": \"16.04.2022\"},{\"appid\": 2093870,\"ordate\": \"19.01.2023\"},{\"appid\": 1360010,\"ordate\": \"17.07.2020\"},{\"appid\": 573410,\"ordate\": \"15.10.2018\"},{\"appid\": 815370,\"ordate\": \"29.08.2018\"},{\"appid\": 365160,\"ordate\": \"10.03.2016\"},{\"appid\": 1698110,\"ordate\": \"04.09.2021\"},{\"appid\": 1378470,\"ordate\": \"28.03.2022\"},{\"appid\": 1557990,\"ordate\": \"29.04.2022\"},{\"appid\": 2128270,\"ordate\": \"01.05.2023\"},{\"appid\": 650940,\"ordate\": \"19.01.2018\"},{\"appid\": 632100,\"ordate\": \"22.03.2018\"},{\"appid\": 1759350,\"ordate\": \"09.11.2023\"},{\"appid\": 1008600,\"ordate\": \"03.10.2019\"},{\"appid\": 1652250,\"ordate\": \"10.08.2023\"},{\"appid\": 2389260,\"ordate\": \"15.07.2023\"},{\"appid\": 1532240,\"ordate\": \"17.01.2023\"},{\"appid\": 1129580,\"ordate\": \"17.09.2020\"},{\"appid\": 1159560,\"ordate\": \"22.10.2020\"},{\"appid\": 2272250,\"ordate\": \"19.10.2023\"},{\"appid\": 323850,\"ordate\": \"16.01.2015\"},{\"appid\": 1785120,\"ordate\": \"25.03.2022\"},{\"appid\": 1299620,\"ordate\": \"20.05.2021\"},{\"appid\": 2190380,\"ordate\": \"16.11.2023\"},{\"appid\": 290530,\"ordate\": \"31.10.2014\"},{\"appid\": 1819980,\"ordate\": \"12.01.2022\"},{\"appid\": 513270,\"ordate\": \"17.12.2016\"},{\"appid\": 1893260,\"ordate\": \"12.03.2022\"},{\"appid\": 248390,\"ordate\": \"20.11.2013\"},{\"appid\": 1001690,\"ordate\": \"03.06.2020\"},{\"appid\": 1551220,\"ordate\": \"30.04.2021\"},{\"appid\": 1794490,\"ordate\": \"23.06.2022\"},{\"appid\": 344240,\"ordate\": \"15.04.2016\"},{\"appid\": 700570,\"ordate\": \"20.10.2017\"},{\"appid\": 303530,\"ordate\": \"08.08.2014\"},{\"appid\": 338290,\"ordate\": \"24.08.2017\"},{\"appid\": 361350,\"ordate\": \"14.05.2015\"},{\"appid\": 342480,\"ordate\": \"27.02.2015\"},{\"appid\": 2195400,\"ordate\": \"10.11.2023\"},{\"appid\": 1015180,\"ordate\": \"03.02.2020\"},{\"appid\": 544810,\"ordate\": \"12.04.2019\"},{\"appid\": 1146730,\"ordate\": \"31.10.2019\"},{\"appid\": 1248150,\"ordate\": \"06.03.2020\"},{\"appid\": 2220870,\"ordate\": \"28.04.2023\"},{\"appid\": 2677310,\"ordate\": \"07.12.2023\"},{\"appid\": 496290,\"ordate\": \"05.05.2017\"},{\"appid\": 997950,\"ordate\": \"28.03.2019\"},{\"appid\": 1829960,\"ordate\": \"17.12.2021\"},{\"appid\": 289760,\"ordate\": \"29.04.2014\"},{\"appid\": 985260,\"ordate\": \"29.03.2019\"},{\"appid\": 1063950,\"ordate\": \"21.05.2019\"},{\"appid\": 1963520,\"ordate\": \"16.12.2022\"},{\"appid\": 1501690,\"ordate\": \"03.04.2023\"},{\"appid\": 500710,\"ordate\": \"16.12.2016\"},{\"appid\": 351730,\"ordate\": \"24.02.2015\"},{\"appid\": 1683000,\"ordate\": \"17.12.2021\"},{\"appid\": 1333990,\"ordate\": \"16.06.2020\"},{\"appid\": 1333980,\"ordate\": \"16.06.2020\"},{\"appid\": 1053720,\"ordate\": \"17.10.2019\"},{\"appid\": 2497900,\"ordate\": \"27.10.2023\"},{\"appid\": 2096080,\"ordate\": \"20.01.2023\"},{\"appid\": 331720,\"ordate\": \"15.11.2014\"},{\"appid\": 2323860,\"ordate\": \"08.08.2023\"},{\"appid\": 1802550,\"ordate\": \"04.05.2023\"},{\"appid\": 1167800,\"ordate\": \"19.11.2019\"},{\"appid\": 1273940,\"ordate\": \"12.08.2020\"},{\"appid\": 1584820,\"ordate\": \"21.02.2023\"},{\"appid\": 2468470,\"ordate\": \"11.10.2023\"},{\"appid\": 497800,\"ordate\": \"26.10.2016\"},{\"appid\": 2316240,\"ordate\": \"01.08.2023\"},{\"appid\": 1745160,\"ordate\": \"04.09.2023\"},{\"appid\": 838110,\"ordate\": \"03.04.2019\"},{\"appid\": 2103140,\"ordate\": \"02.11.2023\"},{\"appid\": 839910,\"ordate\": \"18.09.2019\"},{\"appid\": 982840,\"ordate\": \"30.01.2019\"},{\"appid\": 2759050,\"ordate\": \"30.01.2024\"},{\"appid\": 429780,\"ordate\": \"27.04.2016\"},{\"appid\": 345330,\"ordate\": \"17.05.2018\"},{\"appid\": 2179380,\"ordate\": \"23.11.2022\"},{\"appid\": 1015140,\"ordate\": \"21.10.2019\"},{\"appid\": 1885640,\"ordate\": \"10.02.2022\"},{\"appid\": 2362480,\"ordate\": \"09.05.2023\"},{\"appid\": 989430,\"ordate\": \"25.02.2019\"},{\"appid\": 947430,\"ordate\": \"12.02.2019\"},{\"appid\": 1254410,\"ordate\": \"23.04.2020\"},{\"appid\": 778840,\"ordate\": \"01.02.2018\"},{\"appid\": 382260,\"ordate\": \"01.10.2015\"},{\"appid\": 405370,\"ordate\": \"22.10.2015\"},{\"appid\": 913550,\"ordate\": \"15.11.2018\"},{\"appid\": 1725680,\"ordate\": \"15.09.2021\"},{\"appid\": 1755870,\"ordate\": \"22.10.2021\"},{\"appid\": 502720,\"ordate\": \"09.05.2017\"},{\"appid\": 2321900,\"ordate\": \"14.09.2023\"},{\"appid\": 1966900,\"ordate\": \"08.06.2022\"},{\"appid\": 1141070,\"ordate\": \"28.10.2019\"},{\"appid\": 1478350,\"ordate\": \"03.06.2021\"},{\"appid\": 863590,\"ordate\": \"12.12.2018\"},{\"appid\": 1394100,\"ordate\": \"12.11.2020\"},{\"appid\": 1270620,\"ordate\": \"22.06.2020\"},{\"appid\": 1929250,\"ordate\": \"17.04.2023\"},{\"appid\": 276810,\"ordate\": \"20.11.2014\"},{\"appid\": 921960,\"ordate\": \"07.12.2018\"},{\"appid\": 1034040,\"ordate\": \"26.05.2020\"},{\"appid\": 484870,\"ordate\": \"09.06.2016\"},{\"appid\": 1094410,\"ordate\": \"05.02.2021\"},{\"appid\": 1868540,\"ordate\": \"01.02.2023\"},{\"appid\": 1243360,\"ordate\": \"10.04.2020\"},{\"appid\": 577280,\"ordate\": \"30.03.2017\"},{\"appid\": 1103880,\"ordate\": \"11.09.2019\"},{\"appid\": 747690,\"ordate\": \"01.11.2018\"},{\"appid\": 1827450,\"ordate\": \"19.04.2022\"},{\"appid\": 435150,\"ordate\": \"15.09.2016\"},{\"appid\": 1623310,\"ordate\": \"22.09.2022\"},{\"appid\": 324390,\"ordate\": \"17.10.2014\"},{\"appid\": 1431780,\"ordate\": \"22.10.2020\"},{\"appid\": 1075740,\"ordate\": \"30.07.2020\"},{\"appid\": 1455900,\"ordate\": \"17.09.2021\"},{\"appid\": 1863300,\"ordate\": \"02.01.2024\"},{\"appid\": 1812920,\"ordate\": \"22.12.2021\"},{\"appid\": 1390700,\"ordate\": \"16.12.2021\"},{\"appid\": 1257800,\"ordate\": \"11.11.2021\"},{\"appid\": 1427760,\"ordate\": \"01.01.2021\"},{\"appid\": 314520,\"ordate\": \"04.11.2014\"},{\"appid\": 1326470,\"ordate\": \"24.02.2023\"},{\"appid\": 2353700,\"ordate\": \"13.04.2023\"},{\"appid\": 2348610,\"ordate\": \"02.11.2023\"},{\"appid\": 2579870,\"ordate\": \"23.10.2023\"},{\"appid\": 1162390,\"ordate\": \"04.03.2020\"},{\"appid\": 1273220,\"ordate\": \"14.10.2021\"},{\"appid\": 1818230,\"ordate\": \"12.12.2022\"},{\"appid\": 1354990,\"ordate\": \"29.07.2021\"},{\"appid\": 545600,\"ordate\": \"05.10.2017\"},{\"appid\": 2080510,\"ordate\": \"25.10.2022\"},{\"appid\": 1334010,\"ordate\": \"16.06.2020\"},{\"appid\": 1267910,\"ordate\": \"20.11.2020\"},{\"appid\": 361280,\"ordate\": \"05.06.2015\"},{\"appid\": 1446750,\"ordate\": \"21.12.2020\"},{\"appid\": 1373930,\"ordate\": \"30.04.2021\"},{\"appid\": 1938290,\"ordate\": \"22.06.2022\"},{\"appid\": 1263070,\"ordate\": \"29.07.2020\"},{\"appid\": 2673160,\"ordate\": \"28.11.2023\"},{\"appid\": 794860,\"ordate\": \"29.03.2018\"},{\"appid\": 301500,\"ordate\": \"04.08.2014\"},{\"appid\": 1190910,\"ordate\": \"20.02.2020\"},{\"appid\": 1988530,\"ordate\": \"01.12.2023\"},{\"appid\": 1905980,\"ordate\": \"29.03.2023\"},{\"appid\": 2229110,\"ordate\": \"08.01.2023\"},{\"appid\": 1175250,\"ordate\": \"18.04.2020\"},{\"appid\": 552870,\"ordate\": \"26.12.2016\"},{\"appid\": 1092400,\"ordate\": \"30.08.2019\"},{\"appid\": 1409770,\"ordate\": \"31.05.2021\"},{\"appid\": 397310,\"ordate\": \"16.08.2016\"},{\"appid\": 1478590,\"ordate\": \"11.02.2021\"},{\"appid\": 1945230,\"ordate\": \"26.08.2022\"},{\"appid\": 1498290,\"ordate\": \"30.10.2021\"},{\"appid\": 2546150,\"ordate\": \"30.10.2023\"},{\"appid\": 740170,\"ordate\": \"08.12.2017\"},{\"appid\": 2052770,\"ordate\": \"09.12.2022\"},{\"appid\": 1518940,\"ordate\": \"31.03.2021\"},{\"appid\": 359940,\"ordate\": \"19.03.2016\"},{\"appid\": 1189100,\"ordate\": \"26.09.2022\"},{\"appid\": 727180,\"ordate\": \"09.12.2017\"},{\"appid\": 357310,\"ordate\": \"20.09.2016\"},{\"appid\": 948470,\"ordate\": \"29.01.2019\"},{\"appid\": 1523510,\"ordate\": \"14.09.2021\"},{\"appid\": 1173200,\"ordate\": \"04.02.2020\"},{\"appid\": 970730,\"ordate\": \"08.12.2018\"},{\"appid\": 1574870,\"ordate\": \"25.07.2023\"},{\"appid\": 1019550,\"ordate\": \"12.11.2019\"},{\"appid\": 884340,\"ordate\": \"13.08.2019\"},{\"appid\": 1330660,\"ordate\": \"31.08.2021\"},{\"appid\": 1041690,\"ordate\": \"15.05.2019\"},{\"appid\": 840580,\"ordate\": \"14.05.2018\"},{\"appid\": 1158420,\"ordate\": \"23.11.2020\"},{\"appid\": 2157060,\"ordate\": \"20.01.2023\"},{\"appid\": 1669360,\"ordate\": \"16.09.2021\"},{\"appid\": 1830970,\"ordate\": \"17.01.2024\"},{\"appid\": 1115110,\"ordate\": \"03.01.2020\"},{\"appid\": 960140,\"ordate\": \"11.12.2019\"},{\"appid\": 1086410,\"ordate\": \"13.12.2019\"},{\"appid\": 752170,\"ordate\": \"24.04.2019\"},{\"appid\": 930600,\"ordate\": \"17.11.2018\"},{\"appid\": 684580,\"ordate\": \"03.05.2018\"},{\"appid\": 1919220,\"ordate\": \"15.03.2022\"},{\"appid\": 666140,\"ordate\": \"23.01.2018\"},{\"appid\": 351990,\"ordate\": \"21.05.2015\"},{\"appid\": 656490,\"ordate\": \"12.09.2017\"},{\"appid\": 1341650,\"ordate\": \"26.06.2020\"},{\"appid\": 1717080,\"ordate\": \"09.08.2023\"},{\"appid\": 1341660,\"ordate\": \"26.06.2020\"},{\"appid\": 2122010,\"ordate\": \"17.09.2022\"},{\"appid\": 1372320,\"ordate\": \"09.09.2020\"},{\"appid\": 1123770,\"ordate\": \"03.03.2020\"},{\"appid\": 1883800,\"ordate\": \"05.04.2023\"},{\"appid\": 1291010,\"ordate\": \"29.04.2021\"},{\"appid\": 1365600,\"ordate\": \"25.06.2021\"},{\"appid\": 1581890,\"ordate\": \"04.06.2021\"},{\"appid\": 2231170,\"ordate\": \"24.11.2023\"},{\"appid\": 383930,\"ordate\": \"20.08.2015\"},{\"appid\": 1081200,\"ordate\": \"21.09.2019\"},{\"appid\": 365190,\"ordate\": \"20.05.2015\"},{\"appid\": 362350,\"ordate\": \"08.05.2015\"},{\"appid\": 961420,\"ordate\": \"26.10.2018\"},{\"appid\": 1105600,\"ordate\": \"03.07.2019\"},{\"appid\": 1040420,\"ordate\": \"14.08.2020\"},{\"appid\": 2100730,\"ordate\": \"12.08.2022\"},{\"appid\": 655940,\"ordate\": \"09.08.2018\"},{\"appid\": 819400,\"ordate\": \"25.08.2018\"},{\"appid\": 1751850,\"ordate\": \"30.09.2021\"},{\"appid\": 2269680,\"ordate\": \"27.01.2023\"},{\"appid\": 804850,\"ordate\": \"09.05.2019\"},{\"appid\": 2188260,\"ordate\": \"21.11.2022\"},{\"appid\": 2090760,\"ordate\": \"24.08.2023\"},{\"appid\": 396650,\"ordate\": \"03.09.2015\"},{\"appid\": 2722760,\"ordate\": \"20.12.2023\"},{\"appid\": 1622920,\"ordate\": \"28.10.2021\"},{\"appid\": 2216770,\"ordate\": \"30.01.2024\"},{\"appid\": 403980,\"ordate\": \"17.11.2015\"},{\"appid\": 689040,\"ordate\": \"15.09.2017\"},{\"appid\": 2022060,\"ordate\": \"17.09.2022\"},{\"appid\": 1794600,\"ordate\": \"05.11.2021\"},{\"appid\": 2360260,\"ordate\": \"06.04.2023\"},{\"appid\": 1358990,\"ordate\": \"23.07.2020\"},{\"appid\": 1375900,\"ordate\": \"05.05.2023\"},{\"appid\": 1613470,\"ordate\": \"10.11.2022\"},{\"appid\": 986040,\"ordate\": \"07.11.2022\"},{\"appid\": 1231940,\"ordate\": \"26.05.2020\"},{\"appid\": 1274970,\"ordate\": \"21.08.2020\"},{\"appid\": 438320,\"ordate\": \"13.12.2016\"},{\"appid\": 705050,\"ordate\": \"01.11.2017\"},{\"appid\": 724000,\"ordate\": \"12.04.2022\"},{\"appid\": 1690990,\"ordate\": \"25.08.2021\"},{\"appid\": 2471650,\"ordate\": \"19.01.2024\"},{\"appid\": 968760,\"ordate\": \"29.04.2020\"},{\"appid\": 571660,\"ordate\": \"29.12.2016\"},{\"appid\": 601840,\"ordate\": \"14.06.2020\"},{\"appid\": 1020730,\"ordate\": \"26.07.2019\"},{\"appid\": 1293660,\"ordate\": \"21.06.2023\"},{\"appid\": 1349540,\"ordate\": \"03.09.2020\"},{\"appid\": 1818590,\"ordate\": \"19.01.2023\"},{\"appid\": 1936860,\"ordate\": \"18.04.2022\"},{\"appid\": 1825040,\"ordate\": \"31.08.2022\"},{\"appid\": 656350,\"ordate\": \"20.08.2019\"},{\"appid\": 1474220,\"ordate\": \"02.12.2020\"},{\"appid\": 2305900,\"ordate\": \"16.11.2023\"},{\"appid\": 702360,\"ordate\": \"28.12.2017\"},{\"appid\": 1881370,\"ordate\": \"08.02.2022\"},{\"appid\": 1098570,\"ordate\": \"31.07.2019\"},{\"appid\": 262060,\"ordate\": \"03.02.2015\"},{\"appid\": 1417750,\"ordate\": \"12.08.2022\"},{\"appid\": 342550,\"ordate\": \"30.04.2015\"},{\"appid\": 427240,\"ordate\": \"08.06.2016\"},{\"appid\": 1268810,\"ordate\": \"11.02.2021\"},{\"appid\": 933820,\"ordate\": \"02.04.2020\"},{\"appid\": 2024230,\"ordate\": \"23.06.2022\"},{\"appid\": 1227280,\"ordate\": \"14.10.2021\"},{\"appid\": 1661020,\"ordate\": \"25.08.2021\"},{\"appid\": 1985170,\"ordate\": \"19.10.2023\"},{\"appid\": 1201540,\"ordate\": \"17.02.2023\"},{\"appid\": 750800,\"ordate\": \"08.11.2018\"},{\"appid\": 263060,\"ordate\": \"06.06.2014\"},{\"appid\": 1193090,\"ordate\": \"29.09.2022\"},{\"appid\": 1512050,\"ordate\": \"01.05.2023\"},{\"appid\": 722290,\"ordate\": \"02.10.2018\"},{\"appid\": 500090,\"ordate\": \"29.12.2018\"},{\"appid\": 885950,\"ordate\": \"17.08.2018\"},{\"appid\": 1475460,\"ordate\": \"03.12.2020\"},{\"appid\": 481190,\"ordate\": \"14.10.2016\"},{\"appid\": 935980,\"ordate\": \"15.06.2019\"},{\"appid\": 1836030,\"ordate\": \"25.03.2022\"},{\"appid\": 1212370,\"ordate\": \"28.03.2020\"},{\"appid\": 1017340,\"ordate\": \"22.09.2022\"},{\"appid\": 484930,\"ordate\": \"02.12.2016\"},{\"appid\": 1369970,\"ordate\": \"17.06.2023\"},{\"appid\": 259470,\"ordate\": \"08.12.2013\"},{\"appid\": 1329510,\"ordate\": \"20.08.2020\"},{\"appid\": 2586310,\"ordate\": \"21.09.2023\"},{\"appid\": 1159860,\"ordate\": \"24.12.2020\"},{\"appid\": 2351890,\"ordate\": \"05.12.2023\"},{\"appid\": 1723930,\"ordate\": \"18.02.2022\"},{\"appid\": 237350,\"ordate\": \"10.03.2014\"},{\"appid\": 681530,\"ordate\": \"20.09.2017\"},{\"appid\": 911550,\"ordate\": \"17.09.2018\"},{\"appid\": 591680,\"ordate\": \"17.10.2017\"},{\"appid\": 345140,\"ordate\": \"20.04.2015\"},{\"appid\": 842140,\"ordate\": \"10.07.2018\"},{\"appid\": 1146210,\"ordate\": \"20.11.2019\"},{\"appid\": 466660,\"ordate\": \"28.09.2016\"},{\"appid\": 2094370,\"ordate\": \"16.10.2023\"},{\"appid\": 1131740,\"ordate\": \"13.08.2019\"},{\"appid\": 1175140,\"ordate\": \"04.11.2019\"},{\"appid\": 1944050,\"ordate\": \"28.04.2022\"},{\"appid\": 521620,\"ordate\": \"30.06.2020\"},{\"appid\": 877080,\"ordate\": \"04.07.2018\"},{\"appid\": 1401150,\"ordate\": \"25.09.2020\"},{\"appid\": 502780,\"ordate\": \"16.11.2016\"},{\"appid\": 943920,\"ordate\": \"23.10.2018\"},{\"appid\": 1377590,\"ordate\": \"31.08.2020\"},{\"appid\": 1932260,\"ordate\": \"18.08.2023\"},{\"appid\": 638020,\"ordate\": \"31.05.2017\"},{\"appid\": 671510,\"ordate\": \"08.02.2018\"},{\"appid\": 630030,\"ordate\": \"16.08.2017\"},{\"appid\": 1803390,\"ordate\": \"15.06.2023\"},{\"appid\": 389230,\"ordate\": \"08.10.2015\"},{\"appid\": 611060,\"ordate\": \"06.04.2017\"},{\"appid\": 941300,\"ordate\": \"22.03.2019\"},{\"appid\": 334040,\"ordate\": \"30.01.2015\"},{\"appid\": 1013600,\"ordate\": \"08.02.2019\"},{\"appid\": 1104690,\"ordate\": \"23.07.2019\"},{\"appid\": 1579920,\"ordate\": \"08.03.2022\"},{\"appid\": 1307760,\"ordate\": \"16.05.2020\"},{\"appid\": 305900,\"ordate\": \"03.02.2023\"},{\"appid\": 839330,\"ordate\": \"19.11.2021\"},{\"appid\": 1259440,\"ordate\": \"05.10.2021\"},{\"appid\": 1546280,\"ordate\": \"04.03.2021\"},{\"appid\": 1612570,\"ordate\": \"17.10.2023\"},{\"appid\": 1840140,\"ordate\": \"15.06.2023\"},{\"appid\": 1416180,\"ordate\": \"25.09.2020\"},{\"appid\": 2505430,\"ordate\": \"29.07.2023\"},{\"appid\": 1781960,\"ordate\": \"20.10.2022\"},{\"appid\": 1021680,\"ordate\": \"22.02.2019\"},{\"appid\": 2173680,\"ordate\": \"10.12.2022\"},{\"appid\": 721480,\"ordate\": \"19.10.2017\"},{\"appid\": 1163090,\"ordate\": \"11.04.2020\"},{\"appid\": 852220,\"ordate\": \"14.10.2020\"},{\"appid\": 2307890,\"ordate\": \"04.03.2023\"},{\"appid\": 544680,\"ordate\": \"07.12.2016\"},{\"appid\": 2408110,\"ordate\": \"08.06.2023\"},{\"appid\": 1978460,\"ordate\": \"25.10.2022\"},{\"appid\": 736340,\"ordate\": \"30.12.2017\"},{\"appid\": 680030,\"ordate\": \"24.09.2020\"},{\"appid\": 253190,\"ordate\": \"30.03.2015\"},{\"appid\": 2434620,\"ordate\": \"21.10.2023\"},{\"appid\": 1808460,\"ordate\": \"03.12.2021\"},{\"appid\": 977650,\"ordate\": \"22.10.2020\"},{\"appid\": 1769260,\"ordate\": \"05.11.2021\"},{\"appid\": 1295630,\"ordate\": \"15.02.2024\"},{\"appid\": 814550,\"ordate\": \"13.11.2020\"},{\"appid\": 572660,\"ordate\": \"27.12.2016\"},{\"appid\": 1811870,\"ordate\": \"11.12.2021\"},{\"appid\": 1198860,\"ordate\": \"07.12.2019\"},{\"appid\": 2599700,\"ordate\": \"23.10.2023\"},{\"appid\": 1686290,\"ordate\": \"28.05.2023\"},{\"appid\": 465240,\"ordate\": \"17.10.2016\"},{\"appid\": 1469690,\"ordate\": \"23.08.2021\"},{\"appid\": 878440,\"ordate\": \"12.08.2018\"},{\"appid\": 1674180,\"ordate\": \"18.08.2021\"},{\"appid\": 542030,\"ordate\": \"25.10.2016\"},{\"appid\": 1779760,\"ordate\": \"28.07.2023\"},{\"appid\": 2328710,\"ordate\": \"12.12.2023\"},{\"appid\": 563500,\"ordate\": \"16.08.2018\"},{\"appid\": 1203370,\"ordate\": \"19.02.2020\"},{\"appid\": 614260,\"ordate\": \"03.08.2017\"},{\"appid\": 386180,\"ordate\": \"24.08.2016\"},{\"appid\": 706840,\"ordate\": \"09.11.2017\"},{\"appid\": 594770,\"ordate\": \"06.08.2019\"},{\"appid\": 1927270,\"ordate\": \"23.04.2022\"},{\"appid\": 1926090,\"ordate\": \"18.07.2023\"},{\"appid\": 1147560,\"ordate\": \"19.02.2020\"},{\"appid\": 373880,\"ordate\": \"01.06.2015\"},{\"appid\": 1788390,\"ordate\": \"08.11.2021\"},{\"appid\": 282620,\"ordate\": \"30.07.2014\"},{\"appid\": 2415960,\"ordate\": \"18.07.2023\"},{\"appid\": 940870,\"ordate\": \"23.02.2019\"},{\"appid\": 384500,\"ordate\": \"10.07.2015\"},{\"appid\": 2547140,\"ordate\": \"08.09.2023\"},{\"appid\": 1832950,\"ordate\": \"11.10.2022\"},{\"appid\": 1561040,\"ordate\": \"25.05.2023\"},{\"appid\": 607720,\"ordate\": \"08.06.2017\"},{\"appid\": 1105590,\"ordate\": \"07.09.2021\"},{\"appid\": 1138080,\"ordate\": \"12.08.2019\"},{\"appid\": 1256480,\"ordate\": \"13.04.2020\"},{\"appid\": 1393660,\"ordate\": \"25.11.2020\"},{\"appid\": 2679860,\"ordate\": \"08.12.2023\"},{\"appid\": 490170,\"ordate\": \"21.06.2016\"},{\"appid\": 1099440,\"ordate\": \"24.10.2019\"},{\"appid\": 556860,\"ordate\": \"09.12.2016\"},{\"appid\": 1746520,\"ordate\": \"04.03.2022\"},{\"appid\": 1335500,\"ordate\": \"22.12.2020\"},{\"appid\": 1202410,\"ordate\": \"21.12.2020\"},{\"appid\": 1939940,\"ordate\": \"20.05.2022\"},{\"appid\": 1981570,\"ordate\": \"08.11.2022\"},{\"appid\": 1729410,\"ordate\": \"25.08.2022\"},{\"appid\": 1233040,\"ordate\": \"16.10.2021\"},{\"appid\": 732160,\"ordate\": \"07.03.2019\"},{\"appid\": 519860,\"ordate\": \"11.01.2018\"},{\"appid\": 2541590,\"ordate\": \"18.08.2023\"},{\"appid\": 417910,\"ordate\": \"18.01.2016\"},{\"appid\": 1003760,\"ordate\": \"27.04.2020\"},{\"appid\": 353630,\"ordate\": \"23.05.2015\"},{\"appid\": 505110,\"ordate\": \"03.10.2016\"},{\"appid\": 2765500,\"ordate\": \"07.02.2024\"},{\"appid\": 1167680,\"ordate\": \"22.04.2021\"},{\"appid\": 1974300,\"ordate\": \"27.07.2023\"},{\"appid\": 1029340,\"ordate\": \"27.03.2019\"},{\"appid\": 2248130,\"ordate\": \"12.12.2023\"},{\"appid\": 2220320,\"ordate\": \"17.12.2022\"},{\"appid\": 2121260,\"ordate\": \"09.12.2022\"},{\"appid\": 2530950,\"ordate\": \"26.02.2024\"},{\"appid\": 2071560,\"ordate\": \"18.07.2022\"},{\"appid\": 1646880,\"ordate\": \"25.06.2021\"},{\"appid\": 1096610,\"ordate\": \"19.08.2019\"},{\"appid\": 1835240,\"ordate\": \"03.04.2023\"},{\"appid\": 1698870,\"ordate\": \"08.04.2022\"},{\"appid\": 1855580,\"ordate\": \"28.10.2023\"},{\"appid\": 1141840,\"ordate\": \"13.12.2019\"},{\"appid\": 2078710,\"ordate\": \"20.10.2022\"},{\"appid\": 1968630,\"ordate\": \"27.03.2023\"},{\"appid\": 2488510,\"ordate\": \"23.10.2023\"},{\"appid\": 1844650,\"ordate\": \"07.01.2022\"},{\"appid\": 828350,\"ordate\": \"10.05.2018\"},{\"appid\": 2582540,\"ordate\": \"28.10.2023\"},{\"appid\": 1355200,\"ordate\": \"14.07.2023\"},{\"appid\": 1202790,\"ordate\": \"18.02.2020\"},{\"appid\": 1121590,\"ordate\": \"11.08.2019\"},{\"appid\": 2226750,\"ordate\": \"06.01.2023\"},{\"appid\": 270450,\"ordate\": \"28.03.2014\"},{\"appid\": 1688600,\"ordate\": \"20.04.2022\"},{\"appid\": 2583300,\"ordate\": \"22.09.2023\"},{\"appid\": 404200,\"ordate\": \"17.03.2017\"},{\"appid\": 2025660,\"ordate\": \"13.09.2022\"},{\"appid\": 409460,\"ordate\": \"04.12.2015\"},{\"appid\": 1264050,\"ordate\": \"26.03.2021\"},{\"appid\": 1803400,\"ordate\": \"03.11.2022\"},{\"appid\": 1090440,\"ordate\": \"12.12.2019\"},{\"appid\": 378070,\"ordate\": \"13.08.2015\"},{\"appid\": 391140,\"ordate\": \"01.03.2017\"},{\"appid\": 1120810,\"ordate\": \"14.08.2020\"},{\"appid\": 1191930,\"ordate\": \"15.01.2020\"},{\"appid\": 789760,\"ordate\": \"12.07.2018\"},{\"appid\": 1708570,\"ordate\": \"07.10.2021\"},{\"appid\": 1827640,\"ordate\": \"20.04.2023\"},{\"appid\": 1520710,\"ordate\": \"26.03.2021\"},{\"appid\": 1421200,\"ordate\": \"04.12.2020\"},{\"appid\": 931880,\"ordate\": \"31.12.2018\"},{\"appid\": 1707540,\"ordate\": \"19.08.2021\"},{\"appid\": 422510,\"ordate\": \"22.01.2019\"},{\"appid\": 1561350,\"ordate\": \"21.04.2021\"},{\"appid\": 2173480,\"ordate\": \"04.11.2022\"},{\"appid\": 844760,\"ordate\": \"14.05.2018\"},{\"appid\": 1078200,\"ordate\": \"07.10.2019\"},{\"appid\": 2057770,\"ordate\": \"29.11.2022\"},{\"appid\": 650810,\"ordate\": \"26.08.2017\"},{\"appid\": 2792830,\"ordate\": \"14.02.2024\"},{\"appid\": 1681840,\"ordate\": \"20.06.2022\"},{\"appid\": 643970,\"ordate\": \"18.10.2017\"},{\"appid\": 1786350,\"ordate\": \"31.10.2021\"},{\"appid\": 419130,\"ordate\": \"03.10.2018\"},{\"appid\": 626550,\"ordate\": \"08.11.2017\"},{\"appid\": 943710,\"ordate\": \"12.12.2018\"},{\"appid\": 2176020,\"ordate\": \"17.12.2022\"},{\"appid\": 253610,\"ordate\": \"11.11.2013\"},{\"appid\": 517460,\"ordate\": \"11.09.2016\"},{\"appid\": 768200,\"ordate\": \"29.03.2023\"},{\"appid\": 1313580,\"ordate\": \"31.07.2020\"},{\"appid\": 1062810,\"ordate\": \"22.05.2023\"},{\"appid\": 448320,\"ordate\": \"20.05.2016\"},{\"appid\": 1265690,\"ordate\": \"14.04.2020\"},{\"appid\": 1771180,\"ordate\": \"09.09.2022\"},{\"appid\": 1797300,\"ordate\": \"26.11.2021\"},{\"appid\": 1280270,\"ordate\": \"13.05.2020\"},{\"appid\": 1105740,\"ordate\": \"27.03.2020\"},{\"appid\": 1244800,\"ordate\": \"21.04.2022\"},{\"appid\": 814300,\"ordate\": \"06.04.2018\"},{\"appid\": 868260,\"ordate\": \"15.02.2019\"},{\"appid\": 1063710,\"ordate\": \"16.05.2019\"},{\"appid\": 319050,\"ordate\": \"09.12.2014\"},{\"appid\": 783430,\"ordate\": \"31.10.2019\"},{\"appid\": 1126890,\"ordate\": \"26.03.2020\"},{\"appid\": 1713810,\"ordate\": \"13.04.2022\"},{\"appid\": 816430,\"ordate\": \"15.10.2019\"},{\"appid\": 249050,\"ordate\": \"11.12.2013\"},{\"appid\": 1164480,\"ordate\": \"10.12.2019\"},{\"appid\": 2654120,\"ordate\": \"16.12.2023\"},{\"appid\": 932530,\"ordate\": \"01.03.2021\"},{\"appid\": 1797500,\"ordate\": \"02.08.2023\"},{\"appid\": 1026880,\"ordate\": \"27.02.2019\"},{\"appid\": 2768920,\"ordate\": \"03.02.2024\"},{\"appid\": 501310,\"ordate\": \"05.08.2016\"},{\"appid\": 1458540,\"ordate\": \"30.04.2021\"},{\"appid\": 1184010,\"ordate\": \"16.03.2020\"},{\"appid\": 2294950,\"ordate\": \"17.07.2023\"},{\"appid\": 1371610,\"ordate\": \"03.08.2020\"},{\"appid\": 2061720,\"ordate\": \"10.09.2022\"},{\"appid\": 2079600,\"ordate\": \"31.10.2022\"},{\"appid\": 2191310,\"ordate\": \"13.12.2022\"},{\"appid\": 1371600,\"ordate\": \"03.08.2020\"},{\"appid\": 1514850,\"ordate\": \"29.03.2024\"},{\"appid\": 1081070,\"ordate\": \"19.04.2020\"},{\"appid\": 2026000,\"ordate\": \"30.05.2023\"},{\"appid\": 2063580,\"ordate\": \"28.10.2022\"},{\"appid\": 2560520,\"ordate\": \"15.09.2023\"},{\"appid\": 661920,\"ordate\": \"18.10.2017\"},{\"appid\": 320340,\"ordate\": \"17.09.2014\"},{\"appid\": 1865890,\"ordate\": \"10.05.2022\"},{\"appid\": 1933290,\"ordate\": \"28.05.2022\"},{\"appid\": 1791620,\"ordate\": \"30.11.2021\"},{\"appid\": 1516610,\"ordate\": \"17.02.2021\"},{\"appid\": 1932960,\"ordate\": \"18.04.2023\"},{\"appid\": 570600,\"ordate\": \"20.12.2016\"},{\"appid\": 360170,\"ordate\": \"29.10.2015\"},{\"appid\": 2388600,\"ordate\": \"29.04.2023\"},{\"appid\": 2559050,\"ordate\": \"03.10.2023\"},{\"appid\": 698640,\"ordate\": \"15.11.2017\"},{\"appid\": 1074070,\"ordate\": \"30.09.2020\"},{\"appid\": 2418550,\"ordate\": \"23.07.2023\"},{\"appid\": 2764050,\"ordate\": \"28.02.2024\"},{\"appid\": 990920,\"ordate\": \"29.04.2022\"},{\"appid\": 408960,\"ordate\": \"14.10.2015\"},{\"appid\": 976680,\"ordate\": \"20.05.2020\"},{\"appid\": 1595510,\"ordate\": \"01.09.2021\"},{\"appid\": 2069960,\"ordate\": \"05.08.2022\"},{\"appid\": 494850,\"ordate\": \"20.07.2016\"},{\"appid\": 2570900,\"ordate\": \"05.01.2024\"},{\"appid\": 2492600,\"ordate\": \"27.10.2023\"},{\"appid\": 619140,\"ordate\": \"09.04.2017\"},{\"appid\": 1017670,\"ordate\": \"14.02.2019\"},{\"appid\": 744900,\"ordate\": \"05.09.2018\"},{\"appid\": 374460,\"ordate\": \"29.09.2016\"},{\"appid\": 1751350,\"ordate\": \"09.11.2023\"},{\"appid\": 2669390,\"ordate\": \"08.02.2024\"},{\"appid\": 1927250,\"ordate\": \"08.04.2022\"},{\"appid\": 2058570,\"ordate\": \"25.03.2024\"},{\"appid\": 241240,\"ordate\": \"29.08.2013\"},{\"appid\": 827420,\"ordate\": \"07.04.2018\"},{\"appid\": 2281410,\"ordate\": \"31.03.2023\"},{\"appid\": 845690,\"ordate\": \"20.12.2018\"},{\"appid\": 673190,\"ordate\": \"04.09.2017\"},{\"appid\": 1203600,\"ordate\": \"15.04.2020\"},{\"appid\": 839930,\"ordate\": \"28.04.2018\"},{\"appid\": 1159680,\"ordate\": \"11.04.2020\"},{\"appid\": 1478160,\"ordate\": \"05.08.2022\"},{\"appid\": 1276070,\"ordate\": \"09.10.2021\"},{\"appid\": 553470,\"ordate\": \"15.11.2016\"},{\"appid\": 476670,\"ordate\": \"20.11.2016\"},{\"appid\": 2593850,\"ordate\": \"15.12.2023\"},{\"appid\": 1688350,\"ordate\": \"05.09.2023\"},{\"appid\": 1485080,\"ordate\": \"18.05.2021\"},{\"appid\": 1732920,\"ordate\": \"14.11.2022\"},{\"appid\": 1892900,\"ordate\": \"03.05.2023\"},{\"appid\": 2582100,\"ordate\": \"27.09.2023\"},{\"appid\": 699770,\"ordate\": \"12.12.2017\"},{\"appid\": 2114380,\"ordate\": \"22.09.2023\"},{\"appid\": 812040,\"ordate\": \"09.10.2018\"},{\"appid\": 2363790,\"ordate\": \"21.07.2023\"},{\"appid\": 1389360,\"ordate\": \"10.08.2021\"},{\"appid\": 803800,\"ordate\": \"20.01.2019\"},{\"appid\": 575090,\"ordate\": \"02.02.2017\"},{\"appid\": 758250,\"ordate\": \"04.12.2018\"},{\"appid\": 348030,\"ordate\": \"27.05.2015\"},{\"appid\": 1063540,\"ordate\": \"05.12.2022\"},{\"appid\": 1049910,\"ordate\": \"13.04.2019\"},{\"appid\": 574140,\"ordate\": \"31.03.2017\"},{\"appid\": 906790,\"ordate\": \"30.05.2019\"},{\"appid\": 869400,\"ordate\": \"06.10.2022\"},{\"appid\": 1729290,\"ordate\": \"27.12.2021\"},{\"appid\": 1078490,\"ordate\": \"18.07.2019\"},{\"appid\": 2358770,\"ordate\": \"17.08.2023\"},{\"appid\": 621060,\"ordate\": \"27.03.2018\"},{\"appid\": 1903530,\"ordate\": \"15.03.2022\"},{\"appid\": 551700,\"ordate\": \"31.07.2017\"},{\"appid\": 552920,\"ordate\": \"25.04.2017\"},{\"appid\": 366620,\"ordate\": \"04.08.2015\"},{\"appid\": 511250,\"ordate\": \"21.09.2016\"},{\"appid\": 2244660,\"ordate\": \"15.02.2023\"},{\"appid\": 1564450,\"ordate\": \"12.04.2021\"},{\"appid\": 762030,\"ordate\": \"28.07.2018\"},{\"appid\": 704470,\"ordate\": \"06.01.2018\"},{\"appid\": 2220570,\"ordate\": \"26.09.2023\"},{\"appid\": 1346130,\"ordate\": \"28.10.2020\"},{\"appid\": 1997040,\"ordate\": \"18.10.2022\"},{\"appid\": 1772910,\"ordate\": \"11.08.2022\"},{\"appid\": 285820,\"ordate\": \"08.07.2014\"},{\"appid\": 957570,\"ordate\": \"08.11.2018\"},{\"appid\": 1938380,\"ordate\": \"11.04.2022\"},{\"appid\": 400080,\"ordate\": \"25.04.2019\"},{\"appid\": 837350,\"ordate\": \"21.10.2022\"},{\"appid\": 1794680,\"ordate\": \"17.12.2021\"},{\"appid\": 2371310,\"ordate\": \"15.09.2023\"},{\"appid\": 1497710,\"ordate\": \"27.08.2021\"},{\"appid\": 877870,\"ordate\": \"15.10.2020\"},{\"appid\": 2549200,\"ordate\": \"06.04.2024\"},{\"appid\": 693960,\"ordate\": \"28.07.2018\"},{\"appid\": 1419150,\"ordate\": \"17.12.2021\"},{\"appid\": 1908460,\"ordate\": \"03.03.2022\"},{\"appid\": 869750,\"ordate\": \"18.04.2019\"},{\"appid\": 1955440,\"ordate\": \"18.05.2022\"},{\"appid\": 2614800,\"ordate\": \"20.10.2023\"},{\"appid\": 519190,\"ordate\": \"20.07.2017\"},{\"appid\": 370940,\"ordate\": \"25.06.2015\"},{\"appid\": 1229010,\"ordate\": \"20.04.2020\"},{\"appid\": 2175790,\"ordate\": \"16.12.2022\"},{\"appid\": 691320,\"ordate\": \"27.10.2017\"},{\"appid\": 849140,\"ordate\": \"24.08.2020\"},{\"appid\": 2611550,\"ordate\": \"13.10.2023\"},{\"appid\": 1095750,\"ordate\": \"19.06.2019\"},{\"appid\": 746940,\"ordate\": \"16.02.2018\"},{\"appid\": 920680,\"ordate\": \"17.09.2018\"},{\"appid\": 759830,\"ordate\": \"06.02.2018\"},{\"appid\": 875320,\"ordate\": \"30.11.2018\"},{\"appid\": 1218110,\"ordate\": \"12.02.2020\"},{\"appid\": 2089340,\"ordate\": \"29.07.2022\"},{\"appid\": 1202400,\"ordate\": \"04.02.2020\"},{\"appid\": 1972410,\"ordate\": \"12.01.2023\"},{\"appid\": 1044900,\"ordate\": \"04.01.2020\"},{\"appid\": 2341540,\"ordate\": \"27.03.2023\"},{\"appid\": 2013240,\"ordate\": \"13.09.2023\"},{\"appid\": 2725260,\"ordate\": \"25.03.2024\"},{\"appid\": 1546930,\"ordate\": \"04.03.2021\"},{\"appid\": 2098390,\"ordate\": \"15.12.2022\"},{\"appid\": 346370,\"ordate\": \"03.02.2015\"},{\"appid\": 1004620,\"ordate\": \"13.04.2021\"},{\"appid\": 964240,\"ordate\": \"02.01.2019\"},{\"appid\": 1357670,\"ordate\": \"17.08.2020\"},{\"appid\": 1550010,\"ordate\": \"01.05.2023\"},{\"appid\": 1930920,\"ordate\": \"30.03.2022\"},{\"appid\": 383580,\"ordate\": \"07.07.2015\"},{\"appid\": 959130,\"ordate\": \"05.11.2018\"},{\"appid\": 375210,\"ordate\": \"23.06.2015\"},{\"appid\": 2423620,\"ordate\": \"28.07.2023\"},{\"appid\": 1252170,\"ordate\": \"27.04.2020\"},{\"appid\": 566420,\"ordate\": \"23.12.2016\"},{\"appid\": 279140,\"ordate\": \"04.04.2014\"},{\"appid\": 580040,\"ordate\": \"10.02.2017\"},{\"appid\": 981880,\"ordate\": \"12.09.2019\"},{\"appid\": 968970,\"ordate\": \"30.04.2020\"},{\"appid\": 1094710,\"ordate\": \"28.04.2020\"},{\"appid\": 1456230,\"ordate\": \"20.03.2021\"},{\"appid\": 1437750,\"ordate\": \"06.12.2021\"},{\"appid\": 1005400,\"ordate\": \"30.10.2020\"},{\"appid\": 1231460,\"ordate\": \"15.01.2021\"},{\"appid\": 960150,\"ordate\": \"27.02.2019\"},{\"appid\": 661200,\"ordate\": \"08.08.2019\"},{\"appid\": 833030,\"ordate\": \"04.05.2018\"},{\"appid\": 468330,\"ordate\": \"08.09.2017\"},{\"appid\": 1334000,\"ordate\": \"16.06.2020\"},{\"appid\": 1565060,\"ordate\": \"31.12.2021\"},{\"appid\": 1265650,\"ordate\": \"10.06.2021\"},{\"appid\": 1448610,\"ordate\": \"26.09.2021\"},{\"appid\": 1589490,\"ordate\": \"11.11.2021\"},{\"appid\": 1970440,\"ordate\": \"06.05.2022\"},{\"appid\": 1842050,\"ordate\": \"06.01.2022\"},{\"appid\": 840430,\"ordate\": \"21.02.2019\"},{\"appid\": 382050,\"ordate\": \"29.08.2015\"},{\"appid\": 686200,\"ordate\": \"17.11.2017\"},{\"appid\": 948880,\"ordate\": \"27.03.2023\"},{\"appid\": 2062660,\"ordate\": \"05.07.2022\"},{\"appid\": 683940,\"ordate\": \"10.06.2019\"},{\"appid\": 1234940,\"ordate\": \"31.03.2020\"},{\"appid\": 1972020,\"ordate\": \"15.05.2022\"},{\"appid\": 2696780,\"ordate\": \"30.03.2024\"},{\"appid\": 2191820,\"ordate\": \"15.11.2022\"},{\"appid\": 946990,\"ordate\": \"22.06.2020\"},{\"appid\": 1847250,\"ordate\": \"14.04.2022\"},{\"appid\": 330450,\"ordate\": \"24.12.2014\"},{\"appid\": 621880,\"ordate\": \"17.08.2017\"},{\"appid\": 1144510,\"ordate\": \"25.09.2019\"},{\"appid\": 552110,\"ordate\": \"14.09.2017\"},{\"appid\": 619150,\"ordate\": \"28.03.2018\"},{\"appid\": 771810,\"ordate\": \"09.04.2018\"},{\"appid\": 2365860,\"ordate\": \"10.04.2023\"},{\"appid\": 1377030,\"ordate\": \"17.11.2020\"},{\"appid\": 377570,\"ordate\": \"08.06.2015\"},{\"appid\": 618670,\"ordate\": \"08.05.2017\"},{\"appid\": 980640,\"ordate\": \"31.03.2021\"},{\"appid\": 2189670,\"ordate\": \"29.08.2023\"},{\"appid\": 864610,\"ordate\": \"01.02.2019\"},{\"appid\": 1622640,\"ordate\": \"07.11.2021\"},{\"appid\": 1763290,\"ordate\": \"30.06.2022\"},{\"appid\": 929490,\"ordate\": \"24.11.2020\"},{\"appid\": 2318100,\"ordate\": \"30.04.2023\"},{\"appid\": 1774630,\"ordate\": \"11.10.2022\"},{\"appid\": 239840,\"ordate\": \"13.02.2014\"},{\"appid\": 394430,\"ordate\": \"16.02.2017\"},{\"appid\": 612470,\"ordate\": \"18.05.2017\"},{\"appid\": 476030,\"ordate\": \"16.06.2016\"},{\"appid\": 416180,\"ordate\": \"02.12.2015\"},{\"appid\": 1280940,\"ordate\": \"27.07.2020\"},{\"appid\": 2065000,\"ordate\": \"10.11.2022\"},{\"appid\": 684040,\"ordate\": \"24.08.2017\"},{\"appid\": 916180,\"ordate\": \"14.11.2019\"},{\"appid\": 783790,\"ordate\": \"13.02.2018\"},{\"appid\": 1007070,\"ordate\": \"24.05.2019\"},{\"appid\": 1141160,\"ordate\": \"15.04.2020\"},{\"appid\": 792940,\"ordate\": \"04.08.2018\"},{\"appid\": 1225250,\"ordate\": \"01.07.2020\"},{\"appid\": 493080,\"ordate\": \"20.01.2017\"},{\"appid\": 1304930,\"ordate\": \"18.05.2023\"},{\"appid\": 1767730,\"ordate\": \"18.10.2021\"},{\"appid\": 1924100,\"ordate\": \"30.03.2022\"},{\"appid\": 2489560,\"ordate\": \"03.11.2023\"},{\"appid\": 2284390,\"ordate\": \"01.03.2023\"},{\"appid\": 680860,\"ordate\": \"28.08.2017\"},{\"appid\": 873220,\"ordate\": \"16.06.2018\"},{\"appid\": 2228210,\"ordate\": \"30.03.2023\"},{\"appid\": 1035510,\"ordate\": \"21.02.2020\"},{\"appid\": 872220,\"ordate\": \"30.05.2019\"},{\"appid\": 1638390,\"ordate\": \"30.03.2022\"},{\"appid\": 2327780,\"ordate\": \"27.06.2023\"},{\"appid\": 2665150,\"ordate\": \"03.01.2024\"},{\"appid\": 492200,\"ordate\": \"21.06.2016\"},{\"appid\": 2848460,\"ordate\": \"19.04.2024\"},{\"appid\": 542400,\"ordate\": \"22.11.2016\"},{\"appid\": 2814950,\"ordate\": \"26.04.2024\"},{\"appid\": 981250,\"ordate\": \"28.01.2019\"},{\"appid\": 1772480,\"ordate\": \"19.12.2021\"},{\"appid\": 718010,\"ordate\": \"05.12.2017\"},{\"appid\": 556820,\"ordate\": \"30.11.2016\"},{\"appid\": 733300,\"ordate\": \"24.01.2018\"},{\"appid\": 446550,\"ordate\": \"09.10.2016\"},{\"appid\": 535410,\"ordate\": \"17.10.2016\"},{\"appid\": 1433900,\"ordate\": \"26.11.2020\"},{\"appid\": 837430,\"ordate\": \"13.12.2018\"},{\"appid\": 522210,\"ordate\": \"29.09.2016\"},{\"appid\": 1153930,\"ordate\": \"04.10.2019\"},{\"appid\": 1113770,\"ordate\": \"30.07.2019\"},{\"appid\": 2446700,\"ordate\": \"11.07.2023\"},{\"appid\": 2082420,\"ordate\": \"02.06.2023\"},{\"appid\": 2628680,\"ordate\": \"28.10.2023\"},{\"appid\": 2843050,\"ordate\": \"02.05.2024\"},{\"appid\": 1306770,\"ordate\": \"28.06.2023\"},{\"appid\": 803310,\"ordate\": \"19.03.2018\"},{\"appid\": 1984260,\"ordate\": \"03.08.2022\"},{\"appid\": 431810,\"ordate\": \"23.01.2016\"},{\"appid\": 1924010,\"ordate\": \"19.07.2022\"},{\"appid\": 871930,\"ordate\": \"09.08.2018\"},{\"appid\": 310850,\"ordate\": \"14.11.2014\"},{\"appid\": 1707650,\"ordate\": \"27.05.2022\"},{\"appid\": 1503580,\"ordate\": \"01.01.2021\"},{\"appid\": 1097960,\"ordate\": \"05.07.2019\"},{\"appid\": 2455070,\"ordate\": \"27.08.2023\"},{\"appid\": 520750,\"ordate\": \"15.12.2016\"},{\"appid\": 1454540,\"ordate\": \"17.11.2022\"},{\"appid\": 2226920,\"ordate\": \"21.12.2022\"},{\"appid\": 2330770,\"ordate\": \"06.05.2023\"},{\"appid\": 801890,\"ordate\": \"03.03.2018\"},{\"appid\": 2522270,\"ordate\": \"25.08.2023\"},{\"appid\": 1937540,\"ordate\": \"26.03.2024\"},{\"appid\": 1059740,\"ordate\": \"16.01.2021\"},{\"appid\": 690610,\"ordate\": \"28.09.2017\"},{\"appid\": 1124080,\"ordate\": \"22.04.2022\"},{\"appid\": 1077250,\"ordate\": \"21.06.2019\"},{\"appid\": 356870,\"ordate\": \"29.10.2015\"},{\"appid\": 2507400,\"ordate\": \"07.03.2024\"},{\"appid\": 2286450,\"ordate\": \"20.02.2023\"},{\"appid\": 2405270,\"ordate\": \"28.07.2023\"},{\"appid\": 1091110,\"ordate\": \"19.06.2019\"},{\"appid\": 1422280,\"ordate\": \"28.12.2020\"},{\"appid\": 1802930,\"ordate\": \"14.11.2021\"},{\"appid\": 1305640,\"ordate\": \"17.11.2022\"},{\"appid\": 2557510,\"ordate\": \"19.09.2023\"},{\"appid\": 1898420,\"ordate\": \"25.08.2022\"},{\"appid\": 1986010,\"ordate\": \"08.07.2022\"},{\"appid\": 1169690,\"ordate\": \"09.11.2020\"},{\"appid\": 1278190,\"ordate\": \"10.04.2020\"},{\"appid\": 2060240,\"ordate\": \"14.10.2022\"},{\"appid\": 1643820,\"ordate\": \"21.01.2022\"},{\"appid\": 547970,\"ordate\": \"03.01.2017\"},{\"appid\": 2516430,\"ordate\": \"06.11.2023\"},{\"appid\": 1593170,\"ordate\": \"23.06.2022\"},{\"appid\": 873470,\"ordate\": \"10.01.2019\"},{\"appid\": 2224020,\"ordate\": \"20.02.2023\"},{\"appid\": 1343750,\"ordate\": \"03.03.2021\"},{\"appid\": 1477050,\"ordate\": \"08.12.2020\"},{\"appid\": 2324380,\"ordate\": \"30.03.2023\"},{\"appid\": 1676130,\"ordate\": \"18.10.2022\"},{\"appid\": 1570330,\"ordate\": \"14.06.2022\"},{\"appid\": 1145360,\"ordate\": \"10.12.2019\"},{\"appid\": 1359730,\"ordate\": \"08.11.2023\"},{\"appid\": 1516560,\"ordate\": \"26.03.2021\"},{\"appid\": 1799290,\"ordate\": \"14.12.2021\"},{\"appid\": 425650,\"ordate\": \"19.01.2016\"},{\"appid\": 1305390,\"ordate\": \"21.07.2020\"},{\"appid\": 1265820,\"ordate\": \"24.02.2021\"},{\"appid\": 250560,\"ordate\": \"27.02.2014\"},{\"appid\": 1162430,\"ordate\": \"03.10.2019\"},{\"appid\": 2195690,\"ordate\": \"22.11.2022\"},{\"appid\": 558750,\"ordate\": \"15.05.2017\"},{\"appid\": 998950,\"ordate\": \"07.03.2019\"},{\"appid\": 240760,\"ordate\": \"13.12.2013\"},{\"appid\": 845050,\"ordate\": \"09.09.2019\"},{\"appid\": 344760,\"ordate\": \"11.03.2015\"},{\"appid\": 1298310,\"ordate\": \"15.10.2020\"},{\"appid\": 2164780,\"ordate\": \"13.10.2022\"},{\"appid\": 1228410,\"ordate\": \"27.02.2020\"},{\"appid\": 2070220,\"ordate\": \"14.11.2022\"},{\"appid\": 864680,\"ordate\": \"06.02.2020\"},{\"appid\": 1039870,\"ordate\": \"05.04.2019\"},{\"appid\": 1113240,\"ordate\": \"19.07.2019\"},{\"appid\": 1739880,\"ordate\": \"19.10.2021\"},{\"appid\": 246940,\"ordate\": \"07.12.2013\"},{\"appid\": 247080,\"ordate\": \"18.07.2014\"},{\"appid\": 1859490,\"ordate\": \"01.04.2022\"},{\"appid\": 1554010,\"ordate\": \"24.12.2022\"},{\"appid\": 2385800,\"ordate\": \"27.04.2023\"},{\"appid\": 1329350,\"ordate\": \"15.10.2020\"},{\"appid\": 698790,\"ordate\": \"15.12.2017\"},{\"appid\": 2225220,\"ordate\": \"03.03.2023\"},{\"appid\": 1297490,\"ordate\": \"16.11.2022\"},{\"appid\": 1323470,\"ordate\": \"13.05.2021\"},{\"appid\": 1418630,\"ordate\": \"22.04.2021\"},{\"appid\": 527430,\"ordate\": \"31.08.2017\"},{\"appid\": 1106340,\"ordate\": \"27.11.2020\"},{\"appid\": 2233150,\"ordate\": \"26.11.2023\"},{\"appid\": 335700,\"ordate\": \"23.10.2015\"},{\"appid\": 818780,\"ordate\": \"12.07.2018\"},{\"appid\": 264000,\"ordate\": \"24.07.2014\"},{\"appid\": 1619970,\"ordate\": \"18.06.2021\"},{\"appid\": 821490,\"ordate\": \"19.03.2020\"},{\"appid\": 1222000,\"ordate\": \"26.01.2020\"},{\"appid\": 1679290,\"ordate\": \"15.07.2022\"},{\"appid\": 1887930,\"ordate\": \"11.02.2022\"},{\"appid\": 1490330,\"ordate\": \"11.01.2021\"},{\"appid\": 502740,\"ordate\": \"23.08.2016\"},{\"appid\": 906660,\"ordate\": \"17.12.2018\"},{\"appid\": 1060980,\"ordate\": \"21.09.2019\"},{\"appid\": 635880,\"ordate\": \"23.06.2017\"},{\"appid\": 839300,\"ordate\": \"29.05.2018\"},{\"appid\": 408920,\"ordate\": \"09.10.2015\"},{\"appid\": 1102680,\"ordate\": \"21.08.2019\"},{\"appid\": 992250,\"ordate\": \"31.07.2019\"},{\"appid\": 1518680,\"ordate\": \"08.02.2021\"},{\"appid\": 1668170,\"ordate\": \"02.11.2021\"},{\"appid\": 1169740,\"ordate\": \"22.06.2020\"},{\"appid\": 1510070,\"ordate\": \"05.11.2022\"},{\"appid\": 919370,\"ordate\": \"20.11.2018\"},{\"appid\": 1054290,\"ordate\": \"29.04.2019\"},{\"appid\": 1988020,\"ordate\": \"13.06.2022\"},{\"appid\": 787840,\"ordate\": \"12.04.2018\"},{\"appid\": 381120,\"ordate\": \"20.08.2015\"},{\"appid\": 760510,\"ordate\": \"05.06.2018\"},{\"appid\": 1282610,\"ordate\": \"06.06.2020\"},{\"appid\": 1694430,\"ordate\": \"31.10.2021\"},{\"appid\": 411980,\"ordate\": \"19.03.2018\"},{\"appid\": 2598930,\"ordate\": \"20.11.2023\"},{\"appid\": 807120,\"ordate\": \"24.07.2019\"},{\"appid\": 779730,\"ordate\": \"09.02.2018\"},{\"appid\": 731620,\"ordate\": \"01.08.2019\"},{\"appid\": 1181790,\"ordate\": \"17.01.2020\"},{\"appid\": 596740,\"ordate\": \"28.12.2017\"},{\"appid\": 2519370,\"ordate\": \"27.08.2023\"},{\"appid\": 1225610,\"ordate\": \"02.03.2020\"},{\"appid\": 1492360,\"ordate\": \"04.11.2021\"},{\"appid\": 578080,\"ordate\": \"23.03.2017\"},{\"appid\": 318090,\"ordate\": \"23.10.2015\"},{\"appid\": 452410,\"ordate\": \"19.01.2018\"},{\"appid\": 468920,\"ordate\": \"30.11.2017\"},{\"appid\": 496460,\"ordate\": \"26.08.2016\"},{\"appid\": 512410,\"ordate\": \"09.09.2016\"},{\"appid\": 599080,\"ordate\": \"30.10.2018\"},{\"appid\": 959800,\"ordate\": \"10.05.2024\"},{\"appid\": 1851610,\"ordate\": \"16.03.2023\"},{\"appid\": 2300160,\"ordate\": \"25.05.2023\"},{\"appid\": 2395190,\"ordate\": \"19.05.2023\"},{\"appid\": 1011290,\"ordate\": \"29.08.2019\"},{\"appid\": 2052760,\"ordate\": \"06.03.2023\"},{\"appid\": 2017840,\"ordate\": \"06.01.2023\"},{\"appid\": 2067940,\"ordate\": \"12.05.2023\"},{\"appid\": 1022710,\"ordate\": \"23.05.2019\"},{\"appid\": 2620340,\"ordate\": \"25.10.2023\"},{\"appid\": 254320,\"ordate\": \"20.08.2015\"},{\"appid\": 906930,\"ordate\": \"01.06.2022\"},{\"appid\": 617480,\"ordate\": \"14.07.2017\"},{\"appid\": 2802070,\"ordate\": \"08.02.2024\"},{\"appid\": 917850,\"ordate\": \"20.10.2018\"},{\"appid\": 244590,\"ordate\": \"02.11.2013\"},{\"appid\": 1493160,\"ordate\": \"23.04.2021\"},{\"appid\": 2618170,\"ordate\": \"25.01.2024\"},{\"appid\": 1576370,\"ordate\": \"12.08.2021\"},{\"appid\": 1458690,\"ordate\": \"24.02.2021\"},{\"appid\": 2165620,\"ordate\": \"07.09.2023\"},{\"appid\": 500260,\"ordate\": \"18.05.2017\"},{\"appid\": 446000,\"ordate\": \"09.03.2016\"},{\"appid\": 1900720,\"ordate\": \"06.06.2022\"},{\"appid\": 966470,\"ordate\": \"23.10.2020\"},{\"appid\": 2815370,\"ordate\": \"15.04.2024\"},{\"appid\": 656030,\"ordate\": \"18.12.2017\"},{\"appid\": 1443600,\"ordate\": \"24.06.2021\"},{\"appid\": 2005790,\"ordate\": \"20.10.2022\"},{\"appid\": 2107130,\"ordate\": \"05.09.2022\"},{\"appid\": 2153390,\"ordate\": \"29.09.2022\"},{\"appid\": 2889870,\"ordate\": \"14.04.2024\"},{\"appid\": 431830,\"ordate\": \"18.03.2016\"},{\"appid\": 532120,\"ordate\": \"19.11.2016\"},{\"appid\": 1454650,\"ordate\": \"29.04.2021\"},{\"appid\": 2192570,\"ordate\": \"09.01.2023\"},{\"appid\": 1290170,\"ordate\": \"29.05.2020\"},{\"appid\": 1901810,\"ordate\": \"24.02.2023\"},{\"appid\": 920710,\"ordate\": \"07.02.2019\"},{\"appid\": 2272630,\"ordate\": \"20.10.2023\"},{\"appid\": 288860,\"ordate\": \"14.11.2016\"},{\"appid\": 612840,\"ordate\": \"21.04.2017\"},{\"appid\": 1066630,\"ordate\": \"17.09.2019\"},{\"appid\": 296870,\"ordate\": \"17.06.2014\"},{\"appid\": 1775770,\"ordate\": \"15.10.2021\"},{\"appid\": 1791910,\"ordate\": \"20.10.2023\"},{\"appid\": 835570,\"ordate\": \"11.07.2019\"},{\"appid\": 1000860,\"ordate\": \"22.01.2019\"},{\"appid\": 2392490,\"ordate\": \"04.05.2023\"},{\"appid\": 1603720,\"ordate\": \"19.02.2022\"},{\"appid\": 1942280,\"ordate\": \"27.09.2022\"},{\"appid\": 2139440,\"ordate\": \"09.01.2023\"},{\"appid\": 415270,\"ordate\": \"15.12.2015\"},{\"appid\": 2104270,\"ordate\": \"06.09.2022\"},{\"appid\": 411970,\"ordate\": \"20.03.2017\"},{\"appid\": 2095740,\"ordate\": \"12.08.2022\"},{\"appid\": 1976590,\"ordate\": \"21.06.2022\"},{\"appid\": 1649500,\"ordate\": \"03.10.2023\"},{\"appid\": 315680,\"ordate\": \"10.08.2014\"},{\"appid\": 1668690,\"ordate\": \"19.01.2022\"},{\"appid\": 2578880,\"ordate\": \"25.04.2024\"},{\"appid\": 411960,\"ordate\": \"21.03.2016\"},{\"appid\": 1079300,\"ordate\": \"21.03.2023\"},{\"appid\": 243970,\"ordate\": \"19.08.2014\"},{\"appid\": 1595410,\"ordate\": \"17.05.2021\"},{\"appid\": 340490,\"ordate\": \"30.04.2015\"},{\"appid\": 569720,\"ordate\": \"13.10.2017\"},{\"appid\": 2649780,\"ordate\": \"16.11.2023\"},{\"appid\": 1100990,\"ordate\": \"21.08.2019\"},{\"appid\": 796590,\"ordate\": \"24.10.2019\"},{\"appid\": 2695490,\"ordate\": \"25.04.2024\"},{\"appid\": 1137460,\"ordate\": \"19.02.2021\"},{\"appid\": 1289810,\"ordate\": \"12.03.2021\"},{\"appid\": 851930,\"ordate\": \"10.12.2018\"},{\"appid\": 356180,\"ordate\": \"28.08.2015\"},{\"appid\": 269650,\"ordate\": \"15.08.2014\"},{\"appid\": 648150,\"ordate\": \"25.04.2020\"},{\"appid\": 1264730,\"ordate\": \"14.08.2020\"},{\"appid\": 864970,\"ordate\": \"18.06.2018\"},{\"appid\": 2832560,\"ordate\": \"01.03.2024\"},{\"appid\": 2145720,\"ordate\": \"16.03.2023\"},{\"appid\": 765370,\"ordate\": \"08.04.2018\"},{\"appid\": 1275850,\"ordate\": \"16.04.2020\"},{\"appid\": 1763990,\"ordate\": \"03.12.2021\"},{\"appid\": 1269720,\"ordate\": \"28.06.2021\"},{\"appid\": 741430,\"ordate\": \"25.11.2017\"},{\"appid\": 2146720,\"ordate\": \"22.11.2022\"},{\"appid\": 798790,\"ordate\": \"01.03.2018\"},{\"appid\": 1627850,\"ordate\": \"14.05.2022\"},{\"appid\": 2516980,\"ordate\": \"28.02.2024\"},{\"appid\": 1335240,\"ordate\": \"20.09.2020\"},{\"appid\": 493790,\"ordate\": \"31.03.2017\"},{\"appid\": 1448820,\"ordate\": \"16.02.2023\"},{\"appid\": 2639100,\"ordate\": \"21.12.2023\"},{\"appid\": 1463180,\"ordate\": \"15.12.2020\"},{\"appid\": 840300,\"ordate\": \"19.05.2018\"},{\"appid\": 753370,\"ordate\": \"18.12.2017\"},{\"appid\": 1498600,\"ordate\": \"11.02.2021\"},{\"appid\": 1442040,\"ordate\": \"01.09.2021\"},{\"appid\": 2207490,\"ordate\": \"20.04.2023\"},{\"appid\": 1408680,\"ordate\": \"26.08.2021\"},{\"appid\": 313080,\"ordate\": \"15.09.2014\"},{\"appid\": 1040070,\"ordate\": \"30.07.2019\"},{\"appid\": 1187920,\"ordate\": \"03.09.2020\"},{\"appid\": 890310,\"ordate\": \"26.03.2019\"},{\"appid\": 418180,\"ordate\": \"05.12.2015\"},{\"appid\": 664750,\"ordate\": \"23.08.2017\"},{\"appid\": 1573700,\"ordate\": \"23.03.2021\"},{\"appid\": 1102740,\"ordate\": \"02.08.2019\"},{\"appid\": 1425580,\"ordate\": \"31.01.2021\"},{\"appid\": 553660,\"ordate\": \"20.07.2017\"},{\"appid\": 436230,\"ordate\": \"31.08.2016\"},{\"appid\": 335620,\"ordate\": \"14.11.2017\"},{\"appid\": 590910,\"ordate\": \"17.05.2017\"},{\"appid\": 434510,\"ordate\": \"26.09.2016\"},{\"appid\": 689270,\"ordate\": \"04.01.2018\"},{\"appid\": 527320,\"ordate\": \"12.05.2017\"},{\"appid\": 1073320,\"ordate\": \"06.11.2019\"},{\"appid\": 611260,\"ordate\": \"28.02.2019\"},{\"appid\": 297060,\"ordate\": \"21.05.2014\"},{\"appid\": 2483070,\"ordate\": \"14.07.2023\"},{\"appid\": 600460,\"ordate\": \"29.11.2017\"},{\"appid\": 2323810,\"ordate\": \"30.05.2023\"},{\"appid\": 1418020,\"ordate\": \"04.12.2020\"},{\"appid\": 388370,\"ordate\": \"25.10.2016\"},{\"appid\": 268870,\"ordate\": \"12.12.2014\"},{\"appid\": 805550,\"ordate\": \"12.09.2018\"},{\"appid\": 1704080,\"ordate\": \"20.09.2021\"},{\"appid\": 1409510,\"ordate\": \"25.09.2020\"},{\"appid\": 1978720,\"ordate\": \"12.05.2023\"},{\"appid\": 977500,\"ordate\": \"12.12.2018\"},{\"appid\": 1403020,\"ordate\": \"19.08.2021\"},{\"appid\": 1251210,\"ordate\": \"06.03.2021\"},{\"appid\": 1404870,\"ordate\": \"01.12.2020\"},{\"appid\": 622770,\"ordate\": \"01.06.2017\"},{\"appid\": 1805960,\"ordate\": \"18.11.2021\"},{\"appid\": 2735190,\"ordate\": \"20.01.2024\"},{\"appid\": 773530,\"ordate\": \"05.01.2018\"},{\"appid\": 1990260,\"ordate\": \"15.07.2022\"},{\"appid\": 1711610,\"ordate\": \"25.11.2022\"},{\"appid\": 1000030,\"ordate\": \"30.01.2020\"},{\"appid\": 689700,\"ordate\": \"13.01.2018\"},{\"appid\": 2553510,\"ordate\": \"04.09.2023\"},{\"appid\": 1028340,\"ordate\": \"29.03.2019\"},{\"appid\": 1810220,\"ordate\": \"30.11.2021\"},{\"appid\": 1037020,\"ordate\": \"06.02.2020\"},{\"appid\": 699170,\"ordate\": \"16.08.2018\"},{\"appid\": 1329600,\"ordate\": \"01.08.2020\"},{\"appid\": 468160,\"ordate\": \"15.09.2016\"},{\"appid\": 1898430,\"ordate\": \"28.09.2022\"},{\"appid\": 2653480,\"ordate\": \"09.11.2023\"},{\"appid\": 1716940,\"ordate\": \"20.11.2021\"},{\"appid\": 1395080,\"ordate\": \"08.09.2020\"},{\"appid\": 1660310,\"ordate\": \"20.07.2021\"},{\"appid\": 1003700,\"ordate\": \"08.02.2019\"},{\"appid\": 2591250,\"ordate\": \"09.10.2023\"},{\"appid\": 1012790,\"ordate\": \"06.11.2019\"},{\"appid\": 2304540,\"ordate\": \"14.08.2023\"},{\"appid\": 2421410,\"ordate\": \"10.05.2024\"},{\"appid\": 931650,\"ordate\": \"03.01.2019\"},{\"appid\": 2576960,\"ordate\": \"22.10.2023\"},{\"appid\": 876320,\"ordate\": \"23.09.2018\"},{\"appid\": 1492210,\"ordate\": \"16.02.2021\"},{\"appid\": 2667790,\"ordate\": \"29.11.2023\"},{\"appid\": 1435960,\"ordate\": \"15.03.2021\"},{\"appid\": 921710,\"ordate\": \"02.11.2018\"},{\"appid\": 1652490,\"ordate\": \"25.01.2022\"},{\"appid\": 2456160,\"ordate\": \"01.09.2023\"},{\"appid\": 1066130,\"ordate\": \"26.11.2019\"},{\"appid\": 396750,\"ordate\": \"14.09.2016\"},{\"appid\": 1091580,\"ordate\": \"03.09.2019\"},{\"appid\": 1054450,\"ordate\": \"25.09.2019\"},{\"appid\": 1036240,\"ordate\": \"18.01.2023\"},{\"appid\": 2496000,\"ordate\": \"28.07.2023\"},{\"appid\": 1466840,\"ordate\": \"21.12.2020\"},{\"appid\": 268200,\"ordate\": \"20.02.2014\"},{\"appid\": 374150,\"ordate\": \"23.11.2015\"},{\"appid\": 762630,\"ordate\": \"27.04.2018\"},{\"appid\": 1948980,\"ordate\": \"08.03.2023\"},{\"appid\": 1858860,\"ordate\": \"15.01.2022\"},{\"appid\": 2261570,\"ordate\": \"12.01.2023\"},{\"appid\": 2525190,\"ordate\": \"11.08.2023\"},{\"appid\": 383790,\"ordate\": \"22.02.2016\"},{\"appid\": 282590,\"ordate\": \"18.07.2014\"},{\"appid\": 2201070,\"ordate\": \"20.02.2023\"},{\"appid\": 1839190,\"ordate\": \"15.12.2022\"},{\"appid\": 611960,\"ordate\": \"15.06.2017\"},{\"appid\": 2050510,\"ordate\": \"16.12.2022\"},{\"appid\": 993250,\"ordate\": \"02.08.2019\"},{\"appid\": 1939350,\"ordate\": \"22.06.2022\"},{\"appid\": 2170160,\"ordate\": \"02.12.2022\"},{\"appid\": 1097240,\"ordate\": \"15.08.2019\"},{\"appid\": 1666170,\"ordate\": \"28.07.2021\"},{\"appid\": 439370,\"ordate\": \"25.08.2017\"},{\"appid\": 909570,\"ordate\": \"10.01.2019\"},{\"appid\": 1221990,\"ordate\": \"16.03.2020\"},{\"appid\": 1184320,\"ordate\": \"19.11.2019\"},{\"appid\": 1273270,\"ordate\": \"30.03.2020\"},{\"appid\": 1837750,\"ordate\": \"07.04.2022\"},{\"appid\": 1839540,\"ordate\": \"31.12.2021\"},{\"appid\": 1144020,\"ordate\": \"21.07.2020\"},{\"appid\": 2559270,\"ordate\": \"11.11.2023\"},{\"appid\": 1660580,\"ordate\": \"29.01.2022\"},{\"appid\": 1984610,\"ordate\": \"03.06.2022\"},{\"appid\": 1484250,\"ordate\": \"12.01.2021\"},{\"appid\": 301050,\"ordate\": \"17.06.2014\"},{\"appid\": 959520,\"ordate\": \"09.03.2019\"},{\"appid\": 1351070,\"ordate\": \"06.11.2020\"},{\"appid\": 2518960,\"ordate\": \"15.09.2023\"},{\"appid\": 1578440,\"ordate\": \"14.12.2023\"},{\"appid\": 1114070,\"ordate\": \"22.09.2020\"},{\"appid\": 2724990,\"ordate\": \"26.01.2024\"},{\"appid\": 301120,\"ordate\": \"26.03.2015\"},{\"appid\": 781630,\"ordate\": \"27.05.2018\"},{\"appid\": 2394940,\"ordate\": \"19.12.2023\"},{\"appid\": 1931990,\"ordate\": \"14.09.2023\"},{\"appid\": 1298380,\"ordate\": \"14.05.2020\"},{\"appid\": 326520,\"ordate\": \"13.11.2015\"},{\"appid\": 1628620,\"ordate\": \"19.10.2022\"},{\"appid\": 1565680,\"ordate\": \"24.06.2021\"},{\"appid\": 668610,\"ordate\": \"25.08.2017\"},{\"appid\": 1886440,\"ordate\": \"11.03.2022\"},{\"appid\": 1808620,\"ordate\": \"28.02.2022\"},{\"appid\": 960740,\"ordate\": \"02.05.2019\"},{\"appid\": 455710,\"ordate\": \"07.05.2016\"},{\"appid\": 1290100,\"ordate\": \"31.03.2021\"},{\"appid\": 1934080,\"ordate\": \"20.02.2023\"},{\"appid\": 1338220,\"ordate\": \"01.12.2021\"},{\"appid\": 397660,\"ordate\": \"18.06.2016\"},{\"appid\": 1632930,\"ordate\": \"05.11.2021\"},{\"appid\": 1556660,\"ordate\": \"30.07.2021\"},{\"appid\": 779410,\"ordate\": \"26.11.2018\"},{\"appid\": 1362270,\"ordate\": \"03.08.2020\"},{\"appid\": 1717090,\"ordate\": \"27.01.2024\"},{\"appid\": 416200,\"ordate\": \"29.11.2015\"},{\"appid\": 402560,\"ordate\": \"29.03.2016\"},{\"appid\": 1526180,\"ordate\": \"11.03.2021\"},{\"appid\": 406220,\"ordate\": \"29.10.2015\"},{\"appid\": 731300,\"ordate\": \"14.04.2020\"},{\"appid\": 286040,\"ordate\": \"15.04.2014\"},{\"appid\": 1653100,\"ordate\": \"21.07.2021\"},{\"appid\": 1619330,\"ordate\": \"16.06.2021\"},{\"appid\": 547860,\"ordate\": \"25.07.2018\"},{\"appid\": 1887010,\"ordate\": \"15.11.2022\"},{\"appid\": 608110,\"ordate\": \"30.08.2017\"},{\"appid\": 1973320,\"ordate\": \"24.09.2022\"},{\"appid\": 1023390,\"ordate\": \"05.07.2019\"},{\"appid\": 1125370,\"ordate\": \"24.09.2019\"},{\"appid\": 471220,\"ordate\": \"15.07.2016\"},{\"appid\": 571100,\"ordate\": \"21.05.2020\"},{\"appid\": 1425550,\"ordate\": \"19.11.2020\"},{\"appid\": 2610440,\"ordate\": \"26.03.2024\"},{\"appid\": 1175430,\"ordate\": \"16.10.2019\"},{\"appid\": 2340910,\"ordate\": \"30.03.2023\"},{\"appid\": 1812910,\"ordate\": \"30.08.2023\"},{\"appid\": 293240,\"ordate\": \"25.08.2014\"},{\"appid\": 383070,\"ordate\": \"31.07.2015\"},{\"appid\": 1911360,\"ordate\": \"13.04.2023\"},{\"appid\": 790750,\"ordate\": \"09.03.2018\"},{\"appid\": 1319320,\"ordate\": \"25.08.2020\"},{\"appid\": 727100,\"ordate\": \"14.12.2017\"},{\"appid\": 1928650,\"ordate\": \"16.06.2022\"},{\"appid\": 923570,\"ordate\": \"14.04.2020\"},{\"appid\": 1439010,\"ordate\": \"11.11.2020\"},{\"appid\": 1454550,\"ordate\": \"18.11.2020\"},{\"appid\": 2888580,\"ordate\": \"20.04.2024\"},{\"appid\": 903780,\"ordate\": \"26.03.2019\"},{\"appid\": 1984710,\"ordate\": \"10.06.2022\"},{\"appid\": 2901340,\"ordate\": \"31.05.2024\"},{\"appid\": 705380,\"ordate\": \"03.02.2018\"},{\"appid\": 563380,\"ordate\": \"23.12.2016\"},{\"appid\": 673620,\"ordate\": \"06.09.2017\"},{\"appid\": 2230740,\"ordate\": \"16.08.2023\"},{\"appid\": 1400630,\"ordate\": \"30.11.2021\"},{\"appid\": 1868140,\"ordate\": \"27.10.2022\"},{\"appid\": 1032700,\"ordate\": \"03.06.2022\"},{\"appid\": 605450,\"ordate\": \"01.02.2018\"},{\"appid\": 522740,\"ordate\": \"06.04.2017\"},{\"appid\": 1488670,\"ordate\": \"22.12.2020\"},{\"appid\": 1490460,\"ordate\": \"08.02.2021\"},{\"appid\": 363420,\"ordate\": \"31.07.2015\"},{\"appid\": 401250,\"ordate\": \"12.10.2016\"},{\"appid\": 627220,\"ordate\": \"10.11.2017\"},{\"appid\": 1071290,\"ordate\": \"29.08.2019\"},{\"appid\": 1788650,\"ordate\": \"15.11.2021\"},{\"appid\": 1020340,\"ordate\": \"07.03.2019\"},{\"appid\": 937090,\"ordate\": \"08.08.2020\"},{\"appid\": 2065870,\"ordate\": \"16.09.2023\"},{\"appid\": 1521070,\"ordate\": \"20.10.2022\"},{\"appid\": 613900,\"ordate\": \"28.06.2019\"},{\"appid\": 1448310,\"ordate\": \"16.03.2021\"},{\"appid\": 2613870,\"ordate\": \"06.06.2024\"},{\"appid\": 566980,\"ordate\": \"08.01.2017\"},{\"appid\": 2180330,\"ordate\": \"03.04.2023\"},{\"appid\": 1464320,\"ordate\": \"04.12.2020\"},{\"appid\": 798710,\"ordate\": \"29.09.2018\"},{\"appid\": 1918970,\"ordate\": \"20.04.2023\"},{\"appid\": 2193570,\"ordate\": \"01.12.2023\"},{\"appid\": 375230,\"ordate\": \"26.01.2016\"},{\"appid\": 1371500,\"ordate\": \"02.09.2021\"},{\"appid\": 930780,\"ordate\": \"25.09.2018\"},{\"appid\": 2060230,\"ordate\": \"02.03.2023\"},{\"appid\": 856670,\"ordate\": \"27.05.2018\"},{\"appid\": 1465640,\"ordate\": \"16.07.2021\"},{\"appid\": 1952540,\"ordate\": \"27.02.2023\"},{\"appid\": 502520,\"ordate\": \"16.11.2016\"},{\"appid\": 782250,\"ordate\": \"23.08.2022\"},{\"appid\": 1837550,\"ordate\": \"30.01.2023\"},{\"appid\": 263640,\"ordate\": \"29.10.2014\"},{\"appid\": 719520,\"ordate\": \"15.10.2019\"},{\"appid\": 977390,\"ordate\": \"20.02.2019\"},{\"appid\": 360510,\"ordate\": \"09.07.2015\"},{\"appid\": 879480,\"ordate\": \"30.07.2018\"},{\"appid\": 352370,\"ordate\": \"02.12.2015\"},{\"appid\": 1043150,\"ordate\": \"08.05.2019\"},{\"appid\": 569570,\"ordate\": \"17.03.2017\"},{\"appid\": 1122780,\"ordate\": \"23.01.2020\"},{\"appid\": 477730,\"ordate\": \"03.06.2016\"},{\"appid\": 1995870,\"ordate\": \"30.06.2022\"},{\"appid\": 951430,\"ordate\": \"16.07.2020\"},{\"appid\": 1163660,\"ordate\": \"04.02.2020\"},{\"appid\": 1481600,\"ordate\": \"27.10.2021\"},{\"appid\": 464100,\"ordate\": \"21.07.2016\"},{\"appid\": 1805360,\"ordate\": \"28.04.2022\"},{\"appid\": 2097100,\"ordate\": \"11.08.2022\"},{\"appid\": 298630,\"ordate\": \"20.06.2014\"},{\"appid\": 1583780,\"ordate\": \"09.04.2021\"},{\"appid\": 273500,\"ordate\": \"02.07.2014\"},{\"appid\": 485830,\"ordate\": \"17.06.2016\"},{\"appid\": 1690650,\"ordate\": \"12.03.2022\"},{\"appid\": 252750,\"ordate\": \"12.11.2013\"},{\"appid\": 500790,\"ordate\": \"21.07.2016\"},{\"appid\": 657090,\"ordate\": \"07.06.2018\"},{\"appid\": 2540840,\"ordate\": \"12.01.2024\"},{\"appid\": 356070,\"ordate\": \"23.04.2015\"},{\"appid\": 1411380,\"ordate\": \"28.04.2022\"},{\"appid\": 447820,\"ordate\": \"28.07.2016\"},{\"appid\": 967440,\"ordate\": \"07.11.2018\"},{\"appid\": 985930,\"ordate\": \"08.02.2019\"},{\"appid\": 1403080,\"ordate\": \"21.12.2020\"},{\"appid\": 1579020,\"ordate\": \"26.05.2022\"},{\"appid\": 1285040,\"ordate\": \"25.01.2021\"},{\"appid\": 1597290,\"ordate\": \"21.10.2021\"},{\"appid\": 1772180,\"ordate\": \"20.10.2021\"},{\"appid\": 1060770,\"ordate\": \"25.04.2019\"},{\"appid\": 1934330,\"ordate\": \"25.05.2022\"},{\"appid\": 602160,\"ordate\": \"30.03.2017\"},{\"appid\": 282050,\"ordate\": \"05.03.2015\"},{\"appid\": 1040630,\"ordate\": \"22.08.2019\"},{\"appid\": 2089140,\"ordate\": \"15.05.2023\"},{\"appid\": 1001980,\"ordate\": \"18.01.2019\"},{\"appid\": 2409100,\"ordate\": \"05.03.2024\"},{\"appid\": 839420,\"ordate\": \"29.07.2018\"},{\"appid\": 983160,\"ordate\": \"10.03.2020\"},{\"appid\": 521100,\"ordate\": \"07.09.2016\"},{\"appid\": 1603600,\"ordate\": \"25.08.2021\"},{\"appid\": 1271090,\"ordate\": \"04.04.2020\"},{\"appid\": 1344900,\"ordate\": \"03.07.2020\"},{\"appid\": 1565210,\"ordate\": \"24.03.2023\"},{\"appid\": 1562230,\"ordate\": \"09.07.2021\"},{\"appid\": 500110,\"ordate\": \"05.09.2016\"},{\"appid\": 1950580,\"ordate\": \"18.02.2023\"},{\"appid\": 508300,\"ordate\": \"12.12.2016\"},{\"appid\": 801220,\"ordate\": \"01.06.2019\"},{\"appid\": 1278210,\"ordate\": \"16.04.2020\"},{\"appid\": 1490060,\"ordate\": \"06.01.2021\"},{\"appid\": 1526490,\"ordate\": \"25.02.2021\"},{\"appid\": 2786980,\"ordate\": \"15.06.2024\"},{\"appid\": 1745380,\"ordate\": \"30.09.2021\"},{\"appid\": 1106350,\"ordate\": \"10.07.2019\"},{\"appid\": 981710,\"ordate\": \"14.12.2018\"},{\"appid\": 656400,\"ordate\": \"15.07.2017\"},{\"appid\": 2510760,\"ordate\": \"15.03.2024\"},{\"appid\": 328220,\"ordate\": \"17.04.2015\"},{\"appid\": 2731900,\"ordate\": \"30.01.2024\"},{\"appid\": 2099670,\"ordate\": \"22.01.2024\"},{\"appid\": 1580440,\"ordate\": \"26.05.2021\"},{\"appid\": 618570,\"ordate\": \"11.08.2017\"},{\"appid\": 819650,\"ordate\": \"24.03.2018\"},{\"appid\": 2205510,\"ordate\": \"01.12.2022\"},{\"appid\": 1806610,\"ordate\": \"17.11.2021\"},{\"appid\": 2170680,\"ordate\": \"06.01.2023\"},{\"appid\": 1293540,\"ordate\": \"07.01.2022\"},{\"appid\": 1458390,\"ordate\": \"17.11.2020\"},{\"appid\": 2050980,\"ordate\": \"19.05.2023\"},{\"appid\": 494050,\"ordate\": \"30.03.2019\"},{\"appid\": 2555780,\"ordate\": \"14.10.2023\"},{\"appid\": 1870930,\"ordate\": \"14.02.2024\"},{\"appid\": 958050,\"ordate\": \"19.03.2019\"},{\"appid\": 2375730,\"ordate\": \"04.10.2023\"},{\"appid\": 993690,\"ordate\": \"24.01.2019\"},{\"appid\": 931780,\"ordate\": \"03.04.2019\"},{\"appid\": 2631520,\"ordate\": \"20.10.2023\"},{\"appid\": 609010,\"ordate\": \"23.05.2017\"},{\"appid\": 511800,\"ordate\": \"29.08.2016\"},{\"appid\": 555600,\"ordate\": \"04.04.2017\"},{\"appid\": 2119580,\"ordate\": \"03.08.2023\"},{\"appid\": 614950,\"ordate\": \"01.06.2017\"},{\"appid\": 429350,\"ordate\": \"30.03.2016\"},{\"appid\": 348460,\"ordate\": \"09.07.2015\"},{\"appid\": 760160,\"ordate\": \"07.09.2021\"},{\"appid\": 1619570,\"ordate\": \"28.03.2023\"},{\"appid\": 2378150,\"ordate\": \"12.07.2023\"},{\"appid\": 673950,\"ordate\": \"22.02.2018\"},{\"appid\": 355980,\"ordate\": \"18.03.2015\"},{\"appid\": 1491790,\"ordate\": \"28.01.2021\"},{\"appid\": 862650,\"ordate\": \"22.06.2018\"},{\"appid\": 1593160,\"ordate\": \"31.03.2023\"},{\"appid\": 470040,\"ordate\": \"19.08.2016\"},{\"appid\": 1928350,\"ordate\": \"20.03.2022\"},{\"appid\": 1520420,\"ordate\": \"26.05.2023\"},{\"appid\": 2141690,\"ordate\": \"20.09.2022\"},{\"appid\": 1488250,\"ordate\": \"05.02.2021\"},{\"appid\": 455310,\"ordate\": \"13.12.2018\"},{\"appid\": 2172750,\"ordate\": \"25.08.2023\"},{\"appid\": 2457350,\"ordate\": \"07.07.2023\"},{\"appid\": 1315610,\"ordate\": \"22.09.2021\"},{\"appid\": 860270,\"ordate\": \"02.11.2018\"},{\"appid\": 1367980,\"ordate\": \"17.09.2020\"},{\"appid\": 2067850,\"ordate\": \"27.09.2022\"},{\"appid\": 1872920,\"ordate\": \"05.02.2022\"},{\"appid\": 1968840,\"ordate\": \"28.01.2023\"},{\"appid\": 777470,\"ordate\": \"29.10.2022\"},{\"appid\": 2197930,\"ordate\": \"05.04.2023\"},{\"appid\": 2146430,\"ordate\": \"02.12.2023\"},{\"appid\": 1603800,\"ordate\": \"07.12.2021\"},{\"appid\": 2558200,\"ordate\": \"12.01.2024\"},{\"appid\": 942250,\"ordate\": \"09.01.2019\"},{\"appid\": 1028840,\"ordate\": \"26.09.2019\"},{\"appid\": 1046300,\"ordate\": \"28.08.2019\"},{\"appid\": 675640,\"ordate\": \"01.04.2018\"},{\"appid\": 436530,\"ordate\": \"07.04.2016\"},{\"appid\": 2819970,\"ordate\": \"12.04.2024\"},{\"appid\": 2340870,\"ordate\": \"28.06.2024\"},{\"appid\": 1398300,\"ordate\": \"29.10.2022\"},{\"appid\": 945490,\"ordate\": \"11.02.2019\"},{\"appid\": 1915450,\"ordate\": \"10.03.2022\"},{\"appid\": 2350090,\"ordate\": \"22.04.2023\"},{\"appid\": 388840,\"ordate\": \"08.11.2015\"},{\"appid\": 1485100,\"ordate\": \"18.12.2020\"},{\"appid\": 1078920,\"ordate\": \"11.06.2020\"},{\"appid\": 1477950,\"ordate\": \"29.07.2021\"},{\"appid\": 2509050,\"ordate\": \"07.01.2024\"},{\"appid\": 597230,\"ordate\": \"01.06.2017\"},{\"appid\": 301840,\"ordate\": \"18.09.2017\"},{\"appid\": 1093690,\"ordate\": \"13.06.2019\"},{\"appid\": 922920,\"ordate\": \"03.09.2018\"},{\"appid\": 739820,\"ordate\": \"29.03.2020\"},{\"appid\": 1822120,\"ordate\": \"22.12.2022\"},{\"appid\": 2780140,\"ordate\": \"20.06.2024\"},{\"appid\": 1245080,\"ordate\": \"29.08.2020\"},{\"appid\": 809500,\"ordate\": \"17.03.2018\"},{\"appid\": 846130,\"ordate\": \"30.07.2018\"},{\"appid\": 1250220,\"ordate\": \"19.03.2020\"},{\"appid\": 1776920,\"ordate\": \"19.10.2021\"},{\"appid\": 1911590,\"ordate\": \"07.03.2022\"},{\"appid\": 1493730,\"ordate\": \"19.11.2021\"},{\"appid\": 2608120,\"ordate\": \"08.01.2024\"},{\"appid\": 2484270,\"ordate\": \"15.03.2024\"},{\"appid\": 529630,\"ordate\": \"12.10.2016\"},{\"appid\": 1723390,\"ordate\": \"01.12.2021\"},{\"appid\": 2517190,\"ordate\": \"16.12.2023\"},{\"appid\": 278810,\"ordate\": \"30.07.2014\"},{\"appid\": 1415470,\"ordate\": \"02.11.2020\"},{\"appid\": 314050,\"ordate\": \"21.10.2014\"},{\"appid\": 1735930,\"ordate\": \"15.09.2021\"},{\"appid\": 1760330,\"ordate\": \"08.11.2023\"},{\"appid\": 686770,\"ordate\": \"29.04.2020\"},{\"appid\": 1391570,\"ordate\": \"12.12.2020\"},{\"appid\": 977340,\"ordate\": \"21.11.2018\"},{\"appid\": 1934930,\"ordate\": \"24.08.2022\"},{\"appid\": 2480930,\"ordate\": \"19.07.2023\"},{\"appid\": 280320,\"ordate\": \"23.04.2014\"},{\"appid\": 2071430,\"ordate\": \"24.01.2024\"},{\"appid\": 771680,\"ordate\": \"16.01.2018\"},{\"appid\": 2759640,\"ordate\": \"02.02.2024\"},{\"appid\": 1802880,\"ordate\": \"09.04.2024\"},{\"appid\": 462240,\"ordate\": \"03.05.2017\"},{\"appid\": 266510,\"ordate\": \"07.07.2014\"},{\"appid\": 1488810,\"ordate\": \"27.01.2022\"},{\"appid\": 1664810,\"ordate\": \"18.07.2023\"},{\"appid\": 2196050,\"ordate\": \"13.12.2022\"},{\"appid\": 2390840,\"ordate\": \"25.05.2023\"},{\"appid\": 2508890,\"ordate\": \"24.12.2023\"},{\"appid\": 595770,\"ordate\": \"24.11.2017\"},{\"appid\": 1416230,\"ordate\": \"06.10.2020\"},{\"appid\": 1538640,\"ordate\": \"30.11.2021\"},{\"appid\": 2647060,\"ordate\": \"25.01.2024\"},{\"appid\": 356040,\"ordate\": \"04.08.2015\"},{\"appid\": 1773330,\"ordate\": \"02.12.2021\"},{\"appid\": 1952370,\"ordate\": \"14.06.2023\"},{\"appid\": 392110,\"ordate\": \"06.10.2016\"},{\"appid\": 263020,\"ordate\": \"17.02.2014\"},{\"appid\": 316430,\"ordate\": \"10.12.2014\"},{\"appid\": 1040230,\"ordate\": \"17.06.2020\"},{\"appid\": 352950,\"ordate\": \"23.07.2015\"},{\"appid\": 310560,\"ordate\": \"27.04.2015\"},{\"appid\": 900270,\"ordate\": \"23.10.2018\"},{\"appid\": 2027600,\"ordate\": \"24.06.2022\"},{\"appid\": 1367300,\"ordate\": \"07.06.2021\"},{\"appid\": 1607130,\"ordate\": \"06.08.2021\"},{\"appid\": 1191580,\"ordate\": \"29.11.2019\"},{\"appid\": 939100,\"ordate\": \"12.02.2020\"},{\"appid\": 569420,\"ordate\": \"28.01.2017\"},{\"appid\": 688120,\"ordate\": \"24.07.2020\"},{\"appid\": 400230,\"ordate\": \"06.01.2016\"},{\"appid\": 1658480,\"ordate\": \"25.11.2021\"},{\"appid\": 1888860,\"ordate\": \"12.05.2023\"},{\"appid\": 562230,\"ordate\": \"19.07.2017\"},{\"appid\": 1961770,\"ordate\": \"30.06.2022\"},{\"appid\": 1918040,\"ordate\": \"27.10.2022\"},{\"appid\": 856990,\"ordate\": \"16.01.2020\"},{\"appid\": 2147890,\"ordate\": \"10.11.2022\"},{\"appid\": 1507310,\"ordate\": \"26.01.2021\"},{\"appid\": 2159530,\"ordate\": \"28.06.2023\"},{\"appid\": 1023790,\"ordate\": \"23.12.2020\"},{\"appid\": 586950,\"ordate\": \"28.07.2017\"},{\"appid\": 919220,\"ordate\": \"25.01.2019\"},{\"appid\": 930500,\"ordate\": \"02.02.2019\"},{\"appid\": 2647510,\"ordate\": \"20.06.2024\"},{\"appid\": 491660,\"ordate\": \"11.01.2017\"},{\"appid\": 1020910,\"ordate\": \"11.12.2022\"},{\"appid\": 2347910,\"ordate\": \"03.05.2024\"},{\"appid\": 1679220,\"ordate\": \"15.12.2022\"},{\"appid\": 871420,\"ordate\": \"23.06.2018\"},{\"appid\": 290340,\"ordate\": \"22.01.2015\"},{\"appid\": 2451010,\"ordate\": \"16.08.2023\"},{\"appid\": 1575920,\"ordate\": \"22.09.2021\"},{\"appid\": 814590,\"ordate\": \"16.04.2018\"},{\"appid\": 2604480,\"ordate\": \"20.06.2024\"},{\"appid\": 1664580,\"ordate\": \"26.01.2022\"},{\"appid\": 2102400,\"ordate\": \"31.08.2022\"},{\"appid\": 499400,\"ordate\": \"12.07.2016\"},{\"appid\": 1512480,\"ordate\": \"29.04.2022\"},{\"appid\": 566700,\"ordate\": \"29.04.2017\"},{\"appid\": 2331710,\"ordate\": \"21.04.2023\"},{\"appid\": 288100,\"ordate\": \"08.12.2015\"},{\"appid\": 593530,\"ordate\": \"05.05.2017\"},{\"appid\": 304650,\"ordate\": \"01.07.2014\"},{\"appid\": 2295790,\"ordate\": \"05.09.2023\"},{\"appid\": 707220,\"ordate\": \"18.10.2017\"},{\"appid\": 1614780,\"ordate\": \"16.12.2022\"},{\"appid\": 2701080,\"ordate\": \"05.02.2024\"},{\"appid\": 1528010,\"ordate\": \"11.10.2021\"},{\"appid\": 2103400,\"ordate\": \"20.06.2023\"},{\"appid\": 247730,\"ordate\": \"29.10.2013\"},{\"appid\": 2226700,\"ordate\": \"25.06.2023\"},{\"appid\": 1126300,\"ordate\": \"04.09.2019\"},{\"appid\": 1326270,\"ordate\": \"27.09.2021\"},{\"appid\": 1096530,\"ordate\": \"20.10.2020\"},{\"appid\": 1127330,\"ordate\": \"10.11.2019\"},{\"appid\": 1571090,\"ordate\": \"03.06.2021\"},{\"appid\": 657810,\"ordate\": \"24.07.2018\"},{\"appid\": 398680,\"ordate\": \"08.10.2015\"},{\"appid\": 643980,\"ordate\": \"31.05.2017\"},{\"appid\": 1282080,\"ordate\": \"07.10.2020\"},{\"appid\": 414190,\"ordate\": \"27.04.2016\"},{\"appid\": 1157560,\"ordate\": \"25.02.2020\"},{\"appid\": 1307780,\"ordate\": \"21.05.2020\"},{\"appid\": 1961370,\"ordate\": \"30.11.2022\"},{\"appid\": 995700,\"ordate\": \"01.01.2019\"},{\"appid\": 780390,\"ordate\": \"23.02.2018\"},{\"appid\": 764920,\"ordate\": \"12.12.2018\"},{\"appid\": 1192630,\"ordate\": \"23.03.2021\"},{\"appid\": 418340,\"ordate\": \"01.12.2015\"},{\"appid\": 2591270,\"ordate\": \"23.10.2023\"},{\"appid\": 2113040,\"ordate\": \"12.10.2023\"},{\"appid\": 1384030,\"ordate\": \"19.05.2021\"},{\"appid\": 2051130,\"ordate\": \"28.03.2023\"},{\"appid\": 2095290,\"ordate\": \"17.01.2023\"},{\"appid\": 1558830,\"ordate\": \"24.10.2023\"},{\"appid\": 616830,\"ordate\": \"11.03.2020\"},{\"appid\": 1082220,\"ordate\": \"09.07.2019\"},{\"appid\": 2073540,\"ordate\": \"13.10.2022\"},{\"appid\": 2264340,\"ordate\": \"18.01.2024\"},{\"appid\": 1525620,\"ordate\": \"25.02.2021\"},{\"appid\": 1644490,\"ordate\": \"14.10.2021\"},{\"appid\": 553210,\"ordate\": \"17.02.2017\"},{\"appid\": 716640,\"ordate\": \"18.04.2019\"},{\"appid\": 843860,\"ordate\": \"05.06.2018\"},{\"appid\": 2176090,\"ordate\": \"13.01.2023\"},{\"appid\": 1835120,\"ordate\": \"12.08.2023\"},{\"appid\": 1243520,\"ordate\": \"13.08.2021\"},{\"appid\": 963150,\"ordate\": \"31.10.2018\"},{\"appid\": 992700,\"ordate\": \"05.02.2019\"},{\"appid\": 1944570,\"ordate\": \"05.08.2022\"},{\"appid\": 2050050,\"ordate\": \"22.09.2022\"},{\"appid\": 840420,\"ordate\": \"16.02.2024\"},{\"appid\": 1123080,\"ordate\": \"08.08.2019\"},{\"appid\": 1492290,\"ordate\": \"28.02.2021\"},{\"appid\": 1822340,\"ordate\": \"01.03.2022\"},{\"appid\": 2708790,\"ordate\": \"19.06.2024\"},{\"appid\": 2856370,\"ordate\": \"19.06.2024\"},{\"appid\": 1653190,\"ordate\": \"22.04.2024\"},{\"appid\": 2450100,\"ordate\": \"23.08.2023\"},{\"appid\": 1646240,\"ordate\": \"05.07.2021\"},{\"appid\": 1146660,\"ordate\": \"26.10.2019\"},{\"appid\": 802090,\"ordate\": \"24.03.2018\"},{\"appid\": 1894980,\"ordate\": \"16.02.2022\"},{\"appid\": 563120,\"ordate\": \"20.12.2016\"},{\"appid\": 1608590,\"ordate\": \"29.02.2024\"},{\"appid\": 1723260,\"ordate\": \"19.05.2022\"},{\"appid\": 1018060,\"ordate\": \"12.03.2019\"},{\"appid\": 2899450,\"ordate\": \"01.05.2024\"},{\"appid\": 2553870,\"ordate\": \"01.09.2023\"},{\"appid\": 926540,\"ordate\": \"26.04.2020\"},{\"appid\": 2115020,\"ordate\": \"10.12.2022\"},{\"appid\": 1276370,\"ordate\": \"19.05.2020\"},{\"appid\": 909510,\"ordate\": \"11.03.2019\"},{\"appid\": 1336290,\"ordate\": \"31.07.2020\"},{\"appid\": 1507570,\"ordate\": \"27.12.2021\"},{\"appid\": 498990,\"ordate\": \"13.12.2016\"},{\"appid\": 2233570,\"ordate\": \"06.02.2023\"},{\"appid\": 346220,\"ordate\": \"23.06.2015\"},{\"appid\": 2227860,\"ordate\": \"23.03.2023\"},{\"appid\": 326410,\"ordate\": \"12.10.2014\"},{\"appid\": 1456770,\"ordate\": \"24.11.2020\"},{\"appid\": 2217580,\"ordate\": \"08.08.2023\"},{\"appid\": 2119630,\"ordate\": \"19.09.2022\"},{\"appid\": 1848650,\"ordate\": \"07.03.2022\"},{\"appid\": 1252710,\"ordate\": \"29.07.2020\"},{\"appid\": 1360810,\"ordate\": \"20.05.2024\"},{\"appid\": 877330,\"ordate\": \"06.11.2019\"},{\"appid\": 1214410,\"ordate\": \"15.01.2020\"},{\"appid\": 649190,\"ordate\": \"01.08.2018\"},{\"appid\": 1829120,\"ordate\": \"11.01.2022\"},{\"appid\": 469830,\"ordate\": \"25.07.2017\"},{\"appid\": 628190,\"ordate\": \"17.01.2018\"},{\"appid\": 786850,\"ordate\": \"25.01.2018\"},{\"appid\": 512160,\"ordate\": \"17.10.2017\"},{\"appid\": 1584830,\"ordate\": \"06.04.2021\"},{\"appid\": 2336330,\"ordate\": \"22.11.2023\"},{\"appid\": 2661060,\"ordate\": \"18.01.2024\"},{\"appid\": 2485980,\"ordate\": \"17.02.2024\"},{\"appid\": 911220,\"ordate\": \"26.03.2019\"},{\"appid\": 629220,\"ordate\": \"03.08.2017\"},{\"appid\": 695720,\"ordate\": \"19.11.2018\"},{\"appid\": 1523260,\"ordate\": \"30.06.2021\"},{\"appid\": 2884590,\"ordate\": \"09.05.2024\"},{\"appid\": 1607770,\"ordate\": \"20.05.2021\"},{\"appid\": 1029220,\"ordate\": \"30.01.2020\"},{\"appid\": 686260,\"ordate\": \"16.01.2018\"},{\"appid\": 1429700,\"ordate\": \"11.12.2020\"},{\"appid\": 2718470,\"ordate\": \"19.07.2024\"},{\"appid\": 1183840,\"ordate\": \"11.05.2020\"},{\"appid\": 409910,\"ordate\": \"28.01.2016\"},{\"appid\": 2389560,\"ordate\": \"20.06.2024\"},{\"appid\": 2159670,\"ordate\": \"18.05.2023\"},{\"appid\": 1061400,\"ordate\": \"27.02.2022\"},{\"appid\": 1345820,\"ordate\": \"17.12.2020\"},{\"appid\": 257730,\"ordate\": \"08.02.2014\"},{\"appid\": 842850,\"ordate\": \"08.02.2019\"},{\"appid\": 1797480,\"ordate\": \"22.01.2024\"},{\"appid\": 1441180,\"ordate\": \"29.10.2020\"},{\"appid\": 1273440,\"ordate\": \"26.05.2022\"},{\"appid\": 1454060,\"ordate\": \"09.12.2020\"},{\"appid\": 1665820,\"ordate\": \"03.09.2021\"},{\"appid\": 1001870,\"ordate\": \"01.02.2019\"},{\"appid\": 1974050,\"ordate\": \"11.10.2022\"},{\"appid\": 2870280,\"ordate\": \"24.04.2024\"},{\"appid\": 1984720,\"ordate\": \"26.10.2022\"},{\"appid\": 1016000,\"ordate\": \"21.07.2020\"},{\"appid\": 721960,\"ordate\": \"14.12.2017\"},{\"appid\": 1627680,\"ordate\": \"06.01.2023\"},{\"appid\": 434650,\"ordate\": \"05.02.2016\"},{\"appid\": 647640,\"ordate\": \"21.03.2019\"},{\"appid\": 1994710,\"ordate\": \"23.06.2022\"},{\"appid\": 612370,\"ordate\": \"22.04.2017\"},{\"appid\": 2800170,\"ordate\": \"17.05.2024\"},{\"appid\": 2027560,\"ordate\": \"13.10.2022\"},{\"appid\": 2836450,\"ordate\": \"28.06.2024\"},{\"appid\": 494530,\"ordate\": \"28.12.2016\"},{\"appid\": 1853080,\"ordate\": \"08.01.2022\"},{\"appid\": 2814000,\"ordate\": \"28.05.2024\"},{\"appid\": 384180,\"ordate\": \"19.05.2016\"},{\"appid\": 496080,\"ordate\": \"07.08.2016\"},{\"appid\": 298240,\"ordate\": \"29.05.2015\"},{\"appid\": 2086190,\"ordate\": \"15.09.2022\"},{\"appid\": 1878920,\"ordate\": \"05.08.2022\"},{\"appid\": 1106710,\"ordate\": \"03.01.2020\"},{\"appid\": 2241570,\"ordate\": \"26.12.2022\"},{\"appid\": 2247820,\"ordate\": \"26.01.2023\"},{\"appid\": 921390,\"ordate\": \"14.09.2018\"},{\"appid\": 2667410,\"ordate\": \"16.11.2023\"},{\"appid\": 953880,\"ordate\": \"08.04.2021\"},{\"appid\": 2364800,\"ordate\": \"08.04.2023\"},{\"appid\": 1911420,\"ordate\": \"11.11.2022\"},{\"appid\": 1907400,\"ordate\": \"01.06.2024\"},{\"appid\": 1144250,\"ordate\": \"31.08.2019\"},{\"appid\": 2022360,\"ordate\": \"01.08.2022\"},{\"appid\": 2363590,\"ordate\": \"05.08.2023\"},{\"appid\": 1294780,\"ordate\": \"25.07.2020\"},{\"appid\": 2443150,\"ordate\": \"05.01.2024\"},{\"appid\": 1378870,\"ordate\": \"16.10.2020\"},{\"appid\": 385080,\"ordate\": \"06.10.2015\"},{\"appid\": 928410,\"ordate\": \"09.01.2019\"},{\"appid\": 506900,\"ordate\": \"19.12.2016\"},{\"appid\": 1508200,\"ordate\": \"16.01.2021\"},{\"appid\": 2276850,\"ordate\": \"07.04.2023\"},{\"appid\": 387400,\"ordate\": \"24.08.2015\"},{\"appid\": 1272120,\"ordate\": \"08.05.2020\"},{\"appid\": 2563800,\"ordate\": \"02.10.2023\"},{\"appid\": 1532640,\"ordate\": \"29.07.2021\"},{\"appid\": 1720240,\"ordate\": \"14.09.2021\"},{\"appid\": 2492560,\"ordate\": \"29.08.2023\"},{\"appid\": 1203990,\"ordate\": \"17.12.2019\"},{\"appid\": 283080,\"ordate\": \"01.12.2014\"},{\"appid\": 2003870,\"ordate\": \"04.07.2022\"},{\"appid\": 2262060,\"ordate\": \"26.01.2023\"},{\"appid\": 1671280,\"ordate\": \"26.10.2021\"},{\"appid\": 1598660,\"ordate\": \"28.04.2021\"},{\"appid\": 1816930,\"ordate\": \"23.03.2022\"},{\"appid\": 1906640,\"ordate\": \"25.04.2022\"},{\"appid\": 389190,\"ordate\": \"16.12.2015\"},{\"appid\": 789890,\"ordate\": \"09.05.2018\"},{\"appid\": 716250,\"ordate\": \"23.04.2019\"},{\"appid\": 1448230,\"ordate\": \"21.02.2021\"},{\"appid\": 280600,\"ordate\": \"02.03.2015\"},{\"appid\": 423710,\"ordate\": \"02.12.2015\"},{\"appid\": 2687820,\"ordate\": \"30.01.2024\"},{\"appid\": 1739070,\"ordate\": \"08.04.2022\"},{\"appid\": 2218690,\"ordate\": \"04.04.2023\"},{\"appid\": 448620,\"ordate\": \"15.04.2016\"},{\"appid\": 706990,\"ordate\": \"04.10.2018\"},{\"appid\": 1395830,\"ordate\": \"22.04.2021\"},{\"appid\": 1489310,\"ordate\": \"05.04.2023\"},{\"appid\": 527700,\"ordate\": \"23.09.2016\"},{\"appid\": 613730,\"ordate\": \"14.04.2017\"},{\"appid\": 2425090,\"ordate\": \"16.06.2023\"},{\"appid\": 2979840,\"ordate\": \"15.07.2024\"},{\"appid\": 2217740,\"ordate\": \"31.05.2023\"},{\"appid\": 1374930,\"ordate\": \"26.08.2021\"},{\"appid\": 1422190,\"ordate\": \"17.11.2020\"},{\"appid\": 956060,\"ordate\": \"30.11.2018\"},{\"appid\": 670720,\"ordate\": \"30.03.2020\"},{\"appid\": 1605430,\"ordate\": \"20.10.2021\"},{\"appid\": 2511900,\"ordate\": \"12.02.2024\"},{\"appid\": 2388460,\"ordate\": \"14.09.2023\"},{\"appid\": 246110,\"ordate\": \"11.11.2014\"},{\"appid\": 2643960,\"ordate\": \"01.12.2023\"},{\"appid\": 1270380,\"ordate\": \"21.05.2021\"},{\"appid\": 1878010,\"ordate\": \"02.02.2022\"},{\"appid\": 752380,\"ordate\": \"07.04.2018\"},{\"appid\": 2109460,\"ordate\": \"05.10.2022\"},{\"appid\": 2552680,\"ordate\": \"18.04.2024\"},{\"appid\": 834340,\"ordate\": \"11.05.2018\"},{\"appid\": 459410,\"ordate\": \"16.04.2016\"},{\"appid\": 715520,\"ordate\": \"23.02.2018\"},{\"appid\": 1980770,\"ordate\": \"19.08.2022\"},{\"appid\": 2421560,\"ordate\": \"02.06.2023\"},{\"appid\": 1403520,\"ordate\": \"15.04.2021\"},{\"appid\": 701380,\"ordate\": \"05.10.2017\"},{\"appid\": 1107160,\"ordate\": \"26.07.2019\"},{\"appid\": 1222180,\"ordate\": \"24.01.2020\"},{\"appid\": 527310,\"ordate\": \"19.11.2016\"},{\"appid\": 2456430,\"ordate\": \"06.03.2024\"},{\"appid\": 391820,\"ordate\": \"18.11.2015\"},{\"appid\": 1033210,\"ordate\": \"31.05.2019\"},{\"appid\": 511570,\"ordate\": \"19.08.2016\"},{\"appid\": 1605480,\"ordate\": \"28.05.2021\"},{\"appid\": 2321880,\"ordate\": \"28.07.2023\"},{\"appid\": 2199830,\"ordate\": \"19.11.2022\"},{\"appid\": 806530,\"ordate\": \"30.08.2018\"},{\"appid\": 413830,\"ordate\": \"05.11.2015\"},{\"appid\": 571860,\"ordate\": \"19.03.2017\"},{\"appid\": 560340,\"ordate\": \"20.02.2017\"},{\"appid\": 795430,\"ordate\": \"10.03.2018\"},{\"appid\": 1479840,\"ordate\": \"02.01.2021\"},{\"appid\": 644480,\"ordate\": \"20.06.2017\"},{\"appid\": 1070580,\"ordate\": \"04.05.2019\"},{\"appid\": 316930,\"ordate\": \"08.12.2014\"},{\"appid\": 1993150,\"ordate\": \"02.12.2022\"},{\"appid\": 628290,\"ordate\": \"08.08.2017\"},{\"appid\": 1488860,\"ordate\": \"13.04.2021\"},{\"appid\": 2136470,\"ordate\": \"24.10.2022\"},{\"appid\": 2347550,\"ordate\": \"28.05.2024\"},{\"appid\": 1065550,\"ordate\": \"23.07.2019\"},{\"appid\": 337290,\"ordate\": \"10.07.2017\"},{\"appid\": 1290330,\"ordate\": \"10.03.2023\"},{\"appid\": 2878230,\"ordate\": \"01.05.2024\"},{\"appid\": 1072190,\"ordate\": \"24.05.2022\"},{\"appid\": 844440,\"ordate\": \"11.12.2018\"},{\"appid\": 2174370,\"ordate\": \"31.10.2022\"},{\"appid\": 2000570,\"ordate\": \"31.05.2022\"},{\"appid\": 907410,\"ordate\": \"14.09.2019\"},{\"appid\": 950260,\"ordate\": \"18.03.2019\"},{\"appid\": 1869310,\"ordate\": \"18.02.2022\"},{\"appid\": 628770,\"ordate\": \"19.07.2017\"},{\"appid\": 2382450,\"ordate\": \"20.02.2024\"},{\"appid\": 1398400,\"ordate\": \"06.11.2020\"},{\"appid\": 454070,\"ordate\": \"01.05.2016\"},{\"appid\": 1190820,\"ordate\": \"15.08.2020\"},{\"appid\": 751730,\"ordate\": \"04.01.2018\"},{\"appid\": 2122070,\"ordate\": \"14.09.2022\"},{\"appid\": 1493880,\"ordate\": \"08.07.2021\"},{\"appid\": 1901910,\"ordate\": \"06.06.2024\"},{\"appid\": 1629060,\"ordate\": \"01.06.2021\"},{\"appid\": 1342810,\"ordate\": \"13.04.2021\"},{\"appid\": 433400,\"ordate\": \"11.04.2016\"},{\"appid\": 695970,\"ordate\": \"02.02.2018\"},{\"appid\": 535490,\"ordate\": \"21.10.2016\"},{\"appid\": 1198080,\"ordate\": \"17.01.2020\"},{\"appid\": 2195650,\"ordate\": \"09.11.2023\"},{\"appid\": 506870,\"ordate\": \"10.08.2016\"},{\"appid\": 535170,\"ordate\": \"20.10.2016\"},{\"appid\": 1473740,\"ordate\": \"28.09.2021\"},{\"appid\": 2674370,\"ordate\": \"05.12.2023\"},{\"appid\": 1730650,\"ordate\": \"20.10.2022\"},{\"appid\": 1323220,\"ordate\": \"04.09.2020\"},{\"appid\": 1662940,\"ordate\": \"14.07.2021\"},{\"appid\": 288120,\"ordate\": \"28.05.2014\"},{\"appid\": 811950,\"ordate\": \"17.03.2018\"},{\"appid\": 2052780,\"ordate\": \"02.03.2023\"},{\"appid\": 1844130,\"ordate\": \"25.03.2024\"},{\"appid\": 672040,\"ordate\": \"14.11.2018\"},{\"appid\": 1069910,\"ordate\": \"25.05.2019\"},{\"appid\": 1485140,\"ordate\": \"14.04.2022\"},{\"appid\": 1298010,\"ordate\": \"14.10.2021\"},{\"appid\": 1107860,\"ordate\": \"01.11.2021\"},{\"appid\": 1323900,\"ordate\": \"03.03.2021\"},{\"appid\": 1155660,\"ordate\": \"16.11.2019\"},{\"appid\": 529040,\"ordate\": \"22.10.2016\"},{\"appid\": 990850,\"ordate\": \"21.12.2018\"},{\"appid\": 462940,\"ordate\": \"14.10.2017\"},{\"appid\": 1784550,\"ordate\": \"25.02.2022\"},{\"appid\": 1155390,\"ordate\": \"12.10.2019\"},{\"appid\": 408740,\"ordate\": \"17.10.2015\"},{\"appid\": 1595280,\"ordate\": \"16.07.2021\"},{\"appid\": 1324130,\"ordate\": \"12.10.2022\"},{\"appid\": 1328190,\"ordate\": \"22.02.2021\"},{\"appid\": 964210,\"ordate\": \"11.01.2019\"},{\"appid\": 685690,\"ordate\": \"26.08.2017\"},{\"appid\": 2320040,\"ordate\": \"11.01.2024\"},{\"appid\": 2765460,\"ordate\": \"20.02.2024\"},{\"appid\": 2158800,\"ordate\": \"04.11.2022\"},{\"appid\": 703840,\"ordate\": \"02.11.2017\"},{\"appid\": 506730,\"ordate\": \"04.11.2016\"},{\"appid\": 370140,\"ordate\": \"18.02.2016\"},{\"appid\": 1175070,\"ordate\": \"25.03.2020\"},{\"appid\": 844260,\"ordate\": \"18.02.2021\"},{\"appid\": 451990,\"ordate\": \"11.06.2016\"},{\"appid\": 2304660,\"ordate\": \"06.06.2024\"},{\"appid\": 2094350,\"ordate\": \"18.08.2022\"},{\"appid\": 2844450,\"ordate\": \"01.05.2024\"},{\"appid\": 527720,\"ordate\": \"08.12.2016\"},{\"appid\": 2432190,\"ordate\": \"06.06.2023\"},{\"appid\": 863290,\"ordate\": \"02.06.2018\"},{\"appid\": 730290,\"ordate\": \"27.04.2018\"},{\"appid\": 262210,\"ordate\": \"25.03.2014\"},{\"appid\": 2289780,\"ordate\": \"02.07.2023\"},{\"appid\": 509070,\"ordate\": \"02.09.2016\"},{\"appid\": 661030,\"ordate\": \"28.08.2017\"},{\"appid\": 577000,\"ordate\": \"17.11.2017\"},{\"appid\": 2744670,\"ordate\": \"20.01.2024\"},{\"appid\": 451950,\"ordate\": \"25.09.2016\"},{\"appid\": 2074000,\"ordate\": \"24.04.2023\"},{\"appid\": 694400,\"ordate\": \"14.12.2018\"},{\"appid\": 2345300,\"ordate\": \"28.03.2023\"},{\"appid\": 376250,\"ordate\": \"07.12.2015\"},{\"appid\": 1059040,\"ordate\": \"01.05.2019\"},{\"appid\": 1191730,\"ordate\": \"19.06.2021\"},{\"appid\": 1123910,\"ordate\": \"12.08.2019\"},{\"appid\": 1882040,\"ordate\": \"01.04.2022\"},{\"appid\": 514290,\"ordate\": \"10.09.2016\"},{\"appid\": 1896570,\"ordate\": \"16.12.2023\"},{\"appid\": 667880,\"ordate\": \"23.07.2017\"},{\"appid\": 1749200,\"ordate\": \"02.11.2021\"},{\"appid\": 2905120,\"ordate\": \"15.04.2024\"},{\"appid\": 2439730,\"ordate\": \"12.06.2023\"},{\"appid\": 1825700,\"ordate\": \"18.12.2021\"},{\"appid\": 468740,\"ordate\": \"09.06.2016\"},{\"appid\": 2494270,\"ordate\": \"29.02.2024\"},{\"appid\": 223410,\"ordate\": \"10.04.2014\"},{\"appid\": 1240460,\"ordate\": \"21.04.2020\"},{\"appid\": 1213390,\"ordate\": \"01.07.2020\"},{\"appid\": 1104340,\"ordate\": \"20.10.2020\"},{\"appid\": 562590,\"ordate\": \"17.01.2017\"},{\"appid\": 698110,\"ordate\": \"01.11.2017\"},{\"appid\": 851100,\"ordate\": \"20.08.2018\"},{\"appid\": 384100,\"ordate\": \"13.07.2015\"},{\"appid\": 1184190,\"ordate\": \"02.02.2020\"},{\"appid\": 265970,\"ordate\": \"11.09.2014\"},{\"appid\": 277520,\"ordate\": \"03.10.2014\"},{\"appid\": 1287980,\"ordate\": \"25.06.2020\"},{\"appid\": 1807090,\"ordate\": \"08.11.2023\"},{\"appid\": 976970,\"ordate\": \"30.11.2018\"},{\"appid\": 950300,\"ordate\": \"12.02.2019\"},{\"appid\": 1177330,\"ordate\": \"06.01.2021\"},{\"appid\": 1338790,\"ordate\": \"22.10.2020\"},{\"appid\": 2015940,\"ordate\": \"20.08.2023\"},{\"appid\": 1064650,\"ordate\": \"01.05.2019\"},{\"appid\": 2108400,\"ordate\": \"01.09.2022\"},{\"appid\": 748940,\"ordate\": \"22.02.2019\"},{\"appid\": 1017100,\"ordate\": \"05.03.2019\"},{\"appid\": 1072710,\"ordate\": \"09.01.2020\"},{\"appid\": 2157960,\"ordate\": \"13.02.2024\"},{\"appid\": 2101680,\"ordate\": \"10.10.2022\"},{\"appid\": 1894460,\"ordate\": \"23.02.2024\"},{\"appid\": 2305380,\"ordate\": \"26.01.2024\"},{\"appid\": 773090,\"ordate\": \"03.04.2018\"},{\"appid\": 1096000,\"ordate\": \"11.06.2019\"},{\"appid\": 1285610,\"ordate\": \"24.04.2020\"},{\"appid\": 569530,\"ordate\": \"14.06.2018\"},{\"appid\": 2224330,\"ordate\": \"21.12.2022\"},{\"appid\": 1590320,\"ordate\": \"25.06.2021\"},{\"appid\": 1598470,\"ordate\": \"23.02.2022\"},{\"appid\": 2069220,\"ordate\": \"25.07.2022\"},{\"appid\": 2367650,\"ordate\": \"14.07.2023\"},{\"appid\": 1266820,\"ordate\": \"18.02.2021\"},{\"appid\": 1842450,\"ordate\": \"29.08.2022\"},{\"appid\": 1151200,\"ordate\": \"29.09.2019\"},{\"appid\": 663100,\"ordate\": \"12.08.2017\"},{\"appid\": 926390,\"ordate\": \"08.05.2019\"},{\"appid\": 1084350,\"ordate\": \"04.12.2019\"},{\"appid\": 1349840,\"ordate\": \"17.06.2020\"},{\"appid\": 893720,\"ordate\": \"10.06.2021\"},{\"appid\": 795990,\"ordate\": \"01.08.2019\"},{\"appid\": 2100010,\"ordate\": \"13.08.2022\"},{\"appid\": 1518690,\"ordate\": \"10.12.2021\"},{\"appid\": 398670,\"ordate\": \"20.05.2016\"},{\"appid\": 1963510,\"ordate\": \"21.12.2022\"},{\"appid\": 1079330,\"ordate\": \"25.05.2019\"},{\"appid\": 1740080,\"ordate\": \"18.03.2022\"},{\"appid\": 1709180,\"ordate\": \"18.01.2022\"},{\"appid\": 2102320,\"ordate\": \"24.04.2023\"},{\"appid\": 742700,\"ordate\": \"28.11.2017\"},{\"appid\": 780670,\"ordate\": \"12.03.2020\"},{\"appid\": 815030,\"ordate\": \"12.03.2018\"},{\"appid\": 1417310,\"ordate\": \"05.12.2020\"},{\"appid\": 2314530,\"ordate\": \"06.06.2024\"},{\"appid\": 2521650,\"ordate\": \"05.12.2023\"},{\"appid\": 2162680,\"ordate\": \"07.12.2023\"},{\"appid\": 1482910,\"ordate\": \"17.12.2020\"},{\"appid\": 1558330,\"ordate\": \"28.01.2022\"},{\"appid\": 2447060,\"ordate\": \"10.08.2023\"},{\"appid\": 2492390,\"ordate\": \"12.09.2023\"},{\"appid\": 1439750,\"ordate\": \"24.02.2024\"},{\"appid\": 1273480,\"ordate\": \"29.05.2023\"},{\"appid\": 755520,\"ordate\": \"04.07.2018\"},{\"appid\": 543380,\"ordate\": \"17.06.2017\"},{\"appid\": 1055990,\"ordate\": \"16.04.2019\"},{\"appid\": 1481730,\"ordate\": \"20.06.2022\"},{\"appid\": 671620,\"ordate\": \"23.08.2017\"},{\"appid\": 1283500,\"ordate\": \"17.04.2020\"},{\"appid\": 2815680,\"ordate\": \"05.03.2024\"},{\"appid\": 378090,\"ordate\": \"07.01.2016\"},{\"appid\": 2322550,\"ordate\": \"10.05.2023\"},{\"appid\": 340770,\"ordate\": \"07.12.2015\"},{\"appid\": 1182060,\"ordate\": \"16.04.2020\"},{\"appid\": 350740,\"ordate\": \"20.07.2015\"},{\"appid\": 430930,\"ordate\": \"22.08.2016\"},{\"appid\": 1233250,\"ordate\": \"14.04.2020\"},{\"appid\": 889170,\"ordate\": \"12.07.2018\"},{\"appid\": 1848080,\"ordate\": \"09.06.2022\"},{\"appid\": 1919720,\"ordate\": \"10.10.2022\"},{\"appid\": 1568470,\"ordate\": \"04.05.2021\"},{\"appid\": 1166310,\"ordate\": \"01.04.2020\"},{\"appid\": 2273430,\"ordate\": \"15.08.2023\"},{\"appid\": 2453570,\"ordate\": \"08.08.2023\"},{\"appid\": 586020,\"ordate\": \"19.05.2017\"},{\"appid\": 980190,\"ordate\": \"23.07.2019\"},{\"appid\": 1383760,\"ordate\": \"24.12.2020\"},{\"appid\": 295670,\"ordate\": \"20.07.2016\"},{\"appid\": 2230000,\"ordate\": \"07.04.2023\"},{\"appid\": 717330,\"ordate\": \"26.10.2017\"},{\"appid\": 2171010,\"ordate\": \"18.01.2023\"},{\"appid\": 342260,\"ordate\": \"31.03.2015\"},{\"appid\": 1820460,\"ordate\": \"02.02.2024\"},{\"appid\": 866180,\"ordate\": \"03.07.2018\"},{\"appid\": 398850,\"ordate\": \"30.09.2015\"},{\"appid\": 733570,\"ordate\": \"01.12.2017\"},{\"appid\": 678450,\"ordate\": \"12.09.2017\"},{\"appid\": 1929610,\"ordate\": \"27.03.2023\"},{\"appid\": 951860,\"ordate\": \"15.04.2022\"},{\"appid\": 2448680,\"ordate\": \"04.04.2024\"},{\"appid\": 772570,\"ordate\": \"09.10.2019\"},{\"appid\": 1253320,\"ordate\": \"30.03.2020\"},{\"appid\": 2218320,\"ordate\": \"27.03.2024\"},{\"appid\": 2432000,\"ordate\": \"07.10.2023\"},{\"appid\": 388900,\"ordate\": \"09.06.2016\"},{\"appid\": 458040,\"ordate\": \"17.04.2018\"},{\"appid\": 820530,\"ordate\": \"12.10.2018\"},{\"appid\": 1781590,\"ordate\": \"05.11.2021\"},{\"appid\": 849000,\"ordate\": \"02.06.2018\"},{\"appid\": 568720,\"ordate\": \"15.12.2016\"},{\"appid\": 1866880,\"ordate\": \"02.08.2022\"},{\"appid\": 1382190,\"ordate\": \"11.11.2021\"},{\"appid\": 377260,\"ordate\": \"22.02.2018\"},{\"appid\": 959150,\"ordate\": \"05.09.2020\"},{\"appid\": 422590,\"ordate\": \"28.04.2016\"},{\"appid\": 1059230,\"ordate\": \"11.01.2020\"},{\"appid\": 539330,\"ordate\": \"12.11.2018\"},{\"appid\": 645330,\"ordate\": \"30.12.2017\"},{\"appid\": 458170,\"ordate\": \"27.07.2016\"},{\"appid\": 1787480,\"ordate\": \"15.12.2022\"},{\"appid\": 564080,\"ordate\": \"20.05.2017\"},{\"appid\": 1032790,\"ordate\": \"26.04.2019\"},{\"appid\": 434730,\"ordate\": \"03.02.2016\"},{\"appid\": 1174090,\"ordate\": \"25.12.2019\"},{\"appid\": 1116800,\"ordate\": \"05.09.2019\"},{\"appid\": 1157350,\"ordate\": \"02.10.2019\"},{\"appid\": 1745690,\"ordate\": \"07.01.2022\"},{\"appid\": 2461140,\"ordate\": \"07.05.2024\"},{\"appid\": 2345770,\"ordate\": \"18.04.2023\"},{\"appid\": 1655940,\"ordate\": \"03.08.2022\"},{\"appid\": 2086850,\"ordate\": \"16.06.2023\"},{\"appid\": 1199030,\"ordate\": \"28.11.2020\"},{\"appid\": 876220,\"ordate\": \"02.09.2018\"},{\"appid\": 2371680,\"ordate\": \"26.05.2024\"},{\"appid\": 672300,\"ordate\": \"04.08.2017\"},{\"appid\": 2230540,\"ordate\": \"23.01.2023\"},{\"appid\": 968730,\"ordate\": \"14.12.2018\"},{\"appid\": 1741160,\"ordate\": \"28.07.2022\"},{\"appid\": 1445090,\"ordate\": \"27.11.2020\"},{\"appid\": 769950,\"ordate\": \"05.03.2018\"},{\"appid\": 1809300,\"ordate\": \"11.12.2021\"},{\"appid\": 2743450,\"ordate\": \"09.05.2024\"},{\"appid\": 1550760,\"ordate\": \"14.10.2021\"},{\"appid\": 2870560,\"ordate\": \"29.03.2024\"},{\"appid\": 535690,\"ordate\": \"22.01.2017\"},{\"appid\": 310890,\"ordate\": \"23.01.2015\"},{\"appid\": 637410,\"ordate\": \"12.06.2017\"},{\"appid\": 2185240,\"ordate\": \"22.01.2023\"},{\"appid\": 507120,\"ordate\": \"22.11.2016\"},{\"appid\": 1014110,\"ordate\": \"15.08.2019\"},{\"appid\": 1647440,\"ordate\": \"29.07.2021\"},{\"appid\": 2365250,\"ordate\": \"16.07.2023\"},{\"appid\": 1240630,\"ordate\": \"06.03.2020\"},{\"appid\": 689620,\"ordate\": \"10.11.2017\"},{\"appid\": 2185990,\"ordate\": \"02.05.2024\"},{\"appid\": 2192500,\"ordate\": \"02.12.2022\"},{\"appid\": 708820,\"ordate\": \"30.01.2018\"},{\"appid\": 991810,\"ordate\": \"30.04.2019\"},{\"appid\": 1822130,\"ordate\": \"06.12.2021\"},{\"appid\": 2758490,\"ordate\": \"30.03.2024\"},{\"appid\": 551060,\"ordate\": \"17.04.2017\"},{\"appid\": 448780,\"ordate\": \"01.03.2016\"},{\"appid\": 754850,\"ordate\": \"19.12.2018\"},{\"appid\": 1477300,\"ordate\": \"24.11.2021\"},{\"appid\": 1492150,\"ordate\": \"16.11.2022\"},{\"appid\": 2727210,\"ordate\": \"18.06.2024\"},{\"appid\": 1976100,\"ordate\": \"16.11.2023\"},{\"appid\": 1582070,\"ordate\": \"22.10.2021\"},{\"appid\": 1801110,\"ordate\": \"13.02.2023\"},{\"appid\": 1502630,\"ordate\": \"11.01.2021\"},{\"appid\": 727970,\"ordate\": \"14.11.2017\"},{\"appid\": 367010,\"ordate\": \"31.03.2016\"},{\"appid\": 1303660,\"ordate\": \"24.06.2020\"},{\"appid\": 610500,\"ordate\": \"18.05.2017\"},{\"appid\": 2279410,\"ordate\": \"29.05.2023\"},{\"appid\": 1684710,\"ordate\": \"12.08.2021\"},{\"appid\": 2341560,\"ordate\": \"31.07.2024\"},{\"appid\": 2963880,\"ordate\": \"19.06.2024\"},{\"appid\": 608120,\"ordate\": \"18.06.2019\"},{\"appid\": 385240,\"ordate\": \"29.02.2016\"},{\"appid\": 695600,\"ordate\": \"24.10.2017\"},{\"appid\": 1606280,\"ordate\": \"24.05.2021\"},{\"appid\": 1348810,\"ordate\": \"28.07.2020\"},{\"appid\": 1904820,\"ordate\": \"31.03.2022\"},{\"appid\": 3006100,\"ordate\": \"21.06.2024\"},{\"appid\": 2004960,\"ordate\": \"22.05.2024\"},{\"appid\": 894270,\"ordate\": \"31.07.2018\"},{\"appid\": 800650,\"ordate\": \"14.03.2018\"},{\"appid\": 287900,\"ordate\": \"28.01.2016\"},{\"appid\": 512020,\"ordate\": \"09.09.2016\"},{\"appid\": 1461960,\"ordate\": \"04.11.2021\"},{\"appid\": 1759920,\"ordate\": \"07.12.2022\"},{\"appid\": 423810,\"ordate\": \"24.03.2016\"},{\"appid\": 1314590,\"ordate\": \"11.06.2020\"},{\"appid\": 960940,\"ordate\": \"12.12.2018\"},{\"appid\": 1308500,\"ordate\": \"04.03.2021\"},{\"appid\": 797400,\"ordate\": \"27.05.2019\"},{\"appid\": 742380,\"ordate\": \"21.12.2017\"},{\"appid\": 1256710,\"ordate\": \"08.09.2020\"},{\"appid\": 2464190,\"ordate\": \"01.07.2023\"},{\"appid\": 1357210,\"ordate\": \"27.04.2023\"},{\"appid\": 1297650,\"ordate\": \"22.05.2020\"},{\"appid\": 1425010,\"ordate\": \"09.02.2024\"},{\"appid\": 1763510,\"ordate\": \"18.05.2023\"},{\"appid\": 2254030,\"ordate\": \"06.04.2023\"},{\"appid\": 895610,\"ordate\": \"10.10.2018\"},{\"appid\": 1248060,\"ordate\": \"19.11.2020\"},{\"appid\": 952240,\"ordate\": \"19.11.2020\"},{\"appid\": 1097750,\"ordate\": \"22.10.2020\"},{\"appid\": 2411980,\"ordate\": \"22.03.2024\"},{\"appid\": 1393380,\"ordate\": \"19.10.2021\"},{\"appid\": 2603680,\"ordate\": \"24.05.2024\"},{\"appid\": 1944360,\"ordate\": \"19.08.2022\"},{\"appid\": 1690180,\"ordate\": \"30.01.2024\"},{\"appid\": 725620,\"ordate\": \"22.02.2019\"},{\"appid\": 2056490,\"ordate\": \"02.08.2022\"},{\"appid\": 469710,\"ordate\": \"08.06.2016\"},{\"appid\": 1729060,\"ordate\": \"02.09.2021\"},{\"appid\": 1059150,\"ordate\": \"17.05.2019\"},{\"appid\": 1511830,\"ordate\": \"02.02.2021\"},{\"appid\": 1526360,\"ordate\": \"11.02.2021\"},{\"appid\": 1148570,\"ordate\": \"20.11.2019\"},{\"appid\": 2285280,\"ordate\": \"09.03.2023\"},{\"appid\": 1851240,\"ordate\": \"01.07.2022\"},{\"appid\": 1786010,\"ordate\": \"17.05.2023\"},{\"appid\": 592890,\"ordate\": \"07.09.2017\"},{\"appid\": 829660,\"ordate\": \"01.03.2019\"},{\"appid\": 1270010,\"ordate\": \"29.04.2020\"},{\"appid\": 893610,\"ordate\": \"19.09.2018\"},{\"appid\": 1563970,\"ordate\": \"04.04.2021\"},{\"appid\": 1866470,\"ordate\": \"20.01.2022\"},{\"appid\": 391720,\"ordate\": \"27.08.2015\"},{\"appid\": 2088770,\"ordate\": \"20.06.2024\"},{\"appid\": 1219420,\"ordate\": \"30.06.2020\"},{\"appid\": 454410,\"ordate\": \"18.08.2016\"},{\"appid\": 1127170,\"ordate\": \"18.03.2020\"},{\"appid\": 1338520,\"ordate\": \"02.06.2020\"},{\"appid\": 1726020,\"ordate\": \"29.09.2021\"},{\"appid\": 2598980,\"ordate\": \"18.04.2024\"},{\"appid\": 1692290,\"ordate\": \"22.07.2022\"},{\"appid\": 2452370,\"ordate\": \"20.06.2023\"},{\"appid\": 1224030,\"ordate\": \"20.05.2023\"},{\"appid\": 2746710,\"ordate\": \"05.01.2024\"},{\"appid\": 714640,\"ordate\": \"05.10.2017\"},{\"appid\": 582360,\"ordate\": \"15.05.2017\"},{\"appid\": 719280,\"ordate\": \"28.11.2017\"},{\"appid\": 405000,\"ordate\": \"17.11.2015\"},{\"appid\": 420760,\"ordate\": \"11.12.2023\"},{\"appid\": 1019400,\"ordate\": \"19.04.2019\"},{\"appid\": 1462760,\"ordate\": \"25.11.2020\"},{\"appid\": 370590,\"ordate\": \"28.06.2015\"},{\"appid\": 2498090,\"ordate\": \"18.07.2023\"},{\"appid\": 1611420,\"ordate\": \"02.05.2022\"},{\"appid\": 2107860,\"ordate\": \"07.02.2023\"},{\"appid\": 2954730,\"ordate\": \"18.05.2024\"},{\"appid\": 2865640,\"ordate\": \"27.03.2024\"},{\"appid\": 438480,\"ordate\": \"23.02.2016\"},{\"appid\": 435490,\"ordate\": \"06.04.2016\"},{\"appid\": 406170,\"ordate\": \"06.10.2015\"},{\"appid\": 1456940,\"ordate\": \"13.08.2024\"},{\"appid\": 1194590,\"ordate\": \"16.03.2021\"},{\"appid\": 882210,\"ordate\": \"18.10.2018\"},{\"appid\": 1078670,\"ordate\": \"15.08.2019\"},{\"appid\": 2120310,\"ordate\": \"03.04.2023\"},{\"appid\": 1618020,\"ordate\": \"09.12.2022\"},{\"appid\": 2150460,\"ordate\": \"02.10.2022\"},{\"appid\": 1262470,\"ordate\": \"15.04.2020\"},{\"appid\": 823610,\"ordate\": \"23.01.2019\"},{\"appid\": 1953100,\"ordate\": \"13.08.2024\"},{\"appid\": 279940,\"ordate\": \"05.09.2014\"},{\"appid\": 817680,\"ordate\": \"17.03.2018\"},{\"appid\": 2053080,\"ordate\": \"22.11.2022\"},{\"appid\": 351230,\"ordate\": \"21.04.2015\"},{\"appid\": 759840,\"ordate\": \"21.03.2018\"},{\"appid\": 1144970,\"ordate\": \"13.02.2020\"},{\"appid\": 1165720,\"ordate\": \"21.01.2020\"},{\"appid\": 1729420,\"ordate\": \"16.09.2021\"},{\"appid\": 2215910,\"ordate\": \"21.09.2023\"},{\"appid\": 2266930,\"ordate\": \"17.03.2023\"},{\"appid\": 1593700,\"ordate\": \"10.05.2021\"},{\"appid\": 2307660,\"ordate\": \"27.08.2023\"},{\"appid\": 297110,\"ordate\": \"16.05.2014\"},{\"appid\": 2488590,\"ordate\": \"27.05.2024\"},{\"appid\": 777770,\"ordate\": \"12.10.2018\"},{\"appid\": 772730,\"ordate\": \"08.02.2019\"},{\"appid\": 926810,\"ordate\": \"24.10.2018\"},{\"appid\": 2590910,\"ordate\": \"11.11.2023\"},{\"appid\": 1489660,\"ordate\": \"30.04.2021\"},{\"appid\": 1176160,\"ordate\": \"09.11.2019\"},{\"appid\": 945680,\"ordate\": \"16.08.2019\"},{\"appid\": 1952930,\"ordate\": \"28.07.2022\"},{\"appid\": 383800,\"ordate\": \"08.08.2015\"},{\"appid\": 1409160,\"ordate\": \"30.03.2023\"},{\"appid\": 1431430,\"ordate\": \"08.12.2022\"},{\"appid\": 457340,\"ordate\": \"01.07.2016\"},{\"appid\": 2172120,\"ordate\": \"08.12.2022\"},{\"appid\": 1482870,\"ordate\": \"23.07.2021\"},{\"appid\": 1977270,\"ordate\": \"20.05.2022\"},{\"appid\": 853200,\"ordate\": \"11.07.2018\"},{\"appid\": 2477030,\"ordate\": \"26.07.2023\"},{\"appid\": 2887260,\"ordate\": \"03.05.2024\"},{\"appid\": 1677980,\"ordate\": \"15.09.2022\"},{\"appid\": 1202300,\"ordate\": \"24.03.2020\"},{\"appid\": 1211490,\"ordate\": \"27.12.2019\"},{\"appid\": 1979990,\"ordate\": \"03.02.2023\"},{\"appid\": 1171230,\"ordate\": \"27.11.2019\"},{\"appid\": 2397600,\"ordate\": \"30.06.2023\"},{\"appid\": 2292060,\"ordate\": \"18.09.2023\"},{\"appid\": 1455410,\"ordate\": \"03.02.2021\"},{\"appid\": 2463340,\"ordate\": \"23.06.2023\"},{\"appid\": 1408160,\"ordate\": \"06.11.2020\"},{\"appid\": 230230,\"ordate\": \"17.01.2014\"},{\"appid\": 1537910,\"ordate\": \"25.07.2022\"},{\"appid\": 2729350,\"ordate\": \"02.08.2024\"},{\"appid\": 1273180,\"ordate\": \"18.04.2020\"},{\"appid\": 1234620,\"ordate\": \"01.03.2020\"},{\"appid\": 341540,\"ordate\": \"07.01.2015\"},{\"appid\": 1755350,\"ordate\": \"12.12.2021\"},{\"appid\": 2998040,\"ordate\": \"24.06.2024\"},{\"appid\": 2626860,\"ordate\": \"24.06.2024\"},{\"appid\": 989450,\"ordate\": \"20.02.2019\"},{\"appid\": 2961880,\"ordate\": \"11.06.2024\"},{\"appid\": 606230,\"ordate\": \"30.11.2018\"},{\"appid\": 325630,\"ordate\": \"14.10.2014\"},{\"appid\": 340360,\"ordate\": \"14.01.2015\"},{\"appid\": 3075710,\"ordate\": \"18.07.2024\"},{\"appid\": 1929870,\"ordate\": \"29.04.2022\"},{\"appid\": 1370820,\"ordate\": \"19.02.2021\"},{\"appid\": 1590910,\"ordate\": \"26.10.2021\"},{\"appid\": 1042920,\"ordate\": \"16.11.2021\"},{\"appid\": 503350,\"ordate\": \"27.10.2016\"},{\"appid\": 300570,\"ordate\": \"19.01.2015\"},{\"appid\": 819500,\"ordate\": \"28.08.2018\"},{\"appid\": 1216710,\"ordate\": \"24.08.2020\"},{\"appid\": 1388770,\"ordate\": \"04.01.2021\"},{\"appid\": 2866000,\"ordate\": \"25.03.2024\"},{\"appid\": 644560,\"ordate\": \"08.11.2017\"},{\"appid\": 938220,\"ordate\": \"18.10.2018\"},{\"appid\": 1018270,\"ordate\": \"23.05.2019\"},{\"appid\": 2195410,\"ordate\": \"04.06.2024\"},{\"appid\": 950370,\"ordate\": \"31.10.2018\"},{\"appid\": 1008510,\"ordate\": \"18.01.2019\"},{\"appid\": 1465310,\"ordate\": \"20.07.2021\"},{\"appid\": 1515460,\"ordate\": \"01.07.2021\"},{\"appid\": 742970,\"ordate\": \"28.02.2022\"},{\"appid\": 1001950,\"ordate\": \"02.09.2020\"},{\"appid\": 1871990,\"ordate\": \"12.09.2022\"},{\"appid\": 2916460,\"ordate\": \"23.04.2024\"},{\"appid\": 2094190,\"ordate\": \"03.11.2022\"},{\"appid\": 354770,\"ordate\": \"01.05.2015\"},{\"appid\": 314410,\"ordate\": \"27.03.2015\"},{\"appid\": 404640,\"ordate\": \"30.10.2015\"},{\"appid\": 1723320,\"ordate\": \"16.09.2021\"},{\"appid\": 602480,\"ordate\": \"25.10.2017\"},{\"appid\": 648430,\"ordate\": \"12.09.2017\"},{\"appid\": 2444480,\"ordate\": \"03.11.2023\"},{\"appid\": 546350,\"ordate\": \"11.11.2016\"},{\"appid\": 621940,\"ordate\": \"08.05.2018\"},{\"appid\": 2846320,\"ordate\": \"22.03.2024\"},{\"appid\": 1414180,\"ordate\": \"30.12.2020\"},{\"appid\": 2012570,\"ordate\": \"16.12.2022\"},{\"appid\": 883670,\"ordate\": \"10.07.2018\"},{\"appid\": 2260100,\"ordate\": \"01.08.2023\"},{\"appid\": 1145660,\"ordate\": \"06.09.2019\"},{\"appid\": 1077630,\"ordate\": \"14.03.2020\"},{\"appid\": 1040370,\"ordate\": \"15.11.2019\"},{\"appid\": 2354600,\"ordate\": \"12.04.2023\"},{\"appid\": 1229310,\"ordate\": \"08.04.2020\"},{\"appid\": 1454000,\"ordate\": \"31.05.2023\"},{\"appid\": 793600,\"ordate\": \"09.06.2018\"},{\"appid\": 3003300,\"ordate\": \"05.09.2024\"},{\"appid\": 564230,\"ordate\": \"11.07.2017\"},{\"appid\": 1632140,\"ordate\": \"19.10.2021\"},{\"appid\": 261760,\"ordate\": \"19.03.2014\"},{\"appid\": 426190,\"ordate\": \"23.02.2017\"},{\"appid\": 2242930,\"ordate\": \"24.05.2023\"},{\"appid\": 411480,\"ordate\": \"31.01.2017\"},{\"appid\": 869060,\"ordate\": \"14.02.2019\"},{\"appid\": 256030,\"ordate\": \"13.06.2014\"},{\"appid\": 553690,\"ordate\": \"21.12.2016\"},{\"appid\": 1144860,\"ordate\": \"05.09.2019\"},{\"appid\": 915460,\"ordate\": \"03.11.2018\"},{\"appid\": 731600,\"ordate\": \"01.11.2017\"},{\"appid\": 2319640,\"ordate\": \"18.10.2023\"},{\"appid\": 906650,\"ordate\": \"24.08.2018\"},{\"appid\": 2558700,\"ordate\": \"01.09.2023\"},{\"appid\": 2062840,\"ordate\": \"02.08.2022\"},{\"appid\": 536670,\"ordate\": \"30.06.2018\"},{\"appid\": 1116500,\"ordate\": \"31.07.2019\"},{\"appid\": 2151580,\"ordate\": \"30.11.2022\"},{\"appid\": 1817940,\"ordate\": \"22.12.2021\"},{\"appid\": 2197650,\"ordate\": \"29.09.2023\"},{\"appid\": 1366850,\"ordate\": \"04.05.2023\"},{\"appid\": 1608310,\"ordate\": \"21.07.2022\"},{\"appid\": 1886010,\"ordate\": \"24.02.2022\"},{\"appid\": 2841950,\"ordate\": \"28.06.2024\"},{\"appid\": 836460,\"ordate\": \"03.06.2018\"},{\"appid\": 2443370,\"ordate\": \"06.11.2023\"},{\"appid\": 412600,\"ordate\": \"26.10.2015\"},{\"appid\": 1088070,\"ordate\": \"03.06.2019\"},{\"appid\": 1058740,\"ordate\": \"27.05.2019\"},{\"appid\": 1058430,\"ordate\": \"19.04.2019\"},{\"appid\": 256010,\"ordate\": \"16.05.2014\"},{\"appid\": 658470,\"ordate\": \"16.03.2018\"},{\"appid\": 2263510,\"ordate\": \"17.01.2023\"},{\"appid\": 1667750,\"ordate\": \"29.05.2023\"},{\"appid\": 2369950,\"ordate\": \"04.12.2023\"},{\"appid\": 1798140,\"ordate\": \"10.11.2021\"},{\"appid\": 1992530,\"ordate\": \"01.07.2022\"},{\"appid\": 712530,\"ordate\": \"06.05.2018\"},{\"appid\": 1760340,\"ordate\": \"01.11.2021\"},{\"appid\": 2155280,\"ordate\": \"12.01.2023\"},{\"appid\": 1146230,\"ordate\": \"16.01.2020\"},{\"appid\": 2391640,\"ordate\": \"28.08.2023\"},{\"appid\": 1524400,\"ordate\": \"16.02.2021\"},{\"appid\": 1000080,\"ordate\": \"18.01.2019\"},{\"appid\": 955540,\"ordate\": \"14.12.2018\"},{\"appid\": 1917810,\"ordate\": \"13.06.2023\"},{\"appid\": 556920,\"ordate\": \"13.05.2017\"},{\"appid\": 956870,\"ordate\": \"16.11.2018\"},{\"appid\": 1568590,\"ordate\": \"29.04.2021\"},{\"appid\": 2213910,\"ordate\": \"14.12.2022\"},{\"appid\": 677040,\"ordate\": \"27.09.2017\"},{\"appid\": 2217450,\"ordate\": \"28.12.2022\"},{\"appid\": 838270,\"ordate\": \"26.04.2018\"},{\"appid\": 909270,\"ordate\": \"13.08.2018\"},{\"appid\": 1455490,\"ordate\": \"10.11.2020\"},{\"appid\": 1287920,\"ordate\": \"28.06.2021\"},{\"appid\": 2476720,\"ordate\": \"22.04.2024\"},{\"appid\": 1691320,\"ordate\": \"11.03.2024\"},{\"appid\": 343280,\"ordate\": \"19.02.2015\"},{\"appid\": 1107440,\"ordate\": \"10.09.2019\"},{\"appid\": 330270,\"ordate\": \"17.03.2015\"},{\"appid\": 1882550,\"ordate\": \"24.11.2022\"},{\"appid\": 2196790,\"ordate\": \"28.12.2022\"},{\"appid\": 499560,\"ordate\": \"10.11.2016\"},{\"appid\": 1104640,\"ordate\": \"25.07.2019\"},{\"appid\": 2283470,\"ordate\": \"27.08.2024\"},{\"appid\": 2530540,\"ordate\": \"11.09.2023\"},{\"appid\": 467660,\"ordate\": \"14.03.2017\"},{\"appid\": 427570,\"ordate\": \"01.12.2016\"},{\"appid\": 801750,\"ordate\": \"15.08.2019\"},{\"appid\": 529840,\"ordate\": \"11.04.2017\"},{\"appid\": 402530,\"ordate\": \"27.10.2015\"},{\"appid\": 343630,\"ordate\": \"13.02.2015\"},{\"appid\": 363270,\"ordate\": \"21.08.2015\"},{\"appid\": 463860,\"ordate\": \"14.07.2016\"},{\"appid\": 345180,\"ordate\": \"20.02.2015\"},{\"appid\": 1981000,\"ordate\": \"30.05.2022\"},{\"appid\": 366510,\"ordate\": \"02.07.2015\"},{\"appid\": 1819460,\"ordate\": \"21.08.2024\"},{\"appid\": 2476850,\"ordate\": \"06.11.2023\"},{\"appid\": 436260,\"ordate\": \"05.04.2016\"},{\"appid\": 1592110,\"ordate\": \"16.03.2022\"},{\"appid\": 1208860,\"ordate\": \"13.01.2020\"},{\"appid\": 914260,\"ordate\": \"01.03.2019\"},{\"appid\": 1277500,\"ordate\": \"28.04.2021\"},{\"appid\": 1201940,\"ordate\": \"16.12.2019\"},{\"appid\": 1349120,\"ordate\": \"16.09.2020\"},{\"appid\": 2996990,\"ordate\": \"15.06.2024\"},{\"appid\": 914010,\"ordate\": \"30.04.2020\"},{\"appid\": 1716690,\"ordate\": \"15.10.2021\"},{\"appid\": 2497910,\"ordate\": \"20.10.2023\"},{\"appid\": 318860,\"ordate\": \"04.12.2014\"},{\"appid\": 1479400,\"ordate\": \"24.11.2022\"},{\"appid\": 942900,\"ordate\": \"16.11.2018\"},{\"appid\": 1650600,\"ordate\": \"26.08.2024\"},{\"appid\": 400450,\"ordate\": \"31.03.2016\"},{\"appid\": 2015860,\"ordate\": \"15.07.2022\"},{\"appid\": 2569330,\"ordate\": \"05.10.2023\"},{\"appid\": 318600,\"ordate\": \"24.09.2015\"},{\"appid\": 1050540,\"ordate\": \"03.04.2019\"},{\"appid\": 454540,\"ordate\": \"15.06.2016\"},{\"appid\": 251670,\"ordate\": \"18.04.2014\"},{\"appid\": 2535910,\"ordate\": \"15.09.2023\"},{\"appid\": 711930,\"ordate\": \"21.10.2017\"},{\"appid\": 1993710,\"ordate\": \"05.10.2023\"},{\"appid\": 1700860,\"ordate\": \"27.08.2021\"},{\"appid\": 1063830,\"ordate\": \"28.05.2019\"},{\"appid\": 1494530,\"ordate\": \"20.01.2021\"},{\"appid\": 1840660,\"ordate\": \"22.06.2022\"},{\"appid\": 2014620,\"ordate\": \"17.02.2023\"},{\"appid\": 2360710,\"ordate\": \"21.04.2023\"},{\"appid\": 546410,\"ordate\": \"21.12.2016\"},{\"appid\": 2279640,\"ordate\": \"22.02.2023\"},{\"appid\": 2423770,\"ordate\": \"21.06.2023\"},{\"appid\": 1959050,\"ordate\": \"10.08.2022\"},{\"appid\": 984360,\"ordate\": \"04.04.2019\"},{\"appid\": 451840,\"ordate\": \"16.04.2016\"},{\"appid\": 1394480,\"ordate\": \"01.10.2021\"},{\"appid\": 709880,\"ordate\": \"05.04.2018\"},{\"appid\": 838630,\"ordate\": \"14.11.2019\"},{\"appid\": 1802520,\"ordate\": \"18.03.2022\"},{\"appid\": 2944240,\"ordate\": \"23.05.2024\"},{\"appid\": 1091090,\"ordate\": \"02.10.2019\"},{\"appid\": 1142410,\"ordate\": \"17.10.2019\"},{\"appid\": 773430,\"ordate\": \"04.06.2018\"},{\"appid\": 463670,\"ordate\": \"21.10.2016\"},{\"appid\": 1152120,\"ordate\": \"24.04.2021\"},{\"appid\": 885790,\"ordate\": \"24.08.2018\"},{\"appid\": 1369630,\"ordate\": \"21.01.2021\"},{\"appid\": 1928420,\"ordate\": \"23.04.2023\"},{\"appid\": 2077610,\"ordate\": \"22.07.2022\"},{\"appid\": 1547300,\"ordate\": \"03.04.2021\"},{\"appid\": 2856030,\"ordate\": \"19.03.2024\"},{\"appid\": 1674890,\"ordate\": \"17.08.2021\"},{\"appid\": 542570,\"ordate\": \"20.01.2017\"},{\"appid\": 2620200,\"ordate\": \"26.05.2024\"},{\"appid\": 2521460,\"ordate\": \"03.08.2023\"},{\"appid\": 1412960,\"ordate\": \"31.03.2023\"},{\"appid\": 2641500,\"ordate\": \"30.10.2023\"},{\"appid\": 1294720,\"ordate\": \"06.11.2020\"},{\"appid\": 1609220,\"ordate\": \"24.02.2022\"},{\"appid\": 264300,\"ordate\": \"03.06.2014\"},{\"appid\": 686620,\"ordate\": \"18.11.2017\"},{\"appid\": 464350,\"ordate\": \"20.06.2016\"},{\"appid\": 1253450,\"ordate\": \"23.07.2020\"},{\"appid\": 1255050,\"ordate\": \"04.09.2020\"},{\"appid\": 1751890,\"ordate\": \"21.01.2022\"},{\"appid\": 1341710,\"ordate\": \"21.04.2021\"},{\"appid\": 1946590,\"ordate\": \"14.05.2022\"},{\"appid\": 1528810,\"ordate\": \"22.06.2021\"},{\"appid\": 529360,\"ordate\": \"14.12.2016\"},{\"appid\": 1557180,\"ordate\": \"21.02.2023\"},{\"appid\": 267730,\"ordate\": \"17.02.2014\"},{\"appid\": 584890,\"ordate\": \"20.12.2017\"},{\"appid\": 1316870,\"ordate\": \"06.10.2020\"},{\"appid\": 1848840,\"ordate\": \"23.01.2022\"},{\"appid\": 1690040,\"ordate\": \"30.11.2021\"},{\"appid\": 939510,\"ordate\": \"02.05.2019\"},{\"appid\": 527380,\"ordate\": \"17.11.2016\"},{\"appid\": 1585930,\"ordate\": \"28.04.2021\"},{\"appid\": 524010,\"ordate\": \"17.04.2019\"},{\"appid\": 746660,\"ordate\": \"28.02.2018\"},{\"appid\": 767930,\"ordate\": \"07.05.2018\"},{\"appid\": 544390,\"ordate\": \"02.10.2018\"},{\"appid\": 1641670,\"ordate\": \"22.01.2022\"},{\"appid\": 466240,\"ordate\": \"07.10.2016\"},{\"appid\": 2714910,\"ordate\": \"25.06.2024\"},{\"appid\": 2529740,\"ordate\": \"02.04.2024\"},{\"appid\": 283160,\"ordate\": \"07.06.2016\"},{\"appid\": 2231040,\"ordate\": \"24.08.2023\"},{\"appid\": 681660,\"ordate\": \"29.05.2018\"},{\"appid\": 425670,\"ordate\": \"26.04.2016\"},{\"appid\": 289130,\"ordate\": \"24.04.2014\"},{\"appid\": 1274710,\"ordate\": \"03.09.2021\"},{\"appid\": 422020,\"ordate\": \"08.01.2016\"},{\"appid\": 556310,\"ordate\": \"07.04.2017\"},{\"appid\": 2701770,\"ordate\": \"25.06.2024\"},{\"appid\": 2542110,\"ordate\": \"20.09.2023\"},{\"appid\": 1919740,\"ordate\": \"19.08.2022\"},{\"appid\": 1348750,\"ordate\": \"03.12.2021\"},{\"appid\": 1696670,\"ordate\": \"27.05.2022\"},{\"appid\": 1090930,\"ordate\": \"11.07.2019\"},{\"appid\": 455300,\"ordate\": \"16.05.2019\"},{\"appid\": 1353300,\"ordate\": \"27.07.2020\"},{\"appid\": 1807240,\"ordate\": \"29.12.2021\"},{\"appid\": 2207750,\"ordate\": \"10.03.2023\"},{\"appid\": 1351500,\"ordate\": \"15.12.2020\"},{\"appid\": 428930,\"ordate\": \"28.01.2016\"},{\"appid\": 994340,\"ordate\": \"03.10.2019\"},{\"appid\": 716560,\"ordate\": \"17.10.2018\"},{\"appid\": 960900,\"ordate\": \"29.05.2019\"},{\"appid\": 1050900,\"ordate\": \"03.05.2019\"},{\"appid\": 2623100,\"ordate\": \"25.10.2023\"},{\"appid\": 2084240,\"ordate\": \"16.02.2023\"},{\"appid\": 1395270,\"ordate\": \"02.06.2021\"},{\"appid\": 595270,\"ordate\": \"27.02.2019\"},{\"appid\": 2665940,\"ordate\": \"18.06.2024\"},{\"appid\": 652520,\"ordate\": \"28.06.2017\"},{\"appid\": 475490,\"ordate\": \"19.05.2016\"},{\"appid\": 1673630,\"ordate\": \"09.06.2022\"},{\"appid\": 436520,\"ordate\": \"08.09.2016\"},{\"appid\": 502700,\"ordate\": \"21.09.2016\"},{\"appid\": 753110,\"ordate\": \"30.12.2017\"},{\"appid\": 2106080,\"ordate\": \"27.09.2022\"},{\"appid\": 883560,\"ordate\": \"08.10.2018\"},{\"appid\": 1226640,\"ordate\": \"29.07.2020\"},{\"appid\": 1117350,\"ordate\": \"01.09.2022\"},{\"appid\": 1497640,\"ordate\": \"22.04.2022\"},{\"appid\": 610310,\"ordate\": \"14.04.2017\"},{\"appid\": 503690,\"ordate\": \"26.08.2016\"},{\"appid\": 1303760,\"ordate\": \"14.05.2020\"},{\"appid\": 893790,\"ordate\": \"29.10.2018\"},{\"appid\": 402570,\"ordate\": \"13.05.2016\"},{\"appid\": 2186300,\"ordate\": \"07.11.2022\"},{\"appid\": 2311230,\"ordate\": \"11.03.2024\"},{\"appid\": 1901330,\"ordate\": \"24.11.2022\"},{\"appid\": 2529090,\"ordate\": \"16.09.2024\"},{\"appid\": 1830190,\"ordate\": \"16.12.2022\"},{\"appid\": 2662740,\"ordate\": \"10.11.2023\"},{\"appid\": 1843470,\"ordate\": \"18.09.2023\"},{\"appid\": 710610,\"ordate\": \"21.11.2017\"},{\"appid\": 2518350,\"ordate\": \"20.10.2023\"},{\"appid\": 1688390,\"ordate\": \"29.07.2021\"},{\"appid\": 1990050,\"ordate\": \"02.08.2022\"},{\"appid\": 299440,\"ordate\": \"15.07.2014\"},{\"appid\": 841770,\"ordate\": \"25.05.2018\"},{\"appid\": 2738910,\"ordate\": \"13.08.2024\"},{\"appid\": 963490,\"ordate\": \"13.06.2019\"},{\"appid\": 1202930,\"ordate\": \"10.04.2020\"},{\"appid\": 2296320,\"ordate\": \"09.05.2023\"},{\"appid\": 378810,\"ordate\": \"30.09.2015\"},{\"appid\": 2719400,\"ordate\": \"02.02.2024\"},{\"appid\": 1961060,\"ordate\": \"02.11.2022\"},{\"appid\": 920690,\"ordate\": \"09.10.2018\"},{\"appid\": 798240,\"ordate\": \"25.04.2018\"},{\"appid\": 1720750,\"ordate\": \"05.09.2021\"},{\"appid\": 1154080,\"ordate\": \"07.01.2020\"},{\"appid\": 3022510,\"ordate\": \"17.07.2024\"},{\"appid\": 2853840,\"ordate\": \"05.05.2024\"},{\"appid\": 1519010,\"ordate\": \"15.02.2022\"},{\"appid\": 2077940,\"ordate\": \"04.02.2023\"},{\"appid\": 3101920,\"ordate\": \"31.07.2024\"},{\"appid\": 907380,\"ordate\": \"27.09.2018\"},{\"appid\": 357070,\"ordate\": \"25.03.2015\"},{\"appid\": 521920,\"ordate\": \"01.09.2016\"},{\"appid\": 2860400,\"ordate\": \"05.07.2024\"},{\"appid\": 2196870,\"ordate\": \"18.11.2023\"},{\"appid\": 2607310,\"ordate\": \"28.10.2023\"},{\"appid\": 475530,\"ordate\": \"27.03.2017\"},{\"appid\": 371200,\"ordate\": \"21.04.2016\"},{\"appid\": 369990,\"ordate\": \"22.10.2015\"},{\"appid\": 1013200,\"ordate\": \"26.07.2019\"},{\"appid\": 2604980,\"ordate\": \"29.02.2024\"},{\"appid\": 1642790,\"ordate\": \"30.11.2022\"},{\"appid\": 589730,\"ordate\": \"17.02.2017\"},{\"appid\": 1133070,\"ordate\": \"16.10.2019\"},{\"appid\": 285070,\"ordate\": \"04.09.2015\"},{\"appid\": 453960,\"ordate\": \"25.04.2016\"},{\"appid\": 2646120,\"ordate\": \"27.02.2024\"},{\"appid\": 391280,\"ordate\": \"25.07.2016\"},{\"appid\": 1918080,\"ordate\": \"25.03.2022\"},{\"appid\": 2338950,\"ordate\": \"21.07.2023\"},{\"appid\": 437870,\"ordate\": \"12.02.2016\"},{\"appid\": 738210,\"ordate\": \"17.11.2017\"},{\"appid\": 468100,\"ordate\": \"13.07.2016\"},{\"appid\": 351720,\"ordate\": \"02.12.2015\"},{\"appid\": 1950270,\"ordate\": \"17.01.2023\"},{\"appid\": 1327370,\"ordate\": \"11.06.2020\"},{\"appid\": 494830,\"ordate\": \"08.07.2016\"},{\"appid\": 1188430,\"ordate\": \"22.11.2019\"},{\"appid\": 1322090,\"ordate\": \"04.06.2020\"},{\"appid\": 1174390,\"ordate\": \"18.11.2019\"},{\"appid\": 2376870,\"ordate\": \"13.05.2024\"},{\"appid\": 1621450,\"ordate\": \"07.07.2021\"},{\"appid\": 2163400,\"ordate\": \"09.05.2023\"},{\"appid\": 1497230,\"ordate\": \"23.04.2021\"},{\"appid\": 2281480,\"ordate\": \"07.06.2023\"},{\"appid\": 1029470,\"ordate\": \"28.02.2019\"},{\"appid\": 260330,\"ordate\": \"03.05.2014\"},{\"appid\": 615630,\"ordate\": \"08.04.2017\"},{\"appid\": 2244480,\"ordate\": \"28.02.2023\"},{\"appid\": 331200,\"ordate\": \"13.11.2014\"},{\"appid\": 1743830,\"ordate\": \"02.03.2023\"},{\"appid\": 1314300,\"ordate\": \"19.06.2020\"},{\"appid\": 2595540,\"ordate\": \"10.05.2024\"},{\"appid\": 2080100,\"ordate\": \"29.07.2022\"},{\"appid\": 832140,\"ordate\": \"10.08.2020\"},{\"appid\": 438300,\"ordate\": \"01.07.2016\"},{\"appid\": 825500,\"ordate\": \"13.04.2018\"},{\"appid\": 2068400,\"ordate\": \"10.01.2023\"},{\"appid\": 2821440,\"ordate\": \"17.05.2024\"},{\"appid\": 1895860,\"ordate\": \"09.04.2022\"},{\"appid\": 1422980,\"ordate\": \"18.12.2020\"},{\"appid\": 1577940,\"ordate\": \"11.08.2021\"},{\"appid\": 916930,\"ordate\": \"06.09.2018\"},{\"appid\": 571340,\"ordate\": \"26.04.2017\"},{\"appid\": 2253110,\"ordate\": \"14.07.2023\"},{\"appid\": 2222530,\"ordate\": \"09.01.2023\"},{\"appid\": 446150,\"ordate\": \"20.09.2017\"},{\"appid\": 1593780,\"ordate\": \"17.11.2022\"},{\"appid\": 2736710,\"ordate\": \"06.01.2024\"},{\"appid\": 1491480,\"ordate\": \"30.12.2020\"},{\"appid\": 675270,\"ordate\": \"02.01.2020\"},{\"appid\": 464020,\"ordate\": \"17.02.2018\"},{\"appid\": 2110550,\"ordate\": \"05.11.2022\"},{\"appid\": 1520240,\"ordate\": \"04.03.2021\"},{\"appid\": 1361180,\"ordate\": \"29.08.2020\"},{\"appid\": 521950,\"ordate\": \"01.12.2016\"},{\"appid\": 1162570,\"ordate\": \"02.03.2021\"},{\"appid\": 1111760,\"ordate\": \"05.08.2019\"},{\"appid\": 1386500,\"ordate\": \"06.08.2020\"},{\"appid\": 1978380,\"ordate\": \"24.01.2023\"},{\"appid\": 823910,\"ordate\": \"08.02.2020\"},{\"appid\": 1572220,\"ordate\": \"17.06.2021\"},{\"appid\": 1372630,\"ordate\": \"05.08.2020\"},{\"appid\": 666090,\"ordate\": \"02.10.2017\"},{\"appid\": 1520880,\"ordate\": \"29.01.2022\"},{\"appid\": 610960,\"ordate\": \"21.04.2017\"},{\"appid\": 566530,\"ordate\": \"19.12.2016\"},{\"appid\": 513300,\"ordate\": \"14.10.2016\"},{\"appid\": 1693430,\"ordate\": \"06.08.2021\"},{\"appid\": 1151130,\"ordate\": \"15.10.2022\"},{\"appid\": 347160,\"ordate\": \"18.05.2015\"},{\"appid\": 1514170,\"ordate\": \"21.07.2021\"},{\"appid\": 436490,\"ordate\": \"05.04.2016\"},{\"appid\": 1028680,\"ordate\": \"15.03.2019\"},{\"appid\": 2131020,\"ordate\": \"31.08.2023\"},{\"appid\": 2868920,\"ordate\": \"01.04.2024\"},{\"appid\": 2330870,\"ordate\": \"13.11.2023\"},{\"appid\": 253510,\"ordate\": \"08.07.2014\"},{\"appid\": 658420,\"ordate\": \"23.08.2017\"},{\"appid\": 1586650,\"ordate\": \"07.05.2021\"},{\"appid\": 1870280,\"ordate\": \"09.03.2022\"},{\"appid\": 815290,\"ordate\": \"17.09.2018\"},{\"appid\": 1173380,\"ordate\": \"12.09.2020\"},{\"appid\": 812020,\"ordate\": \"24.04.2018\"},{\"appid\": 355370,\"ordate\": \"31.01.2017\"},{\"appid\": 2318430,\"ordate\": \"31.03.2023\"},{\"appid\": 1617160,\"ordate\": \"11.06.2021\"},{\"appid\": 2093970,\"ordate\": \"18.07.2023\"},{\"appid\": 316370,\"ordate\": \"24.06.2015\"},{\"appid\": 611830,\"ordate\": \"19.07.2017\"},{\"appid\": 1269540,\"ordate\": \"13.04.2020\"},{\"appid\": 379610,\"ordate\": \"04.08.2016\"},{\"appid\": 2878420,\"ordate\": \"22.05.2024\"},{\"appid\": 1179880,\"ordate\": \"13.04.2020\"},{\"appid\": 1720850,\"ordate\": \"15.11.2021\"},{\"appid\": 2533020,\"ordate\": \"15.07.2024\"},{\"appid\": 1041400,\"ordate\": \"15.04.2019\"},{\"appid\": 1318280,\"ordate\": \"30.11.2021\"},{\"appid\": 2510050,\"ordate\": \"25.10.2023\"},{\"appid\": 712060,\"ordate\": \"11.12.2017\"},{\"appid\": 1162900,\"ordate\": \"22.11.2019\"},{\"appid\": 635260,\"ordate\": \"07.07.2017\"},{\"appid\": 593490,\"ordate\": \"26.05.2017\"},{\"appid\": 2220480,\"ordate\": \"01.01.2023\"},{\"appid\": 961040,\"ordate\": \"18.04.2019\"},{\"appid\": 380570,\"ordate\": \"31.07.2015\"},{\"appid\": 2687830,\"ordate\": \"20.06.2024\"},{\"appid\": 376520,\"ordate\": \"10.03.2016\"},{\"appid\": 3027490,\"ordate\": \"22.06.2024\"},{\"appid\": 2775610,\"ordate\": \"16.07.2024\"},{\"appid\": 2203990,\"ordate\": \"16.12.2022\"},{\"appid\": 1491170,\"ordate\": \"11.02.2021\"},{\"appid\": 1403990,\"ordate\": \"04.12.2021\"},{\"appid\": 2762980,\"ordate\": \"01.03.2024\"},{\"appid\": 342020,\"ordate\": \"28.01.2015\"},{\"appid\": 279070,\"ordate\": \"07.06.2016\"},{\"appid\": 1631850,\"ordate\": \"31.05.2021\"},{\"appid\": 353640,\"ordate\": \"07.05.2015\"},{\"appid\": 1625340,\"ordate\": \"07.04.2022\"},{\"appid\": 1127110,\"ordate\": \"20.12.2019\"},{\"appid\": 1437770,\"ordate\": \"12.10.2020\"},{\"appid\": 1641410,\"ordate\": \"21.06.2021\"},{\"appid\": 531270,\"ordate\": \"08.10.2016\"},{\"appid\": 520510,\"ordate\": \"24.09.2016\"},{\"appid\": 2480950,\"ordate\": \"22.03.2024\"},{\"appid\": 1160020,\"ordate\": \"24.01.2020\"},{\"appid\": 1013960,\"ordate\": \"10.05.2019\"},{\"appid\": 2179720,\"ordate\": \"03.12.2022\"},{\"appid\": 2382540,\"ordate\": \"25.05.2023\"},{\"appid\": 427910,\"ordate\": \"11.03.2016\"},{\"appid\": 570420,\"ordate\": \"28.07.2017\"},{\"appid\": 432230,\"ordate\": \"20.05.2016\"},{\"appid\": 320540,\"ordate\": \"26.02.2015\"},{\"appid\": 1175640,\"ordate\": \"19.11.2019\"},{\"appid\": 2796980,\"ordate\": \"27.06.2024\"},{\"appid\": 1859630,\"ordate\": \"21.01.2022\"},{\"appid\": 322750,\"ordate\": \"24.01.2017\"},{\"appid\": 586130,\"ordate\": \"06.04.2017\"},{\"appid\": 2184720,\"ordate\": \"11.11.2022\"},{\"appid\": 1118050,\"ordate\": \"09.08.2019\"},{\"appid\": 2208040,\"ordate\": \"02.06.2023\"},{\"appid\": 2462660,\"ordate\": \"11.07.2023\"},{\"appid\": 1171690,\"ordate\": \"11.06.2024\"},{\"appid\": 385310,\"ordate\": \"15.07.2015\"},{\"appid\": 263760,\"ordate\": \"10.01.2014\"},{\"appid\": 495200,\"ordate\": \"20.07.2016\"},{\"appid\": 1733860,\"ordate\": \"12.11.2021\"},{\"appid\": 1087720,\"ordate\": \"07.06.2019\"},{\"appid\": 2085330,\"ordate\": \"01.03.2023\"},{\"appid\": 1048100,\"ordate\": \"29.03.2019\"},{\"appid\": 992640,\"ordate\": \"18.04.2019\"},{\"appid\": 1199450,\"ordate\": \"26.01.2020\"},{\"appid\": 1347880,\"ordate\": \"28.08.2020\"},{\"appid\": 2142680,\"ordate\": \"29.11.2023\"},{\"appid\": 1536420,\"ordate\": \"13.02.2021\"},{\"appid\": 325790,\"ordate\": \"06.04.2015\"},{\"appid\": 1270100,\"ordate\": \"29.07.2020\"},{\"appid\": 3098850,\"ordate\": \"28.08.2024\"},{\"appid\": 1217310,\"ordate\": \"25.04.2020\"},{\"appid\": 1457220,\"ordate\": \"22.05.2022\"},{\"appid\": 1380010,\"ordate\": \"14.08.2020\"},{\"appid\": 1299260,\"ordate\": \"19.06.2020\"},{\"appid\": 1503850,\"ordate\": \"04.01.2021\"},{\"appid\": 1417540,\"ordate\": \"02.10.2020\"},{\"appid\": 2422590,\"ordate\": \"25.05.2023\"},{\"appid\": 1540570,\"ordate\": \"10.06.2021\"},{\"appid\": 2556670,\"ordate\": \"04.09.2023\"},{\"appid\": 661290,\"ordate\": \"14.03.2019\"},{\"appid\": 462520,\"ordate\": \"30.07.2016\"},{\"appid\": 1223350,\"ordate\": \"25.04.2020\"},{\"appid\": 1288130,\"ordate\": \"24.06.2020\"},{\"appid\": 354030,\"ordate\": \"01.08.2015\"},{\"appid\": 567060,\"ordate\": \"20.01.2017\"},{\"appid\": 1721570,\"ordate\": \"01.11.2021\"},{\"appid\": 1032450,\"ordate\": \"24.01.2020\"},{\"appid\": 2633150,\"ordate\": \"30.10.2023\"},{\"appid\": 1613090,\"ordate\": \"28.05.2021\"},{\"appid\": 1917310,\"ordate\": \"17.03.2022\"},{\"appid\": 2057550,\"ordate\": \"04.04.2023\"},{\"appid\": 3050200,\"ordate\": \"06.08.2024\"},{\"appid\": 858860,\"ordate\": \"07.01.2019\"},{\"appid\": 1747160,\"ordate\": \"18.11.2021\"},{\"appid\": 331500,\"ordate\": \"11.03.2015\"},{\"appid\": 489600,\"ordate\": \"19.10.2016\"},{\"appid\": 2257040,\"ordate\": \"20.01.2023\"},{\"appid\": 873890,\"ordate\": \"26.03.2019\"},{\"appid\": 1073770,\"ordate\": \"12.07.2019\"},{\"appid\": 1278200,\"ordate\": \"18.05.2020\"},{\"appid\": 2198070,\"ordate\": \"12.04.2023\"},{\"appid\": 1714350,\"ordate\": \"13.09.2022\"},{\"appid\": 306660,\"ordate\": \"11.06.2014\"},{\"appid\": 319540,\"ordate\": \"06.11.2019\"},{\"appid\": 1964880,\"ordate\": \"18.07.2022\"},{\"appid\": 1094880,\"ordate\": \"12.06.2019\"},{\"appid\": 322910,\"ordate\": \"04.05.2015\"},{\"appid\": 1983990,\"ordate\": \"12.12.2023\"},{\"appid\": 327890,\"ordate\": \"03.12.2014\"},{\"appid\": 332250,\"ordate\": \"22.01.2015\"},{\"appid\": 765730,\"ordate\": \"03.09.2018\"},{\"appid\": 1694510,\"ordate\": \"12.01.2023\"},{\"appid\": 2452420,\"ordate\": \"22.06.2023\"},{\"appid\": 1237670,\"ordate\": \"26.03.2020\"},{\"appid\": 3073120,\"ordate\": \"31.07.2024\"},{\"appid\": 388260,\"ordate\": \"11.08.2015\"},{\"appid\": 319470,\"ordate\": \"26.05.2015\"},{\"appid\": 1062860,\"ordate\": \"26.10.2023\"},{\"appid\": 584850,\"ordate\": \"01.02.2017\"},{\"appid\": 713450,\"ordate\": \"15.11.2017\"},{\"appid\": 2896000,\"ordate\": \"27.05.2024\"},{\"appid\": 1499220,\"ordate\": \"25.03.2021\"},{\"appid\": 2020090,\"ordate\": \"28.10.2022\"},{\"appid\": 423620,\"ordate\": \"26.01.2016\"},{\"appid\": 464880,\"ordate\": \"15.09.2016\"},{\"appid\": 314430,\"ordate\": \"23.06.2021\"},{\"appid\": 1002930,\"ordate\": \"08.04.2019\"},{\"appid\": 1639500,\"ordate\": \"12.07.2021\"},{\"appid\": 1296580,\"ordate\": \"17.06.2020\"},{\"appid\": 246070,\"ordate\": \"06.05.2014\"},{\"appid\": 907720,\"ordate\": \"31.08.2018\"},{\"appid\": 1495570,\"ordate\": \"25.12.2020\"},{\"appid\": 297120,\"ordate\": \"15.05.2014\"},{\"appid\": 559910,\"ordate\": \"17.05.2017\"},{\"appid\": 1689090,\"ordate\": \"26.04.2022\"},{\"appid\": 428430,\"ordate\": \"22.12.2015\"},{\"appid\": 1371790,\"ordate\": \"18.08.2020\"},{\"appid\": 1510380,\"ordate\": \"05.02.2021\"},{\"appid\": 1756210,\"ordate\": \"23.07.2023\"},{\"appid\": 580300,\"ordate\": \"20.01.2017\"},{\"appid\": 619310,\"ordate\": \"28.04.2017\"},{\"appid\": 1097420,\"ordate\": \"26.07.2019\"},{\"appid\": 1144550,\"ordate\": \"22.06.2020\"},{\"appid\": 1230560,\"ordate\": \"16.04.2020\"},{\"appid\": 1882160,\"ordate\": \"15.04.2022\"},{\"appid\": 295690,\"ordate\": \"19.09.2014\"},{\"appid\": 570230,\"ordate\": \"24.12.2016\"},{\"appid\": 1370040,\"ordate\": \"15.01.2021\"},{\"appid\": 912420,\"ordate\": \"07.11.2018\"},{\"appid\": 1684670,\"ordate\": \"07.04.2022\"},{\"appid\": 1459500,\"ordate\": \"22.12.2020\"},{\"appid\": 1554790,\"ordate\": \"26.03.2021\"},{\"appid\": 1704550,\"ordate\": \"23.12.2021\"},{\"appid\": 2776500,\"ordate\": \"09.07.2024\"},{\"appid\": 214190,\"ordate\": \"08.05.2014\"},{\"appid\": 1528020,\"ordate\": \"13.05.2022\"},{\"appid\": 1170840,\"ordate\": \"18.10.2019\"},{\"appid\": 2187130,\"ordate\": \"25.03.2023\"},{\"appid\": 2428310,\"ordate\": \"15.02.2024\"},{\"appid\": 1037820,\"ordate\": \"21.01.2020\"},{\"appid\": 2364520,\"ordate\": \"28.06.2023\"},{\"appid\": 1260400,\"ordate\": \"10.09.2020\"},{\"appid\": 1755240,\"ordate\": \"18.06.2022\"},{\"appid\": 2818260,\"ordate\": \"16.05.2024\"},{\"appid\": 605200,\"ordate\": \"11.03.2017\"},{\"appid\": 1580250,\"ordate\": \"02.06.2021\"},{\"appid\": 269730,\"ordate\": \"17.04.2014\"},{\"appid\": 2283400,\"ordate\": \"17.02.2023\"},{\"appid\": 1700630,\"ordate\": \"25.05.2022\"},{\"appid\": 1078820,\"ordate\": \"24.06.2019\"},{\"appid\": 1862690,\"ordate\": \"13.12.2022\"},{\"appid\": 501950,\"ordate\": \"12.05.2017\"},{\"appid\": 1707630,\"ordate\": \"06.09.2021\"},{\"appid\": 1384110,\"ordate\": \"15.06.2021\"},{\"appid\": 1284540,\"ordate\": \"18.05.2020\"},{\"appid\": 680360,\"ordate\": \"05.10.2017\"},{\"appid\": 1968500,\"ordate\": \"11.08.2022\"},{\"appid\": 837240,\"ordate\": \"19.05.2018\"},{\"appid\": 3036820,\"ordate\": \"30.06.2024\"},{\"appid\": 3084510,\"ordate\": \"28.07.2024\"},{\"appid\": 3091200,\"ordate\": \"28.07.2024\"},{\"appid\": 2060670,\"ordate\": \"09.12.2022\"},{\"appid\": 1446980,\"ordate\": \"29.10.2020\"},{\"appid\": 507400,\"ordate\": \"13.01.2017\"},{\"appid\": 1194930,\"ordate\": \"18.01.2020\"},{\"appid\": 397390,\"ordate\": \"24.11.2015\"},{\"appid\": 907980,\"ordate\": \"20.11.2020\"},{\"appid\": 914930,\"ordate\": \"15.09.2022\"},{\"appid\": 2516030,\"ordate\": \"13.09.2023\"},{\"appid\": 923590,\"ordate\": \"10.12.2018\"},{\"appid\": 2427470,\"ordate\": \"30.05.2023\"},{\"appid\": 476020,\"ordate\": \"25.10.2016\"},{\"appid\": 1166140,\"ordate\": \"24.11.2023\"},{\"appid\": 1265220,\"ordate\": \"26.05.2020\"},{\"appid\": 493290,\"ordate\": \"07.08.2016\"},{\"appid\": 1030210,\"ordate\": \"13.06.2020\"},{\"appid\": 319910,\"ordate\": \"21.04.2015\"},{\"appid\": 788390,\"ordate\": \"01.08.2018\"},{\"appid\": 2974740,\"ordate\": \"29.05.2024\"},{\"appid\": 321360,\"ordate\": \"04.12.2014\"},{\"appid\": 2532340,\"ordate\": \"31.07.2024\"},{\"appid\": 1358260,\"ordate\": \"01.12.2020\"},{\"appid\": 1177490,\"ordate\": \"16.11.2019\"},{\"appid\": 2168810,\"ordate\": \"27.04.2023\"},{\"appid\": 1745400,\"ordate\": \"23.11.2021\"},{\"appid\": 1930740,\"ordate\": \"13.07.2022\"},{\"appid\": 2827810,\"ordate\": \"08.07.2024\"},{\"appid\": 569130,\"ordate\": \"16.04.2017\"},{\"appid\": 646100,\"ordate\": \"30.05.2017\"},{\"appid\": 1256980,\"ordate\": \"30.04.2020\"},{\"appid\": 384990,\"ordate\": \"29.07.2015\"},{\"appid\": 375320,\"ordate\": \"01.07.2015\"},{\"appid\": 438920,\"ordate\": \"11.02.2016\"},{\"appid\": 1609010,\"ordate\": \"27.03.2022\"},{\"appid\": 1360580,\"ordate\": \"13.08.2020\"},{\"appid\": 1098200,\"ordate\": \"06.07.2019\"},{\"appid\": 608630,\"ordate\": \"06.10.2017\"},{\"appid\": 1499800,\"ordate\": \"13.05.2021\"},{\"appid\": 1586710,\"ordate\": \"25.10.2023\"},{\"appid\": 244450,\"ordate\": \"16.01.2014\"},{\"appid\": 371430,\"ordate\": \"15.09.2015\"},{\"appid\": 1098100,\"ordate\": \"15.08.2019\"},{\"appid\": 1029750,\"ordate\": \"07.03.2019\"},{\"appid\": 881230,\"ordate\": \"15.08.2018\"},{\"appid\": 322540,\"ordate\": \"10.02.2015\"},{\"appid\": 1689500,\"ordate\": \"14.11.2023\"},{\"appid\": 2404530,\"ordate\": \"23.06.2023\"},{\"appid\": 2960770,\"ordate\": \"25.07.2024\"},{\"appid\": 3081810,\"ordate\": \"06.08.2024\"},{\"appid\": 2782520,\"ordate\": \"06.05.2024\"},{\"appid\": 317080,\"ordate\": \"18.09.2014\"},{\"appid\": 1589480,\"ordate\": \"20.04.2021\"},{\"appid\": 838330,\"ordate\": \"02.08.2018\"},{\"appid\": 2738380,\"ordate\": \"17.05.2024\"},{\"appid\": 381050,\"ordate\": \"08.08.2015\"},{\"appid\": 354400,\"ordate\": \"07.05.2016\"},{\"appid\": 1162050,\"ordate\": \"16.05.2020\"},{\"appid\": 1886290,\"ordate\": \"21.06.2022\"},{\"appid\": 1165740,\"ordate\": \"25.10.2019\"},{\"appid\": 268750,\"ordate\": \"11.02.2014\"},{\"appid\": 909630,\"ordate\": \"09.11.2018\"},{\"appid\": 536900,\"ordate\": \"28.02.2020\"},{\"appid\": 1076500,\"ordate\": \"11.10.2019\"},{\"appid\": 1338610,\"ordate\": \"25.11.2020\"},{\"appid\": 2240390,\"ordate\": \"23.02.2023\"},{\"appid\": 365870,\"ordate\": \"12.05.2015\"},{\"appid\": 429620,\"ordate\": \"11.05.2016\"},{\"appid\": 758010,\"ordate\": \"30.03.2021\"},{\"appid\": 1219950,\"ordate\": \"06.06.2020\"},{\"appid\": 335830,\"ordate\": \"10.12.2014\"},{\"appid\": 2716200,\"ordate\": \"28.03.2024\"},{\"appid\": 812900,\"ordate\": \"13.04.2018\"},{\"appid\": 734580,\"ordate\": \"29.11.2017\"},{\"appid\": 887820,\"ordate\": \"17.11.2018\"},{\"appid\": 1384390,\"ordate\": \"03.10.2020\"},{\"appid\": 495030,\"ordate\": \"14.07.2016\"},{\"appid\": 1418430,\"ordate\": \"30.10.2020\"},{\"appid\": 1198440,\"ordate\": \"03.01.2020\"},{\"appid\": 646200,\"ordate\": \"08.06.2017\"},{\"appid\": 2172150,\"ordate\": \"21.10.2022\"},{\"appid\": 1994300,\"ordate\": \"07.12.2022\"},{\"appid\": 697370,\"ordate\": \"04.10.2017\"},{\"appid\": 2411210,\"ordate\": \"23.06.2023\"},{\"appid\": 1108390,\"ordate\": \"16.04.2020\"},{\"appid\": 1452200,\"ordate\": \"03.04.2021\"},{\"appid\": 408110,\"ordate\": \"09.01.2016\"},{\"appid\": 1122120,\"ordate\": \"20.12.2019\"},{\"appid\": 2455080,\"ordate\": \"04.01.2024\"},{\"appid\": 2943280,\"ordate\": \"12.07.2024\"},{\"appid\": 2269530,\"ordate\": \"30.10.2023\"},{\"appid\": 1755530,\"ordate\": \"27.11.2021\"},{\"appid\": 674180,\"ordate\": \"12.08.2017\"},{\"appid\": 388010,\"ordate\": \"07.08.2015\"},{\"appid\": 1249620,\"ordate\": \"25.03.2020\"},{\"appid\": 2701350,\"ordate\": \"21.03.2024\"},{\"appid\": 1937200,\"ordate\": \"19.05.2023\"},{\"appid\": 2159450,\"ordate\": \"06.10.2023\"},{\"appid\": 2006390,\"ordate\": \"11.07.2022\"},{\"appid\": 2773910,\"ordate\": \"11.02.2024\"},{\"appid\": 1089590,\"ordate\": \"10.09.2019\"},{\"appid\": 2133530,\"ordate\": \"31.10.2022\"},{\"appid\": 2057840,\"ordate\": \"24.10.2022\"},{\"appid\": 1116190,\"ordate\": \"22.07.2019\"},{\"appid\": 1790740,\"ordate\": \"01.12.2021\"},{\"appid\": 2219970,\"ordate\": \"13.02.2023\"},{\"appid\": 1372180,\"ordate\": \"19.09.2020\"},{\"appid\": 2142450,\"ordate\": \"03.05.2023\"},{\"appid\": 385020,\"ordate\": \"13.07.2015\"},{\"appid\": 889720,\"ordate\": \"31.10.2018\"},{\"appid\": 1612500,\"ordate\": \"10.03.2022\"},{\"appid\": 1444370,\"ordate\": \"03.11.2020\"},{\"appid\": 522250,\"ordate\": \"19.09.2016\"},{\"appid\": 2086570,\"ordate\": \"29.07.2022\"},{\"appid\": 1937750,\"ordate\": \"23.08.2022\"},{\"appid\": 1033810,\"ordate\": \"01.05.2019\"},{\"appid\": 1569120,\"ordate\": \"23.03.2021\"},{\"appid\": 1595000,\"ordate\": \"24.04.2021\"},{\"appid\": 832610,\"ordate\": \"06.06.2018\"},{\"appid\": 2298300,\"ordate\": \"26.05.2023\"},{\"appid\": 709280,\"ordate\": \"17.10.2017\"},{\"appid\": 2749170,\"ordate\": \"17.01.2024\"},{\"appid\": 1360530,\"ordate\": \"16.07.2020\"},{\"appid\": 2521100,\"ordate\": \"04.08.2023\"},{\"appid\": 820310,\"ordate\": \"05.04.2018\"},{\"appid\": 1933050,\"ordate\": \"12.05.2022\"},{\"appid\": 1543240,\"ordate\": \"22.07.2021\"},{\"appid\": 2627600,\"ordate\": \"15.01.2024\"},{\"appid\": 2734460,\"ordate\": \"03.01.2024\"},{\"appid\": 1589770,\"ordate\": \"21.09.2021\"},{\"appid\": 2391900,\"ordate\": \"01.03.2024\"},{\"appid\": 1240270,\"ordate\": \"31.07.2020\"},{\"appid\": 1700330,\"ordate\": \"06.08.2021\"},{\"appid\": 2664880,\"ordate\": \"01.10.2024\"},{\"appid\": 704300,\"ordate\": \"20.10.2017\"},{\"appid\": 858360,\"ordate\": \"26.06.2018\"},{\"appid\": 2242220,\"ordate\": \"11.01.2023\"},{\"appid\": 1247490,\"ordate\": \"02.03.2020\"},{\"appid\": 3167100,\"ordate\": \"19.09.2024\"},{\"appid\": 1447060,\"ordate\": \"28.10.2020\"},{\"appid\": 2438540,\"ordate\": \"02.09.2023\"},{\"appid\": 2726110,\"ordate\": \"24.01.2024\"},{\"appid\": 1985430,\"ordate\": \"27.06.2022\"},{\"appid\": 2620240,\"ordate\": \"09.05.2024\"},{\"appid\": 296710,\"ordate\": \"29.01.2015\"},{\"appid\": 1038850,\"ordate\": \"17.05.2019\"},{\"appid\": 2065810,\"ordate\": \"08.12.2022\"},{\"appid\": 575970,\"ordate\": \"07.12.2017\"},{\"appid\": 1004210,\"ordate\": \"08.01.2019\"},{\"appid\": 2228220,\"ordate\": \"03.02.2023\"},{\"appid\": 1314410,\"ordate\": \"18.06.2020\"},{\"appid\": 496310,\"ordate\": \"08.07.2016\"},{\"appid\": 1032830,\"ordate\": \"01.07.2019\"},{\"appid\": 2067790,\"ordate\": \"07.12.2022\"},{\"appid\": 1228970,\"ordate\": \"05.02.2020\"},{\"appid\": 1654800,\"ordate\": \"08.10.2021\"},{\"appid\": 545890,\"ordate\": \"13.12.2016\"},{\"appid\": 863420,\"ordate\": \"15.06.2018\"},{\"appid\": 2132450,\"ordate\": \"18.10.2022\"},{\"appid\": 815450,\"ordate\": \"21.03.2018\"},{\"appid\": 2707960,\"ordate\": \"12.12.2023\"},{\"appid\": 2469950,\"ordate\": \"21.09.2024\"},{\"appid\": 932210,\"ordate\": \"16.09.2019\"},{\"appid\": 1254950,\"ordate\": \"22.04.2020\"},{\"appid\": 1791120,\"ordate\": \"12.12.2021\"},{\"appid\": 2367560,\"ordate\": \"28.06.2023\"},{\"appid\": 313630,\"ordate\": \"18.02.2016\"},{\"appid\": 1952630,\"ordate\": \"05.05.2023\"},{\"appid\": 758790,\"ordate\": \"27.12.2017\"},{\"appid\": 2570230,\"ordate\": \"14.02.2024\"},{\"appid\": 1402790,\"ordate\": \"17.09.2020\"},{\"appid\": 1004560,\"ordate\": \"01.02.2019\"},{\"appid\": 1354690,\"ordate\": \"11.02.2021\"},{\"appid\": 1162320,\"ordate\": \"31.10.2019\"},{\"appid\": 414090,\"ordate\": \"30.11.2015\"},{\"appid\": 2347410,\"ordate\": \"13.07.2023\"},{\"appid\": 2378910,\"ordate\": \"03.10.2024\"},{\"appid\": 325260,\"ordate\": \"27.04.2020\"},{\"appid\": 2051620,\"ordate\": \"28.03.2024\"},{\"appid\": 2286320,\"ordate\": \"03.02.2023\"},{\"appid\": 2707350,\"ordate\": \"04.06.2024\"},{\"appid\": 1068510,\"ordate\": \"27.06.2019\"},{\"appid\": 893330,\"ordate\": \"20.07.2018\"},{\"appid\": 2710560,\"ordate\": \"27.09.2024\"},{\"appid\": 2864050,\"ordate\": \"29.04.2024\"},{\"appid\": 761990,\"ordate\": \"19.04.2018\"},{\"appid\": 2444840,\"ordate\": \"08.07.2023\"},{\"appid\": 3023190,\"ordate\": \"13.08.2024\"},{\"appid\": 2358100,\"ordate\": \"25.08.2023\"},{\"appid\": 2584450,\"ordate\": \"01.10.2023\"},{\"appid\": 770320,\"ordate\": \"16.04.2018\"},{\"appid\": 603020,\"ordate\": \"04.11.2017\"},{\"appid\": 511010,\"ordate\": \"14.08.2016\"},{\"appid\": 934120,\"ordate\": \"14.12.2018\"},{\"appid\": 2075170,\"ordate\": \"03.09.2022\"},{\"appid\": 294020,\"ordate\": \"25.07.2014\"},{\"appid\": 2564770,\"ordate\": \"31.10.2023\"},{\"appid\": 3051960,\"ordate\": \"30.08.2024\"},{\"appid\": 2229920,\"ordate\": \"30.03.2023\"},{\"appid\": 2018840,\"ordate\": \"05.07.2022\"},{\"appid\": 2184470,\"ordate\": \"15.08.2024\"},{\"appid\": 973310,\"ordate\": \"14.02.2019\"},{\"appid\": 327500,\"ordate\": \"06.04.2015\"},{\"appid\": 734510,\"ordate\": \"11.11.2017\"},{\"appid\": 1203780,\"ordate\": \"18.02.2020\"},{\"appid\": 577180,\"ordate\": \"03.03.2017\"},{\"appid\": 1243310,\"ordate\": \"31.07.2023\"},{\"appid\": 1183670,\"ordate\": \"11.11.2019\"},{\"appid\": 1196500,\"ordate\": \"21.03.2020\"},{\"appid\": 705640,\"ordate\": \"11.09.2017\"},{\"appid\": 1797510,\"ordate\": \"11.04.2022\"},{\"appid\": 2107090,\"ordate\": \"15.04.2024\"},{\"appid\": 1716770,\"ordate\": \"08.09.2021\"},{\"appid\": 1394830,\"ordate\": \"31.08.2020\"},{\"appid\": 1840870,\"ordate\": \"29.12.2021\"},{\"appid\": 2005810,\"ordate\": \"08.06.2022\"},{\"appid\": 3179280,\"ordate\": \"22.10.2024\"},{\"appid\": 2807860,\"ordate\": \"09.09.2024\"},{\"appid\": 2830770,\"ordate\": \"25.09.2024\"},{\"appid\": 1392520,\"ordate\": \"25.10.2020\"},{\"appid\": 1096600,\"ordate\": \"22.07.2020\"},{\"appid\": 1050560,\"ordate\": \"08.05.2019\"},{\"appid\": 2410260,\"ordate\": \"08.06.2023\"},{\"appid\": 1447080,\"ordate\": \"03.11.2020\"},{\"appid\": 2181770,\"ordate\": \"11.11.2022\"},{\"appid\": 1261700,\"ordate\": \"22.04.2020\"},{\"appid\": 2622850,\"ordate\": \"24.11.2023\"},{\"appid\": 1744570,\"ordate\": \"21.01.2022\"},{\"appid\": 2119210,\"ordate\": \"08.12.2022\"},{\"appid\": 2678280,\"ordate\": \"12.12.2023\"},{\"appid\": 879740,\"ordate\": \"25.07.2018\"},{\"appid\": 1065880,\"ordate\": \"06.05.2019\"},{\"appid\": 2959310,\"ordate\": \"20.06.2024\"},{\"appid\": 1584090,\"ordate\": \"16.06.2021\"},{\"appid\": 751330,\"ordate\": \"31.01.2018\"},{\"appid\": 1558490,\"ordate\": \"26.03.2021\"},{\"appid\": 1431450,\"ordate\": \"19.11.2020\"},{\"appid\": 2211520,\"ordate\": \"22.02.2023\"},{\"appid\": 3138100,\"ordate\": \"22.08.2024\"},{\"appid\": 322920,\"ordate\": \"15.12.2014\"},{\"appid\": 1734970,\"ordate\": \"01.10.2021\"},{\"appid\": 564210,\"ordate\": \"27.02.2017\"},{\"appid\": 826040,\"ordate\": \"06.04.2018\"},{\"appid\": 629410,\"ordate\": \"03.08.2017\"},{\"appid\": 2853180,\"ordate\": \"29.08.2024\"},{\"appid\": 1959880,\"ordate\": \"02.05.2022\"},{\"appid\": 1219240,\"ordate\": \"16.04.2024\"},{\"appid\": 1149710,\"ordate\": \"05.08.2020\"},{\"appid\": 906770,\"ordate\": \"06.11.2018\"},{\"appid\": 1237690,\"ordate\": \"26.03.2020\"},{\"appid\": 1947280,\"ordate\": \"17.04.2022\"},{\"appid\": 2714210,\"ordate\": \"15.01.2024\"},{\"appid\": 1687470,\"ordate\": \"29.06.2022\"},{\"appid\": 2149330,\"ordate\": \"04.10.2022\"},{\"appid\": 2832780,\"ordate\": \"02.03.2024\"},{\"appid\": 822040,\"ordate\": \"19.07.2018\"},{\"appid\": 2000480,\"ordate\": \"08.07.2022\"},{\"appid\": 1406690,\"ordate\": \"24.09.2020\"},{\"appid\": 1694670,\"ordate\": \"27.01.2022\"},{\"appid\": 1297010,\"ordate\": \"23.06.2020\"},{\"appid\": 865220,\"ordate\": \"20.07.2018\"},{\"appid\": 2334130,\"ordate\": \"02.10.2023\"},{\"appid\": 1485120,\"ordate\": \"27.02.2021\"},{\"appid\": 1014730,\"ordate\": \"31.01.2019\"},{\"appid\": 1597280,\"ordate\": \"25.08.2021\"},{\"appid\": 555050,\"ordate\": \"28.07.2017\"},{\"appid\": 1207780,\"ordate\": \"17.01.2020\"},{\"appid\": 1077600,\"ordate\": \"05.07.2019\"},{\"appid\": 1053830,\"ordate\": \"11.07.2019\"},{\"appid\": 2098560,\"ordate\": \"23.10.2023\"},{\"appid\": 1744640,\"ordate\": \"08.10.2021\"},{\"appid\": 1709070,\"ordate\": \"12.02.2022\"},{\"appid\": 2022270,\"ordate\": \"25.06.2022\"},{\"appid\": 2436420,\"ordate\": \"10.08.2023\"},{\"appid\": 814420,\"ordate\": \"04.03.2019\"},{\"appid\": 1433010,\"ordate\": \"25.05.2021\"},{\"appid\": 227060,\"ordate\": \"31.01.2014\"},{\"appid\": 808450,\"ordate\": \"13.03.2018\"},{\"appid\": 788700,\"ordate\": \"11.05.2018\"},{\"appid\": 2299400,\"ordate\": \"18.01.2024\"},{\"appid\": 839230,\"ordate\": \"03.05.2018\"},{\"appid\": 1159640,\"ordate\": \"01.10.2019\"},{\"appid\": 618080,\"ordate\": \"19.10.2017\"},{\"appid\": 310510,\"ordate\": \"23.10.2014\"},{\"appid\": 2999910,\"ordate\": \"11.06.2024\"},{\"appid\": 2150200,\"ordate\": \"21.01.2023\"},{\"appid\": 1239050,\"ordate\": \"29.07.2020\"},{\"appid\": 1489150,\"ordate\": \"19.12.2020\"},{\"appid\": 1604210,\"ordate\": \"21.10.2021\"},{\"appid\": 2708450,\"ordate\": \"15.03.2024\"},{\"appid\": 1236720,\"ordate\": \"16.04.2020\"},{\"appid\": 943130,\"ordate\": \"20.11.2018\"},{\"appid\": 1203160,\"ordate\": \"13.03.2020\"},{\"appid\": 1412030,\"ordate\": \"26.01.2021\"},{\"appid\": 1449170,\"ordate\": \"08.03.2023\"},{\"appid\": 2761940,\"ordate\": \"07.05.2024\"},{\"appid\": 2545740,\"ordate\": \"29.05.2024\"},{\"appid\": 700270,\"ordate\": \"25.10.2017\"},{\"appid\": 321330,\"ordate\": \"29.07.2015\"},{\"appid\": 1065580,\"ordate\": \"23.06.2019\"},{\"appid\": 1585750,\"ordate\": \"06.05.2021\"},{\"appid\": 445720,\"ordate\": \"03.11.2016\"},{\"appid\": 1168170,\"ordate\": \"23.10.2019\"},{\"appid\": 2400880,\"ordate\": \"07.05.2023\"},{\"appid\": 1422540,\"ordate\": \"01.10.2020\"},{\"appid\": 1780620,\"ordate\": \"18.01.2022\"},{\"appid\": 1969570,\"ordate\": \"24.02.2023\"},{\"appid\": 704880,\"ordate\": \"21.02.2019\"},{\"appid\": 914180,\"ordate\": \"28.11.2018\"},{\"appid\": 296570,\"ordate\": \"04.08.2014\"},{\"appid\": 324270,\"ordate\": \"29.05.2015\"},{\"appid\": 1703380,\"ordate\": \"04.02.2023\"},{\"appid\": 2358170,\"ordate\": \"06.04.2023\"},{\"appid\": 3102250,\"ordate\": \"31.08.2024\"},{\"appid\": 260430,\"ordate\": \"19.02.2015\"},{\"appid\": 432870,\"ordate\": \"15.01.2016\"},{\"appid\": 2251430,\"ordate\": \"25.03.2023\"},{\"appid\": 1477250,\"ordate\": \"08.01.2021\"},{\"appid\": 979530,\"ordate\": \"01.12.2018\"},{\"appid\": 364710,\"ordate\": \"17.08.2015\"},{\"appid\": 1169060,\"ordate\": \"09.12.2019\"},{\"appid\": 2620020,\"ordate\": \"24.11.2023\"},{\"appid\": 2673310,\"ordate\": \"22.03.2024\"},{\"appid\": 898780,\"ordate\": \"28.07.2018\"},{\"appid\": 2059550,\"ordate\": \"18.07.2022\"},{\"appid\": 2085240,\"ordate\": \"03.08.2023\"},{\"appid\": 1228490,\"ordate\": \"19.02.2020\"},{\"appid\": 504420,\"ordate\": \"08.08.2016\"},{\"appid\": 522590,\"ordate\": \"05.09.2016\"},{\"appid\": 1947060,\"ordate\": \"30.05.2022\"},{\"appid\": 1129720,\"ordate\": \"12.09.2019\"},{\"appid\": 1440850,\"ordate\": \"10.11.2020\"},{\"appid\": 552450,\"ordate\": \"20.12.2016\"},{\"appid\": 2298650,\"ordate\": \"05.09.2023\"},{\"appid\": 1608860,\"ordate\": \"13.08.2021\"},{\"appid\": 2659050,\"ordate\": \"15.07.2024\"},{\"appid\": 1827550,\"ordate\": \"20.12.2021\"},{\"appid\": 351910,\"ordate\": \"24.08.2015\"},{\"appid\": 758190,\"ordate\": \"31.01.2018\"},{\"appid\": 407880,\"ordate\": \"24.08.2016\"},{\"appid\": 2884070,\"ordate\": \"01.11.2024\"},{\"appid\": 895060,\"ordate\": \"16.02.2019\"},{\"appid\": 1562760,\"ordate\": \"23.06.2021\"},{\"appid\": 2563960,\"ordate\": \"10.12.2023\"},{\"appid\": 3252650,\"ordate\": \"01.11.2024\"},{\"appid\": 875530,\"ordate\": \"04.07.2018\"},{\"appid\": 1559340,\"ordate\": \"07.08.2021\"},{\"appid\": 1212870,\"ordate\": \"15.01.2020\"},{\"appid\": 800700,\"ordate\": \"12.02.2019\"},{\"appid\": 1117200,\"ordate\": \"16.11.2022\"},{\"appid\": 1502660,\"ordate\": \"29.01.2021\"},{\"appid\": 1191940,\"ordate\": \"21.01.2020\"},{\"appid\": 2693650,\"ordate\": \"14.12.2023\"},{\"appid\": 675170,\"ordate\": \"24.05.2018\"},{\"appid\": 2432940,\"ordate\": \"11.03.2024\"},{\"appid\": 116100,\"ordate\": \"27.02.2014\"},{\"appid\": 1234190,\"ordate\": \"19.02.2020\"},{\"appid\": 1720160,\"ordate\": \"12.09.2021\"},{\"appid\": 1427680,\"ordate\": \"17.11.2020\"},{\"appid\": 2939570,\"ordate\": \"02.05.2024\"},{\"appid\": 3205390,\"ordate\": \"28.09.2024\"},{\"appid\": 1348400,\"ordate\": \"04.07.2020\"},{\"appid\": 1522640,\"ordate\": \"18.06.2021\"},{\"appid\": 1118100,\"ordate\": \"13.08.2019\"},{\"appid\": 374830,\"ordate\": \"31.07.2015\"},{\"appid\": 1008890,\"ordate\": \"05.02.2019\"},{\"appid\": 1195020,\"ordate\": \"21.02.2020\"},{\"appid\": 1387200,\"ordate\": \"17.09.2020\"},{\"appid\": 1274840,\"ordate\": \"14.04.2020\"},{\"appid\": 2337710,\"ordate\": \"22.05.2023\"},{\"appid\": 1086900,\"ordate\": \"20.06.2019\"},{\"appid\": 610410,\"ordate\": \"24.10.2017\"},{\"appid\": 1860330,\"ordate\": \"18.10.2022\"},{\"appid\": 684400,\"ordate\": \"14.12.2017\"},{\"appid\": 323900,\"ordate\": \"09.04.2015\"},{\"appid\": 1960570,\"ordate\": \"01.09.2022\"},{\"appid\": 546930,\"ordate\": \"06.02.2017\"},{\"appid\": 789880,\"ordate\": \"15.02.2018\"},{\"appid\": 1619780,\"ordate\": \"19.05.2021\"},{\"appid\": 3220300,\"ordate\": \"11.10.2024\"},{\"appid\": 1101130,\"ordate\": \"13.07.2019\"},{\"appid\": 329460,\"ordate\": \"14.01.2015\"},{\"appid\": 300040,\"ordate\": \"15.08.2014\"},{\"appid\": 2165520,\"ordate\": \"24.10.2022\"},{\"appid\": 1199760,\"ordate\": \"24.05.2021\"},{\"appid\": 1722860,\"ordate\": \"01.12.2022\"},{\"appid\": 820890,\"ordate\": \"22.11.2018\"},{\"appid\": 2340320,\"ordate\": \"27.01.2024\"},{\"appid\": 1725440,\"ordate\": \"10.09.2021\"},{\"appid\": 966760,\"ordate\": \"08.01.2019\"},{\"appid\": 1389520,\"ordate\": \"31.05.2023\"},{\"appid\": 1512470,\"ordate\": \"14.05.2021\"},{\"appid\": 616390,\"ordate\": \"17.07.2023\"},{\"appid\": 1542810,\"ordate\": \"12.05.2021\"},{\"appid\": 2382310,\"ordate\": \"18.08.2024\"},{\"appid\": 1869510,\"ordate\": \"11.03.2022\"},{\"appid\": 592390,\"ordate\": \"21.02.2017\"},{\"appid\": 724470,\"ordate\": \"15.12.2017\"},{\"appid\": 1011870,\"ordate\": \"16.08.2019\"},{\"appid\": 3059240,\"ordate\": \"04.07.2024\"},{\"appid\": 1589440,\"ordate\": \"27.04.2021\"},{\"appid\": 1267240,\"ordate\": \"15.07.2020\"},{\"appid\": 2560120,\"ordate\": \"14.10.2023\"},{\"appid\": 3088040,\"ordate\": \"19.09.2024\"},{\"appid\": 2506130,\"ordate\": \"29.03.2024\"},{\"appid\": 648890,\"ordate\": \"09.09.2018\"},{\"appid\": 879670,\"ordate\": \"23.06.2018\"},{\"appid\": 1101190,\"ordate\": \"22.02.2020\"},{\"appid\": 506540,\"ordate\": \"23.12.2016\"},{\"appid\": 376450,\"ordate\": \"03.03.2016\"},{\"appid\": 1224380,\"ordate\": \"29.01.2020\"},{\"appid\": 856270,\"ordate\": \"01.02.2019\"},{\"appid\": 1249080,\"ordate\": \"15.08.2020\"},{\"appid\": 2429710,\"ordate\": \"31.07.2023\"},{\"appid\": 670280,\"ordate\": \"15.02.2018\"},{\"appid\": 1514100,\"ordate\": \"27.01.2021\"},{\"appid\": 1655660,\"ordate\": \"28.07.2021\"},{\"appid\": 1917020,\"ordate\": \"24.11.2022\"},{\"appid\": 2604240,\"ordate\": \"08.10.2023\"},{\"appid\": 673590,\"ordate\": \"10.08.2017\"},{\"appid\": 2482130,\"ordate\": \"25.08.2023\"},{\"appid\": 387060,\"ordate\": \"31.08.2015\"},{\"appid\": 1206080,\"ordate\": \"29.12.2019\"},{\"appid\": 1180700,\"ordate\": \"04.11.2019\"},{\"appid\": 1552960,\"ordate\": \"02.04.2021\"},{\"appid\": 3129720,\"ordate\": \"25.10.2024\"},{\"appid\": 356670,\"ordate\": \"24.04.2015\"},{\"appid\": 1997170,\"ordate\": \"13.06.2022\"},{\"appid\": 1400190,\"ordate\": \"17.09.2020\"},{\"appid\": 1578710,\"ordate\": \"05.05.2021\"},{\"appid\": 2728950,\"ordate\": \"07.03.2024\"},{\"appid\": 2308890,\"ordate\": \"13.07.2023\"},{\"appid\": 2194400,\"ordate\": \"07.01.2023\"},{\"appid\": 782570,\"ordate\": \"08.06.2018\"},{\"appid\": 1158750,\"ordate\": \"02.11.2019\"},{\"appid\": 1052100,\"ordate\": \"20.12.2019\"},{\"appid\": 1428790,\"ordate\": \"19.11.2020\"},{\"appid\": 2720620,\"ordate\": \"28.04.2024\"},{\"appid\": 2306980,\"ordate\": \"20.10.2023\"},{\"appid\": 815040,\"ordate\": \"23.04.2018\"},{\"appid\": 1391350,\"ordate\": \"12.09.2020\"},{\"appid\": 1985160,\"ordate\": \"21.04.2023\"},{\"appid\": 1840480,\"ordate\": \"24.07.2022\"},{\"appid\": 471730,\"ordate\": \"12.07.2016\"},{\"appid\": 661790,\"ordate\": \"02.06.2018\"},{\"appid\": 961710,\"ordate\": \"02.12.2018\"},{\"appid\": 1188140,\"ordate\": \"10.12.2019\"},{\"appid\": 2077590,\"ordate\": \"09.01.2023\"},{\"appid\": 1057180,\"ordate\": \"16.04.2019\"},{\"appid\": 960220,\"ordate\": \"31.01.2020\"},{\"appid\": 289520,\"ordate\": \"18.05.2014\"},{\"appid\": 2160680,\"ordate\": \"16.11.2022\"},{\"appid\": 1495420,\"ordate\": \"30.01.2021\"},{\"appid\": 2384790,\"ordate\": \"29.04.2023\"},{\"appid\": 2151530,\"ordate\": \"12.10.2022\"},{\"appid\": 340730,\"ordate\": \"13.01.2015\"},{\"appid\": 1088010,\"ordate\": \"15.06.2019\"},{\"appid\": 970140,\"ordate\": \"21.11.2018\"},{\"appid\": 993520,\"ordate\": \"26.04.2020\"},{\"appid\": 1897740,\"ordate\": \"07.09.2022\"},{\"appid\": 960600,\"ordate\": \"05.11.2018\"},{\"appid\": 1060180,\"ordate\": \"15.05.2019\"},{\"appid\": 491180,\"ordate\": \"05.09.2019\"},{\"appid\": 2313130,\"ordate\": \"26.02.2023\"},{\"appid\": 2753130,\"ordate\": \"08.02.2024\"},{\"appid\": 697020,\"ordate\": \"18.10.2017\"},{\"appid\": 562330,\"ordate\": \"14.12.2016\"},{\"appid\": 385360,\"ordate\": \"06.08.2015\"},{\"appid\": 847660,\"ordate\": \"06.06.2018\"},{\"appid\": 317950,\"ordate\": \"18.08.2014\"},{\"appid\": 268220,\"ordate\": \"05.03.2014\"},{\"appid\": 261530,\"ordate\": \"06.03.2014\"},{\"appid\": 356790,\"ordate\": \"27.04.2015\"},{\"appid\": 586150,\"ordate\": \"20.04.2017\"},{\"appid\": 2686580,\"ordate\": \"31.01.2024\"},{\"appid\": 2021170,\"ordate\": \"05.07.2022\"},{\"appid\": 360730,\"ordate\": \"18.09.2015\"},{\"appid\": 693180,\"ordate\": \"31.08.2017\"},{\"appid\": 1129350,\"ordate\": \"30.07.2019\"},{\"appid\": 1692070,\"ordate\": \"28.03.2022\"},{\"appid\": 1021800,\"ordate\": \"12.03.2020\"},{\"appid\": 570460,\"ordate\": \"08.02.2018\"},{\"appid\": 2014780,\"ordate\": \"16.09.2022\"},{\"appid\": 369550,\"ordate\": \"02.03.2016\"},{\"appid\": 1737100,\"ordate\": \"16.11.2021\"},{\"appid\": 2128690,\"ordate\": \"09.12.2022\"},{\"appid\": 1613530,\"ordate\": \"13.02.2022\"},{\"appid\": 827410,\"ordate\": \"27.04.2018\"},{\"appid\": 734570,\"ordate\": \"02.05.2018\"},{\"appid\": 633360,\"ordate\": \"31.10.2017\"},{\"appid\": 1243150,\"ordate\": \"26.02.2020\"},{\"appid\": 641590,\"ordate\": \"23.06.2017\"},{\"appid\": 468250,\"ordate\": \"07.02.2017\"},{\"appid\": 386080,\"ordate\": \"29.01.2016\"},{\"appid\": 2269730,\"ordate\": \"26.05.2023\"},{\"appid\": 1016860,\"ordate\": \"05.12.2019\"},{\"appid\": 3205350,\"ordate\": \"30.09.2024\"},{\"appid\": 1088950,\"ordate\": \"12.09.2019\"},{\"appid\": 654470,\"ordate\": \"10.02.2018\"},{\"appid\": 1207420,\"ordate\": \"07.01.2020\"},{\"appid\": 948020,\"ordate\": \"27.10.2018\"},{\"appid\": 2611800,\"ordate\": \"18.06.2024\"},{\"appid\": 350210,\"ordate\": \"25.08.2015\"},{\"appid\": 984220,\"ordate\": \"01.09.2020\"},{\"appid\": 1325270,\"ordate\": \"30.10.2020\"},{\"appid\": 1935960,\"ordate\": \"09.04.2022\"},{\"appid\": 2140510,\"ordate\": \"26.05.2023\"},{\"appid\": 2440550,\"ordate\": \"04.07.2023\"},{\"appid\": 2450360,\"ordate\": \"27.10.2023\"},{\"appid\": 745940,\"ordate\": \"13.01.2018\"},{\"appid\": 1431020,\"ordate\": \"13.10.2020\"},{\"appid\": 1096340,\"ordate\": \"14.11.2019\"},{\"appid\": 2905040,\"ordate\": \"26.04.2024\"},{\"appid\": 903740,\"ordate\": \"04.08.2018\"},{\"appid\": 682630,\"ordate\": \"07.10.2017\"},{\"appid\": 1729940,\"ordate\": \"22.02.2024\"},{\"appid\": 354230,\"ordate\": \"04.04.2015\"},{\"appid\": 829410,\"ordate\": \"19.04.2018\"},{\"appid\": 1535100,\"ordate\": \"09.11.2022\"},{\"appid\": 992040,\"ordate\": \"08.02.2019\"},{\"appid\": 2390850,\"ordate\": \"28.07.2023\"},{\"appid\": 1925740,\"ordate\": \"04.03.2024\"},{\"appid\": 844490,\"ordate\": \"26.06.2018\"},{\"appid\": 1539640,\"ordate\": \"13.04.2021\"},{\"appid\": 1298410,\"ordate\": \"12.07.2023\"},{\"appid\": 2302840,\"ordate\": \"15.09.2023\"},{\"appid\": 2080010,\"ordate\": \"13.10.2022\"},{\"appid\": 366440,\"ordate\": \"21.05.2016\"},{\"appid\": 1354060,\"ordate\": \"27.05.2021\"},{\"appid\": 1945190,\"ordate\": \"02.07.2022\"},{\"appid\": 641910,\"ordate\": \"18.10.2017\"},{\"appid\": 2116850,\"ordate\": \"01.09.2022\"},{\"appid\": 445600,\"ordate\": \"17.03.2016\"},{\"appid\": 1020660,\"ordate\": \"16.02.2019\"},{\"appid\": 449210,\"ordate\": \"16.03.2016\"},{\"appid\": 602270,\"ordate\": \"08.10.2019\"},{\"appid\": 1082770,\"ordate\": \"07.11.2019\"},{\"appid\": 2021280,\"ordate\": \"15.11.2022\"},{\"appid\": 1266410,\"ordate\": \"01.05.2020\"},{\"appid\": 1550020,\"ordate\": \"21.07.2021\"},{\"appid\": 2578790,\"ordate\": \"06.12.2023\"},{\"appid\": 1383050,\"ordate\": \"21.08.2020\"},{\"appid\": 660980,\"ordate\": \"07.07.2017\"},{\"appid\": 2964280,\"ordate\": \"06.06.2024\"},{\"appid\": 1008870,\"ordate\": \"20.01.2019\"},{\"appid\": 1876150,\"ordate\": \"02.03.2022\"},{\"appid\": 1722870,\"ordate\": \"25.07.2024\"},{\"appid\": 1955380,\"ordate\": \"22.04.2022\"},{\"appid\": 428370,\"ordate\": \"08.01.2016\"},{\"appid\": 1220190,\"ordate\": \"06.02.2020\"},{\"appid\": 919330,\"ordate\": \"31.10.2020\"},{\"appid\": 3213960,\"ordate\": \"09.11.2024\"},{\"appid\": 458110,\"ordate\": \"17.04.2016\"},{\"appid\": 1673520,\"ordate\": \"06.07.2021\"},{\"appid\": 1453010,\"ordate\": \"17.12.2020\"},{\"appid\": 1713100,\"ordate\": \"25.09.2021\"},{\"appid\": 1197590,\"ordate\": \"14.01.2020\"},{\"appid\": 2698250,\"ordate\": \"08.12.2023\"},{\"appid\": 328940,\"ordate\": \"02.12.2014\"},{\"appid\": 2943010,\"ordate\": \"26.07.2024\"},{\"appid\": 581980,\"ordate\": \"27.01.2017\"},{\"appid\": 1703020,\"ordate\": \"01.03.2024\"},{\"appid\": 1063580,\"ordate\": \"21.06.2019\"},{\"appid\": 2401920,\"ordate\": \"09.05.2023\"},{\"appid\": 2273220,\"ordate\": \"20.02.2023\"},{\"appid\": 1786780,\"ordate\": \"16.03.2022\"},{\"appid\": 2087940,\"ordate\": \"28.10.2022\"},{\"appid\": 329130,\"ordate\": \"25.11.2014\"},{\"appid\": 1589380,\"ordate\": \"14.04.2021\"},{\"appid\": 1702180,\"ordate\": \"22.10.2021\"},{\"appid\": 1851320,\"ordate\": \"14.02.2022\"},{\"appid\": 2358440,\"ordate\": \"15.04.2023\"},{\"appid\": 592730,\"ordate\": \"21.02.2017\"},{\"appid\": 752520,\"ordate\": \"13.03.2018\"},{\"appid\": 1479990,\"ordate\": \"09.12.2020\"},{\"appid\": 1028250,\"ordate\": \"24.02.2019\"},{\"appid\": 1049270,\"ordate\": \"17.04.2019\"},{\"appid\": 922450,\"ordate\": \"26.09.2018\"},{\"appid\": 694520,\"ordate\": \"27.12.2017\"},{\"appid\": 658160,\"ordate\": \"27.07.2017\"},{\"appid\": 2806230,\"ordate\": \"18.04.2024\"},{\"appid\": 887370,\"ordate\": \"20.11.2018\"},{\"appid\": 1225810,\"ordate\": \"20.02.2020\"},{\"appid\": 1228330,\"ordate\": \"19.10.2021\"},{\"appid\": 1463120,\"ordate\": \"09.12.2020\"},{\"appid\": 2389490,\"ordate\": \"12.06.2023\"},{\"appid\": 215830,\"ordate\": \"13.11.2017\"},{\"appid\": 1574420,\"ordate\": \"12.09.2022\"},{\"appid\": 1187650,\"ordate\": \"20.04.2020\"},{\"appid\": 1294120,\"ordate\": \"01.09.2020\"},{\"appid\": 603660,\"ordate\": \"06.08.2021\"},{\"appid\": 688370,\"ordate\": \"28.09.2017\"},{\"appid\": 549760,\"ordate\": \"11.11.2016\"},{\"appid\": 655630,\"ordate\": \"02.08.2017\"},{\"appid\": 1301250,\"ordate\": \"13.05.2020\"},{\"appid\": 597150,\"ordate\": \"24.02.2017\"},{\"appid\": 2200930,\"ordate\": \"01.12.2022\"},{\"appid\": 1419430,\"ordate\": \"03.11.2020\"},{\"appid\": 1967520,\"ordate\": \"21.11.2022\"},{\"appid\": 2668250,\"ordate\": \"01.03.2024\"},{\"appid\": 2684080,\"ordate\": \"23.05.2024\"},{\"appid\": 2529770,\"ordate\": \"22.11.2023\"},{\"appid\": 1705220,\"ordate\": \"12.10.2021\"},{\"appid\": 460560,\"ordate\": \"07.06.2016\"},{\"appid\": 2237800,\"ordate\": \"30.12.2022\"},{\"appid\": 2423000,\"ordate\": \"08.06.2023\"},{\"appid\": 729060,\"ordate\": \"14.11.2017\"},{\"appid\": 395500,\"ordate\": \"19.04.2016\"},{\"appid\": 718560,\"ordate\": \"13.06.2018\"},{\"appid\": 904860,\"ordate\": \"30.07.2018\"},{\"appid\": 2925990,\"ordate\": \"25.05.2024\"},{\"appid\": 950510,\"ordate\": \"14.11.2018\"},{\"appid\": 2846060,\"ordate\": \"12.10.2024\"},{\"appid\": 1492870,\"ordate\": \"08.01.2021\"},{\"appid\": 1271600,\"ordate\": \"04.05.2020\"},{\"appid\": 1248490,\"ordate\": \"13.03.2020\"},{\"appid\": 1699860,\"ordate\": \"01.11.2021\"},{\"appid\": 1939630,\"ordate\": \"15.07.2024\"},{\"appid\": 1487870,\"ordate\": \"22.12.2020\"},{\"appid\": 837440,\"ordate\": \"21.04.2018\"},{\"appid\": 1817560,\"ordate\": \"04.08.2022\"},{\"appid\": 960170,\"ordate\": \"18.12.2019\"},{\"appid\": 1022310,\"ordate\": \"28.01.2020\"},{\"appid\": 2858840,\"ordate\": \"11.04.2024\"},{\"appid\": 1863400,\"ordate\": \"09.09.2023\"},{\"appid\": 2837140,\"ordate\": \"04.03.2024\"},{\"appid\": 1871770,\"ordate\": \"22.05.2023\"},{\"appid\": 2452800,\"ordate\": \"18.06.2024\"},{\"appid\": 596390,\"ordate\": \"20.06.2017\"},{\"appid\": 454380,\"ordate\": \"01.04.2016\"},{\"appid\": 1027600,\"ordate\": \"30.04.2019\"},{\"appid\": 2243070,\"ordate\": \"25.08.2023\"},{\"appid\": 1360600,\"ordate\": \"15.01.2021\"},{\"appid\": 1372270,\"ordate\": \"11.08.2020\"},{\"appid\": 1951530,\"ordate\": \"01.12.2022\"},{\"appid\": 1129220,\"ordate\": \"15.08.2019\"},{\"appid\": 575950,\"ordate\": \"28.04.2017\"},{\"appid\": 1758010,\"ordate\": \"18.03.2022\"},{\"appid\": 1999120,\"ordate\": \"10.06.2022\"},{\"appid\": 2253370,\"ordate\": \"12.01.2023\"},{\"appid\": 1508280,\"ordate\": \"13.11.2021\"},{\"appid\": 497460,\"ordate\": \"04.08.2016\"},{\"appid\": 640850,\"ordate\": \"31.03.2018\"},{\"appid\": 1997940,\"ordate\": \"06.06.2024\"},{\"appid\": 410840,\"ordate\": \"23.11.2016\"},{\"appid\": 3126380,\"ordate\": \"26.10.2024\"},{\"appid\": 1552760,\"ordate\": \"03.03.2021\"},{\"appid\": 769940,\"ordate\": \"06.01.2018\"},{\"appid\": 1450180,\"ordate\": \"16.07.2021\"},{\"appid\": 2358790,\"ordate\": \"31.05.2023\"},{\"appid\": 760030,\"ordate\": \"14.02.2018\"},{\"appid\": 496550,\"ordate\": \"15.07.2016\"},{\"appid\": 2772610,\"ordate\": \"14.02.2024\"},{\"appid\": 1510880,\"ordate\": \"27.01.2021\"},{\"appid\": 3013700,\"ordate\": \"26.06.2024\"},{\"appid\": 2329910,\"ordate\": \"22.02.2024\"},{\"appid\": 1851680,\"ordate\": \"22.02.2022\"},{\"appid\": 1444510,\"ordate\": \"09.12.2020\"},{\"appid\": 1045720,\"ordate\": \"07.11.2019\"},{\"appid\": 1046370,\"ordate\": \"24.04.2019\"},{\"appid\": 1468960,\"ordate\": \"25.08.2021\"},{\"appid\": 2964680,\"ordate\": \"17.05.2024\"},{\"appid\": 868950,\"ordate\": \"16.06.2018\"},{\"appid\": 909580,\"ordate\": \"13.08.2018\"},{\"appid\": 605920,\"ordate\": \"20.04.2018\"},{\"appid\": 434020,\"ordate\": \"23.01.2016\"},{\"appid\": 1086840,\"ordate\": \"24.03.2020\"},{\"appid\": 1553230,\"ordate\": \"01.05.2021\"},{\"appid\": 1410070,\"ordate\": \"10.10.2020\"},{\"appid\": 3221190,\"ordate\": \"25.10.2024\"},{\"appid\": 937740,\"ordate\": \"12.10.2018\"},{\"appid\": 1090790,\"ordate\": \"24.09.2019\"},{\"appid\": 967450,\"ordate\": \"19.11.2018\"},{\"appid\": 2658490,\"ordate\": \"21.11.2023\"},{\"appid\": 1812340,\"ordate\": \"10.12.2021\"},{\"appid\": 1514580,\"ordate\": \"26.01.2021\"},{\"appid\": 1065630,\"ordate\": \"26.04.2019\"},{\"appid\": 1678860,\"ordate\": \"13.07.2021\"},{\"appid\": 2681650,\"ordate\": \"04.12.2023\"},{\"appid\": 770100,\"ordate\": \"27.02.2018\"},{\"appid\": 871140,\"ordate\": \"14.09.2018\"},{\"appid\": 1476420,\"ordate\": \"16.12.2020\"},{\"appid\": 635410,\"ordate\": \"16.06.2017\"},{\"appid\": 1404560,\"ordate\": \"15.06.2021\"},{\"appid\": 705220,\"ordate\": \"13.11.2017\"},{\"appid\": 1323420,\"ordate\": \"19.06.2020\"},{\"appid\": 2396640,\"ordate\": \"02.05.2023\"},{\"appid\": 1191840,\"ordate\": \"30.03.2020\"},{\"appid\": 1151430,\"ordate\": \"21.10.2019\"},{\"appid\": 1964540,\"ordate\": \"10.06.2022\"},{\"appid\": 575600,\"ordate\": \"18.02.2017\"},{\"appid\": 1143710,\"ordate\": \"25.10.2019\"},{\"appid\": 656060,\"ordate\": \"06.11.2017\"},{\"appid\": 2281870,\"ordate\": \"31.07.2023\"},{\"appid\": 965460,\"ordate\": \"10.12.2018\"},{\"appid\": 490980,\"ordate\": \"13.07.2016\"},{\"appid\": 2607160,\"ordate\": \"02.11.2024\"},{\"appid\": 905660,\"ordate\": \"22.01.2019\"},{\"appid\": 596950,\"ordate\": \"09.05.2017\"},{\"appid\": 1018170,\"ordate\": \"26.02.2019\"},{\"appid\": 2820750,\"ordate\": \"06.03.2024\"},{\"appid\": 1198740,\"ordate\": \"20.06.2020\"},{\"appid\": 566350,\"ordate\": \"25.12.2016\"},{\"appid\": 2688570,\"ordate\": \"22.10.2024\"},{\"appid\": 718790,\"ordate\": \"27.03.2018\"},{\"appid\": 303550,\"ordate\": \"17.03.2015\"},{\"appid\": 2635490,\"ordate\": \"17.11.2023\"},{\"appid\": 1113390,\"ordate\": \"22.07.2019\"},{\"appid\": 1808640,\"ordate\": \"27.09.2023\"},{\"appid\": 2139890,\"ordate\": \"15.02.2023\"},{\"appid\": 1528120,\"ordate\": \"13.02.2021\"},{\"appid\": 1755110,\"ordate\": \"21.10.2021\"},{\"appid\": 870390,\"ordate\": \"17.03.2020\"},{\"appid\": 1116550,\"ordate\": \"31.07.2019\"},{\"appid\": 1360450,\"ordate\": \"23.01.2021\"},{\"appid\": 404620,\"ordate\": \"18.11.2015\"},{\"appid\": 2335640,\"ordate\": \"14.07.2023\"},{\"appid\": 587460,\"ordate\": \"03.05.2017\"},{\"appid\": 916320,\"ordate\": \"04.10.2018\"},{\"appid\": 3048400,\"ordate\": \"01.07.2024\"},{\"appid\": 1702740,\"ordate\": \"13.12.2021\"},{\"appid\": 2682120,\"ordate\": \"21.12.2023\"},{\"appid\": 1180900,\"ordate\": \"28.04.2020\"},{\"appid\": 666330,\"ordate\": \"15.09.2017\"},{\"appid\": 1098080,\"ordate\": \"26.09.2019\"},{\"appid\": 2289230,\"ordate\": \"07.03.2023\"},{\"appid\": 1967830,\"ordate\": \"21.06.2022\"},{\"appid\": 1870320,\"ordate\": \"28.02.2022\"},{\"appid\": 1990690,\"ordate\": \"16.11.2022\"},{\"appid\": 2367580,\"ordate\": \"27.07.2023\"},{\"appid\": 464620,\"ordate\": \"27.05.2016\"},{\"appid\": 674330,\"ordate\": \"15.09.2017\"},{\"appid\": 1083810,\"ordate\": \"31.07.2019\"},{\"appid\": 700770,\"ordate\": \"11.01.2018\"},{\"appid\": 288260,\"ordate\": \"20.08.2015\"},{\"appid\": 899180,\"ordate\": \"31.08.2018\"},{\"appid\": 2017630,\"ordate\": \"16.06.2022\"},{\"appid\": 878350,\"ordate\": \"14.09.2018\"},{\"appid\": 2463250,\"ordate\": \"20.07.2023\"},{\"appid\": 2262320,\"ordate\": \"08.08.2023\"},{\"appid\": 3068380,\"ordate\": \"25.10.2024\"},{\"appid\": 1302160,\"ordate\": \"18.06.2020\"},{\"appid\": 404850,\"ordate\": \"02.12.2015\"},{\"appid\": 1024010,\"ordate\": \"30.08.2019\"},{\"appid\": 1263370,\"ordate\": \"12.06.2020\"},{\"appid\": 1490860,\"ordate\": \"13.04.2021\"},{\"appid\": 1955960,\"ordate\": \"30.11.2023\"},{\"appid\": 2051500,\"ordate\": \"19.11.2023\"},{\"appid\": 2301790,\"ordate\": \"09.03.2023\"},{\"appid\": 2645600,\"ordate\": \"05.01.2024\"},{\"appid\": 1269510,\"ordate\": \"18.11.2020\"},{\"appid\": 701800,\"ordate\": \"06.10.2017\"},{\"appid\": 778870,\"ordate\": \"08.02.2019\"},{\"appid\": 1554850,\"ordate\": \"23.03.2021\"},{\"appid\": 962220,\"ordate\": \"02.10.2019\"},{\"appid\": 1562800,\"ordate\": \"23.04.2021\"},{\"appid\": 2127590,\"ordate\": \"21.10.2022\"},{\"appid\": 1530440,\"ordate\": \"11.02.2021\"},{\"appid\": 1177080,\"ordate\": \"07.04.2020\"},{\"appid\": 1410680,\"ordate\": \"17.09.2020\"},{\"appid\": 1475140,\"ordate\": \"09.12.2020\"},{\"appid\": 2477160,\"ordate\": \"11.04.2024\"},{\"appid\": 1921390,\"ordate\": \"21.05.2022\"},{\"appid\": 2892310,\"ordate\": \"30.08.2024\"},{\"appid\": 1575100,\"ordate\": \"27.08.2021\"},{\"appid\": 1308550,\"ordate\": \"16.06.2020\"},{\"appid\": 1318560,\"ordate\": \"17.06.2020\"},{\"appid\": 1398080,\"ordate\": \"20.08.2020\"},{\"appid\": 2470690,\"ordate\": \"05.07.2023\"},{\"appid\": 1548430,\"ordate\": \"29.10.2021\"},{\"appid\": 1258830,\"ordate\": \"10.11.2020\"},{\"appid\": 595300,\"ordate\": \"02.05.2018\"},{\"appid\": 681620,\"ordate\": \"09.08.2017\"},{\"appid\": 3065310,\"ordate\": \"11.08.2024\"},{\"appid\": 952090,\"ordate\": \"24.10.2018\"},{\"appid\": 3223680,\"ordate\": \"25.10.2024\"},{\"appid\": 392000,\"ordate\": \"04.12.2015\"},{\"appid\": 2126990,\"ordate\": \"22.11.2022\"},{\"appid\": 1840350,\"ordate\": \"28.07.2022\"},{\"appid\": 914440,\"ordate\": \"18.07.2020\"},{\"appid\": 1235510,\"ordate\": \"05.02.2020\"},{\"appid\": 1340770,\"ordate\": \"03.07.2020\"},{\"appid\": 2168760,\"ordate\": \"29.03.2023\"},{\"appid\": 935930,\"ordate\": \"27.09.2018\"},{\"appid\": 716750,\"ordate\": \"22.01.2018\"},{\"appid\": 716490,\"ordate\": \"09.08.2018\"},{\"appid\": 1283180,\"ordate\": \"20.11.2020\"},{\"appid\": 2619300,\"ordate\": \"29.10.2023\"},{\"appid\": 394760,\"ordate\": \"22.02.2016\"},{\"appid\": 1260560,\"ordate\": \"24.11.2020\"},{\"appid\": 1483870,\"ordate\": \"28.12.2020\"},{\"appid\": 1492250,\"ordate\": \"31.12.2020\"},{\"appid\": 1007630,\"ordate\": \"23.02.2019\"},{\"appid\": 917990,\"ordate\": \"05.11.2018\"},{\"appid\": 1444570,\"ordate\": \"06.12.2020\"},{\"appid\": 783140,\"ordate\": \"30.01.2018\"},{\"appid\": 882080,\"ordate\": \"16.07.2018\"},{\"appid\": 2260480,\"ordate\": \"31.03.2024\"},{\"appid\": 2966190,\"ordate\": \"05.06.2024\"},{\"appid\": 1208900,\"ordate\": \"03.01.2020\"},{\"appid\": 517330,\"ordate\": \"10.09.2016\"},{\"appid\": 965610,\"ordate\": \"01.10.2019\"},{\"appid\": 2981590,\"ordate\": \"15.07.2024\"},{\"appid\": 2512430,\"ordate\": \"30.09.2023\"},{\"appid\": 2918590,\"ordate\": \"27.04.2024\"},{\"appid\": 1170390,\"ordate\": \"03.01.2020\"},{\"appid\": 2535920,\"ordate\": \"14.08.2023\"},{\"appid\": 1087600,\"ordate\": \"26.06.2019\"},{\"appid\": 1326170,\"ordate\": \"16.06.2020\"},{\"appid\": 1628270,\"ordate\": \"21.05.2021\"},{\"appid\": 1474860,\"ordate\": \"08.12.2020\"},{\"appid\": 409560,\"ordate\": \"20.01.2016\"},{\"appid\": 285840,\"ordate\": \"27.03.2014\"},{\"appid\": 849790,\"ordate\": \"24.06.2018\"},{\"appid\": 476930,\"ordate\": \"20.07.2016\"},{\"appid\": 675990,\"ordate\": \"17.08.2017\"},{\"appid\": 1895410,\"ordate\": \"19.05.2022\"},{\"appid\": 712650,\"ordate\": \"29.09.2017\"},{\"appid\": 2176000,\"ordate\": \"01.11.2022\"},{\"appid\": 308420,\"ordate\": \"14.08.2014\"},{\"appid\": 589430,\"ordate\": \"17.02.2017\"},{\"appid\": 3078540,\"ordate\": \"05.09.2024\"},{\"appid\": 1870490,\"ordate\": \"02.05.2022\"},{\"appid\": 949720,\"ordate\": \"27.02.2020\"},{\"appid\": 1475170,\"ordate\": \"02.01.2021\"},{\"appid\": 556340,\"ordate\": \"22.11.2016\"},{\"appid\": 451400,\"ordate\": \"02.06.2016\"},{\"appid\": 1475150,\"ordate\": \"15.12.2020\"},{\"appid\": 602630,\"ordate\": \"05.04.2017\"},{\"appid\": 498470,\"ordate\": \"09.08.2016\"},{\"appid\": 1475080,\"ordate\": \"15.12.2020\"},{\"appid\": 1602390,\"ordate\": \"17.03.2023\"},{\"appid\": 959920,\"ordate\": \"10.11.2018\"},{\"appid\": 2782540,\"ordate\": \"18.07.2024\"},{\"appid\": 971650,\"ordate\": \"14.11.2019\"},{\"appid\": 3248510,\"ordate\": \"25.10.2024\"},{\"appid\": 738440,\"ordate\": \"18.10.2018\"},{\"appid\": 1856030,\"ordate\": \"11.10.2022\"},{\"appid\": 2601320,\"ordate\": \"27.10.2023\"},{\"appid\": 2943780,\"ordate\": \"02.05.2024\"},{\"appid\": 808990,\"ordate\": \"16.03.2018\"},{\"appid\": 1178050,\"ordate\": \"18.11.2019\"},{\"appid\": 1196310,\"ordate\": \"27.08.2020\"},{\"appid\": 1761260,\"ordate\": \"07.04.2022\"},{\"appid\": 790850,\"ordate\": \"06.03.2019\"},{\"appid\": 1487430,\"ordate\": \"03.02.2021\"},{\"appid\": 2814060,\"ordate\": \"20.08.2024\"},{\"appid\": 2872270,\"ordate\": \"04.05.2024\"},{\"appid\": 3066440,\"ordate\": \"23.07.2024\"},{\"appid\": 1226960,\"ordate\": \"10.02.2020\"},{\"appid\": 2881810,\"ordate\": \"19.07.2024\"},{\"appid\": 2414740,\"ordate\": \"01.03.2024\"},{\"appid\": 841340,\"ordate\": \"20.12.2018\"},{\"appid\": 2468540,\"ordate\": \"30.06.2023\"},{\"appid\": 587580,\"ordate\": \"24.02.2017\"},{\"appid\": 741260,\"ordate\": \"18.11.2017\"},{\"appid\": 1475160,\"ordate\": \"17.12.2020\"},{\"appid\": 551170,\"ordate\": \"09.02.2018\"},{\"appid\": 589590,\"ordate\": \"08.04.2017\"},{\"appid\": 1499540,\"ordate\": \"25.08.2021\"},{\"appid\": 2707390,\"ordate\": \"12.04.2024\"},{\"appid\": 511690,\"ordate\": \"10.09.2016\"},{\"appid\": 1449180,\"ordate\": \"27.08.2024\"},{\"appid\": 307960,\"ordate\": \"15.08.2014\"},{\"appid\": 284580,\"ordate\": \"13.04.2014\"},{\"appid\": 866010,\"ordate\": \"23.11.2018\"},{\"appid\": 2431600,\"ordate\": \"18.07.2023\"},{\"appid\": 492710,\"ordate\": \"07.07.2016\"},{\"appid\": 2251120,\"ordate\": \"06.01.2023\"},{\"appid\": 795920,\"ordate\": \"24.02.2018\"},{\"appid\": 391100,\"ordate\": \"15.10.2015\"},{\"appid\": 535350,\"ordate\": \"23.01.2017\"},{\"appid\": 1698140,\"ordate\": \"20.10.2021\"},{\"appid\": 2337280,\"ordate\": \"15.06.2023\"},{\"appid\": 786410,\"ordate\": \"21.01.2018\"},{\"appid\": 783400,\"ordate\": \"19.06.2019\"},{\"appid\": 867420,\"ordate\": \"26.09.2018\"},{\"appid\": 2978270,\"ordate\": \"11.06.2024\"},{\"appid\": 2220520,\"ordate\": \"22.02.2023\"},{\"appid\": 871850,\"ordate\": \"30.07.2018\"},{\"appid\": 467990,\"ordate\": \"20.06.2016\"},{\"appid\": 1192610,\"ordate\": \"05.12.2019\"},{\"appid\": 662930,\"ordate\": \"08.03.2018\"},{\"appid\": 1253870,\"ordate\": \"08.05.2020\"},{\"appid\": 1029170,\"ordate\": \"28.12.2019\"},{\"appid\": 765590,\"ordate\": \"06.02.2018\"},{\"appid\": 1355140,\"ordate\": \"13.07.2020\"},{\"appid\": 706950,\"ordate\": \"18.05.2019\"},{\"appid\": 529260,\"ordate\": \"16.09.2016\"},{\"appid\": 1142530,\"ordate\": \"06.01.2022\"},{\"appid\": 622480,\"ordate\": \"22.04.2017\"},{\"appid\": 2948020,\"ordate\": \"02.12.2024\"},{\"appid\": 2724960,\"ordate\": \"05.01.2024\"},{\"appid\": 2547940,\"ordate\": \"18.11.2023\"},{\"appid\": 3032530,\"ordate\": \"22.06.2024\"},{\"appid\": 1608680,\"ordate\": \"15.10.2021\"},{\"appid\": 2381270,\"ordate\": \"28.04.2023\"},{\"appid\": 2361370,\"ordate\": \"16.05.2023\"},{\"appid\": 1778520,\"ordate\": \"01.12.2021\"},{\"appid\": 1214460,\"ordate\": \"06.01.2020\"},{\"appid\": 3036710,\"ordate\": \"28.06.2024\"},{\"appid\": 1584440,\"ordate\": \"28.05.2021\"},{\"appid\": 360590,\"ordate\": \"13.05.2015\"},{\"appid\": 1101760,\"ordate\": \"21.06.2019\"},{\"appid\": 1680890,\"ordate\": \"27.04.2022\"},{\"appid\": 2769410,\"ordate\": \"19.08.2024\"},{\"appid\": 3285360,\"ordate\": \"20.11.2024\"},{\"appid\": 2762270,\"ordate\": \"25.01.2024\"},{\"appid\": 485590,\"ordate\": \"14.06.2016\"},{\"appid\": 908070,\"ordate\": \"27.11.2018\"},{\"appid\": 1022920,\"ordate\": \"24.02.2019\"},{\"appid\": 1050510,\"ordate\": \"20.03.2019\"},{\"appid\": 1612380,\"ordate\": \"25.05.2021\"},{\"appid\": 2707360,\"ordate\": \"08.04.2024\"},{\"appid\": 1170120,\"ordate\": \"22.01.2020\"},{\"appid\": 2452220,\"ordate\": \"21.06.2023\"},{\"appid\": 1636030,\"ordate\": \"29.08.2023\"},{\"appid\": 2644960,\"ordate\": \"09.11.2023\"},{\"appid\": 1308560,\"ordate\": \"25.06.2020\"},{\"appid\": 386510,\"ordate\": \"12.10.2015\"},{\"appid\": 1949810,\"ordate\": \"15.04.2022\"},{\"appid\": 3332670,\"ordate\": \"23.11.2024\"},{\"appid\": 1926490,\"ordate\": \"11.04.2022\"},{\"appid\": 1095290,\"ordate\": \"06.06.2023\"},{\"appid\": 433450,\"ordate\": \"07.07.2016\"},{\"appid\": 1114910,\"ordate\": \"13.08.2019\"},{\"appid\": 1215750,\"ordate\": \"15.02.2020\"},{\"appid\": 870160,\"ordate\": \"15.06.2018\"},{\"appid\": 2511940,\"ordate\": \"29.08.2023\"},{\"appid\": 870100,\"ordate\": \"24.08.2018\"},{\"appid\": 1462060,\"ordate\": \"26.01.2021\"},{\"appid\": 993990,\"ordate\": \"09.01.2019\"},{\"appid\": 1204040,\"ordate\": \"12.08.2024\"},{\"appid\": 302750,\"ordate\": \"03.06.2014\"},{\"appid\": 1353670,\"ordate\": \"21.09.2020\"},{\"appid\": 3101050,\"ordate\": \"10.10.2024\"},{\"appid\": 264260,\"ordate\": \"09.06.2014\"},{\"appid\": 1613100,\"ordate\": \"14.05.2021\"},{\"appid\": 2826070,\"ordate\": \"21.03.2024\"},{\"appid\": 2900600,\"ordate\": \"06.04.2024\"},{\"appid\": 3222520,\"ordate\": \"09.10.2024\"},{\"appid\": 787040,\"ordate\": \"15.06.2018\"},{\"appid\": 2006770,\"ordate\": \"09.07.2022\"},{\"appid\": 2391090,\"ordate\": \"17.03.2024\"},{\"appid\": 1026770,\"ordate\": \"30.08.2019\"},{\"appid\": 1120210,\"ordate\": \"14.08.2019\"},{\"appid\": 434240,\"ordate\": \"08.03.2016\"},{\"appid\": 671260,\"ordate\": \"28.07.2017\"},{\"appid\": 1181900,\"ordate\": \"12.01.2021\"},{\"appid\": 3120160,\"ordate\": \"12.08.2024\"},{\"appid\": 365020,\"ordate\": \"30.05.2015\"},{\"appid\": 1029980,\"ordate\": \"26.02.2019\"},{\"appid\": 1995680,\"ordate\": \"09.06.2022\"},{\"appid\": 2485870,\"ordate\": \"11.10.2023\"},{\"appid\": 1170950,\"ordate\": \"23.11.2021\"},{\"appid\": 2591030,\"ordate\": \"16.11.2023\"},{\"appid\": 1636370,\"ordate\": \"14.07.2021\"},{\"appid\": 1815000,\"ordate\": \"31.12.2021\"},{\"appid\": 1818610,\"ordate\": \"13.02.2023\"},{\"appid\": 1301730,\"ordate\": \"10.07.2020\"},{\"appid\": 1047480,\"ordate\": \"28.03.2019\"},{\"appid\": 1768550,\"ordate\": \"15.04.2022\"},{\"appid\": 2166500,\"ordate\": \"16.12.2022\"},{\"appid\": 2267350,\"ordate\": \"25.01.2023\"},{\"appid\": 1772720,\"ordate\": \"04.03.2022\"},{\"appid\": 328760,\"ordate\": \"13.12.2014\"},{\"appid\": 1124600,\"ordate\": \"25.02.2021\"},{\"appid\": 1509230,\"ordate\": \"23.01.2021\"},{\"appid\": 755340,\"ordate\": \"12.04.2019\"},{\"appid\": 331790,\"ordate\": \"14.02.2015\"},{\"appid\": 1218680,\"ordate\": \"28.05.2020\"},{\"appid\": 595090,\"ordate\": \"30.05.2017\"},{\"appid\": 2446170,\"ordate\": \"22.08.2023\"},{\"appid\": 594490,\"ordate\": \"18.04.2017\"},{\"appid\": 627410,\"ordate\": \"08.06.2017\"},{\"appid\": 1474850,\"ordate\": \"10.12.2020\"},{\"appid\": 2013740,\"ordate\": \"09.07.2022\"},{\"appid\": 1035410,\"ordate\": \"12.04.2019\"},{\"appid\": 591130,\"ordate\": \"01.07.2017\"},{\"appid\": 3106340,\"ordate\": \"30.08.2024\"},{\"appid\": 2344190,\"ordate\": \"16.06.2023\"},{\"appid\": 2434940,\"ordate\": \"02.07.2023\"},{\"appid\": 2202690,\"ordate\": \"03.03.2023\"},{\"appid\": 2838090,\"ordate\": \"01.08.2024\"},{\"appid\": 2286260,\"ordate\": \"28.02.2023\"},{\"appid\": 2310440,\"ordate\": \"30.09.2024\"},{\"appid\": 2438160,\"ordate\": \"01.03.2024\"},{\"appid\": 314000,\"ordate\": \"07.10.2015\"},{\"appid\": 776140,\"ordate\": \"24.01.2018\"},{\"appid\": 2436440,\"ordate\": \"07.06.2023\"},{\"appid\": 2800770,\"ordate\": \"26.02.2024\"},{\"appid\": 1085160,\"ordate\": \"24.07.2019\"},{\"appid\": 1388740,\"ordate\": \"04.12.2020\"},{\"appid\": 513560,\"ordate\": \"06.10.2016\"},{\"appid\": 1576500,\"ordate\": \"10.06.2021\"},{\"appid\": 1213370,\"ordate\": \"31.01.2020\"},{\"appid\": 2475270,\"ordate\": \"01.07.2023\"},{\"appid\": 1821410,\"ordate\": \"20.12.2021\"},{\"appid\": 1272970,\"ordate\": \"25.04.2020\"},{\"appid\": 2212880,\"ordate\": \"05.12.2022\"},{\"appid\": 1228870,\"ordate\": \"30.07.2020\"},{\"appid\": 2335250,\"ordate\": \"08.12.2023\"},{\"appid\": 1134390,\"ordate\": \"18.09.2019\"},{\"appid\": 2489990,\"ordate\": \"17.07.2023\"},{\"appid\": 2586680,\"ordate\": \"30.09.2023\"},{\"appid\": 2004370,\"ordate\": \"22.09.2022\"},{\"appid\": 2267930,\"ordate\": \"12.02.2023\"},{\"appid\": 2621460,\"ordate\": \"01.11.2023\"},{\"appid\": 2205330,\"ordate\": \"08.07.2024\"},{\"appid\": 3178880,\"ordate\": \"11.10.2024\"},{\"appid\": 2002510,\"ordate\": \"28.06.2022\"},{\"appid\": 534720,\"ordate\": \"14.10.2016\"},{\"appid\": 1405360,\"ordate\": \"26.01.2021\"},{\"appid\": 2895430,\"ordate\": \"17.07.2024\"},{\"appid\": 1032210,\"ordate\": \"01.03.2019\"},{\"appid\": 2144040,\"ordate\": \"18.09.2023\"},{\"appid\": 3131770,\"ordate\": \"20.08.2024\"},{\"appid\": 1253230,\"ordate\": \"24.02.2020\"},{\"appid\": 1535900,\"ordate\": \"16.03.2021\"},{\"appid\": 954300,\"ordate\": \"26.09.2024\"},{\"appid\": 2560740,\"ordate\": \"29.09.2023\"},{\"appid\": 2310190,\"ordate\": \"22.07.2023\"},{\"appid\": 2428020,\"ordate\": \"26.01.2024\"},{\"appid\": 357890,\"ordate\": \"29.03.2015\"},{\"appid\": 1456810,\"ordate\": \"13.11.2020\"},{\"appid\": 1262380,\"ordate\": \"14.08.2020\"},{\"appid\": 1076050,\"ordate\": \"31.05.2019\"},{\"appid\": 1001910,\"ordate\": \"09.01.2019\"},{\"appid\": 1258710,\"ordate\": \"20.03.2020\"},{\"appid\": 1821530,\"ordate\": \"21.12.2021\"},{\"appid\": 1351290,\"ordate\": \"24.10.2020\"},{\"appid\": 372430,\"ordate\": \"09.01.2016\"},{\"appid\": 1058750,\"ordate\": \"30.07.2019\"},{\"appid\": 3082110,\"ordate\": \"30.08.2024\"},{\"appid\": 853580,\"ordate\": \"12.05.2018\"},{\"appid\": 737930,\"ordate\": \"15.11.2017\"},{\"appid\": 999640,\"ordate\": \"24.01.2019\"},{\"appid\": 3328720,\"ordate\": \"19.12.2024\"},{\"appid\": 2663140,\"ordate\": \"27.02.2024\"},{\"appid\": 731890,\"ordate\": \"31.10.2019\"},{\"appid\": 1331120,\"ordate\": \"23.06.2020\"},{\"appid\": 1954670,\"ordate\": \"04.09.2022\"},{\"appid\": 2247640,\"ordate\": \"21.02.2023\"},{\"appid\": 1284550,\"ordate\": \"22.06.2020\"},{\"appid\": 3213590,\"ordate\": \"15.10.2024\"},{\"appid\": 760320,\"ordate\": \"05.06.2018\"},{\"appid\": 323380,\"ordate\": \"13.05.2015\"},{\"appid\": 732520,\"ordate\": \"02.01.2018\"},{\"appid\": 2267260,\"ordate\": \"23.03.2023\"},{\"appid\": 935610,\"ordate\": \"01.05.2019\"},{\"appid\": 1190110,\"ordate\": \"20.11.2019\"},{\"appid\": 1442350,\"ordate\": \"10.11.2020\"},{\"appid\": 2983370,\"ordate\": \"06.07.2024\"},{\"appid\": 771710,\"ordate\": \"08.03.2018\"},{\"appid\": 494220,\"ordate\": \"30.08.2016\"},{\"appid\": 2080250,\"ordate\": \"29.05.2023\"},{\"appid\": 2708280,\"ordate\": \"15.12.2023\"},{\"appid\": 1302570,\"ordate\": \"24.03.2021\"},{\"appid\": 1334800,\"ordate\": \"23.06.2020\"},{\"appid\": 1416730,\"ordate\": \"28.09.2020\"},{\"appid\": 1836220,\"ordate\": \"14.01.2022\"},{\"appid\": 2202990,\"ordate\": \"19.12.2022\"},{\"appid\": 2716540,\"ordate\": \"06.03.2024\"},{\"appid\": 2363290,\"ordate\": \"08.09.2023\"},{\"appid\": 1639930,\"ordate\": \"07.08.2021\"},{\"appid\": 1327720,\"ordate\": \"16.07.2020\"},{\"appid\": 2316930,\"ordate\": \"02.12.2024\"},{\"appid\": 2540820,\"ordate\": \"19.10.2023\"},{\"appid\": 403850,\"ordate\": \"29.01.2016\"},{\"appid\": 2717000,\"ordate\": \"24.12.2023\"},{\"appid\": 1548620,\"ordate\": \"19.04.2021\"},{\"appid\": 378270,\"ordate\": \"12.06.2015\"},{\"appid\": 527990,\"ordate\": \"01.10.2016\"},{\"appid\": 1304320,\"ordate\": \"21.05.2020\"},{\"appid\": 2111630,\"ordate\": \"20.09.2022\"},{\"appid\": 2868760,\"ordate\": \"03.04.2024\"},{\"appid\": 2490750,\"ordate\": \"17.07.2023\"},{\"appid\": 1140950,\"ordate\": \"02.09.2019\"},{\"appid\": 1371000,\"ordate\": \"30.09.2020\"},{\"appid\": 3181290,\"ordate\": \"13.11.2024\"},{\"appid\": 2378840,\"ordate\": \"18.04.2023\"},{\"appid\": 606790,\"ordate\": \"29.03.2019\"},{\"appid\": 2587930,\"ordate\": \"28.09.2023\"},{\"appid\": 1256830,\"ordate\": \"08.10.2021\"},{\"appid\": 1604450,\"ordate\": \"21.05.2021\"},{\"appid\": 1535200,\"ordate\": \"19.02.2021\"},{\"appid\": 1793350,\"ordate\": \"10.12.2021\"},{\"appid\": 3127650,\"ordate\": \"13.09.2024\"},{\"appid\": 1576000,\"ordate\": \"27.06.2022\"},{\"appid\": 793690,\"ordate\": \"21.03.2019\"},{\"appid\": 462680,\"ordate\": \"28.07.2016\"},{\"appid\": 558110,\"ordate\": \"23.02.2017\"},{\"appid\": 682590,\"ordate\": \"09.08.2017\"},{\"appid\": 2641930,\"ordate\": \"05.01.2024\"},{\"appid\": 1495560,\"ordate\": \"14.05.2021\"},{\"appid\": 2450480,\"ordate\": \"14.06.2023\"},{\"appid\": 1381880,\"ordate\": \"14.08.2020\"},{\"appid\": 2778630,\"ordate\": \"26.01.2024\"},{\"appid\": 2932740,\"ordate\": \"06.05.2024\"},{\"appid\": 921450,\"ordate\": \"28.11.2018\"},{\"appid\": 1183410,\"ordate\": \"29.11.2019\"},{\"appid\": 1422090,\"ordate\": \"23.10.2020\"},{\"appid\": 1426530,\"ordate\": \"25.12.2020\"},{\"appid\": 1828870,\"ordate\": \"03.03.2022\"},{\"appid\": 2589440,\"ordate\": \"20.10.2023\"},{\"appid\": 381260,\"ordate\": \"19.08.2015\"},{\"appid\": 3035140,\"ordate\": \"26.11.2024\"},{\"appid\": 1623080,\"ordate\": \"28.05.2021\"},{\"appid\": 2550860,\"ordate\": \"04.09.2023\"},{\"appid\": 815100,\"ordate\": \"02.12.2018\"},{\"appid\": 486320,\"ordate\": \"31.01.2018\"},{\"appid\": 856550,\"ordate\": \"07.06.2018\"},{\"appid\": 1474880,\"ordate\": \"11.12.2020\"},{\"appid\": 2304160,\"ordate\": \"01.03.2023\"},{\"appid\": 1120920,\"ordate\": \"31.07.2019\"},{\"appid\": 2120840,\"ordate\": \"30.05.2023\"},{\"appid\": 1584190,\"ordate\": \"26.08.2021\"},{\"appid\": 973390,\"ordate\": \"22.11.2018\"},{\"appid\": 1597220,\"ordate\": \"22.04.2021\"},{\"appid\": 1896650,\"ordate\": \"02.03.2022\"},{\"appid\": 2717480,\"ordate\": \"12.07.2024\"},{\"appid\": 1114660,\"ordate\": \"10.08.2019\"},{\"appid\": 389310,\"ordate\": \"06.08.2015\"},{\"appid\": 1338980,\"ordate\": \"21.06.2020\"},{\"appid\": 378720,\"ordate\": \"28.09.2015\"},{\"appid\": 569430,\"ordate\": \"19.12.2016\"},{\"appid\": 567200,\"ordate\": \"10.02.2017\"},{\"appid\": 2166850,\"ordate\": \"24.10.2022\"},{\"appid\": 1177400,\"ordate\": \"25.02.2021\"},{\"appid\": 1002270,\"ordate\": \"28.03.2019\"},{\"appid\": 2301850,\"ordate\": \"07.04.2023\"},{\"appid\": 3159680,\"ordate\": \"06.12.2024\"},{\"appid\": 1215960,\"ordate\": \"13.01.2020\"},{\"appid\": 2804200,\"ordate\": \"21.05.2024\"},{\"appid\": 3139930,\"ordate\": \"26.10.2024\"},{\"appid\": 1142860,\"ordate\": \"13.09.2019\"},{\"appid\": 2839420,\"ordate\": \"03.05.2024\"},{\"appid\": 2023810,\"ordate\": \"27.06.2022\"},{\"appid\": 811310,\"ordate\": \"01.06.2018\"},{\"appid\": 2064950,\"ordate\": \"15.07.2022\"},{\"appid\": 853220,\"ordate\": \"10.12.2018\"},{\"appid\": 2593960,\"ordate\": \"09.12.2023\"},{\"appid\": 2975660,\"ordate\": \"19.06.2024\"},{\"appid\": 1052150,\"ordate\": \"17.07.2019\"},{\"appid\": 629230,\"ordate\": \"24.06.2019\"},{\"appid\": 367260,\"ordate\": \"05.05.2015\"},{\"appid\": 2507780,\"ordate\": \"27.09.2023\"},{\"appid\": 1778830,\"ordate\": \"04.11.2021\"},{\"appid\": 1206660,\"ordate\": \"25.12.2019\"},{\"appid\": 1847060,\"ordate\": \"31.12.2021\"},{\"appid\": 1883820,\"ordate\": \"25.03.2022\"},{\"appid\": 1187110,\"ordate\": \"11.12.2019\"},{\"appid\": 985530,\"ordate\": \"08.12.2018\"},{\"appid\": 861280,\"ordate\": \"28.05.2018\"},{\"appid\": 754340,\"ordate\": \"27.05.2018\"},{\"appid\": 871990,\"ordate\": \"28.08.2018\"},{\"appid\": 495350,\"ordate\": \"27.07.2016\"},{\"appid\": 595010,\"ordate\": \"13.12.2017\"},{\"appid\": 2093270,\"ordate\": \"30.09.2022\"},{\"appid\": 2281700,\"ordate\": \"07.02.2023\"},{\"appid\": 532700,\"ordate\": \"21.09.2016\"},{\"appid\": 3337110,\"ordate\": \"28.11.2024\"},{\"appid\": 1399850,\"ordate\": \"02.09.2020\"},{\"appid\": 2128480,\"ordate\": \"10.03.2023\"},{\"appid\": 872630,\"ordate\": \"19.07.2019\"},{\"appid\": 2623690,\"ordate\": \"07.12.2023\"},{\"appid\": 2160710,\"ordate\": \"11.11.2022\"},{\"appid\": 1172120,\"ordate\": \"03.12.2019\"},{\"appid\": 2707400,\"ordate\": \"10.04.2024\"},{\"appid\": 2467590,\"ordate\": \"28.06.2023\"},{\"appid\": 1001960,\"ordate\": \"18.09.2020\"},{\"appid\": 1446560,\"ordate\": \"19.10.2021\"},{\"appid\": 1511950,\"ordate\": \"27.01.2021\"},{\"appid\": 1435470,\"ordate\": \"29.07.2022\"},{\"appid\": 2675620,\"ordate\": \"17.11.2023\"},{\"appid\": 888610,\"ordate\": \"16.08.2018\"},{\"appid\": 349580,\"ordate\": \"06.08.2015\"},{\"appid\": 2255830,\"ordate\": \"18.01.2023\"},{\"appid\": 705060,\"ordate\": \"22.09.2017\"},{\"appid\": 1597040,\"ordate\": \"02.07.2021\"},{\"appid\": 528950,\"ordate\": \"28.10.2016\"},{\"appid\": 3158010,\"ordate\": \"07.09.2024\"},{\"appid\": 2205600,\"ordate\": \"17.01.2024\"},{\"appid\": 1849190,\"ordate\": \"29.03.2022\"},{\"appid\": 2727530,\"ordate\": \"26.12.2023\"},{\"appid\": 890700,\"ordate\": \"30.01.2020\"},{\"appid\": 558990,\"ordate\": \"19.10.2017\"},{\"appid\": 281940,\"ordate\": \"27.01.2015\"},{\"appid\": 370360,\"ordate\": \"01.06.2015\"},{\"appid\": 492080,\"ordate\": \"04.07.2016\"},{\"appid\": 1131400,\"ordate\": \"23.08.2019\"},{\"appid\": 543140,\"ordate\": \"28.10.2016\"},{\"appid\": 594370,\"ordate\": \"06.04.2017\"},{\"appid\": 1547440,\"ordate\": \"10.09.2023\"},{\"appid\": 1370060,\"ordate\": \"12.06.2021\"},{\"appid\": 2694220,\"ordate\": \"26.12.2023\"},{\"appid\": 2981910,\"ordate\": \"19.09.2024\"},{\"appid\": 1104030,\"ordate\": \"06.09.2019\"},{\"appid\": 1078450,\"ordate\": \"27.05.2019\"},{\"appid\": 423180,\"ordate\": \"19.12.2015\"},{\"appid\": 886370,\"ordate\": \"31.08.2018\"},{\"appid\": 1509870,\"ordate\": \"31.01.2024\"},{\"appid\": 1135740,\"ordate\": \"24.10.2019\"},{\"appid\": 1511610,\"ordate\": \"16.01.2021\"},{\"appid\": 1157910,\"ordate\": \"31.10.2019\"},{\"appid\": 1014450,\"ordate\": \"01.02.2019\"},{\"appid\": 3262420,\"ordate\": \"29.11.2024\"},{\"appid\": 1060460,\"ordate\": \"30.05.2019\"},{\"appid\": 1020410,\"ordate\": \"28.03.2019\"},{\"appid\": 1142130,\"ordate\": \"13.09.2019\"},{\"appid\": 1145270,\"ordate\": \"10.09.2019\"},{\"appid\": 1997230,\"ordate\": \"19.06.2022\"},{\"appid\": 2587450,\"ordate\": \"22.02.2024\"},{\"appid\": 2146730,\"ordate\": \"28.09.2022\"},{\"appid\": 1291640,\"ordate\": \"03.05.2020\"},{\"appid\": 1105620,\"ordate\": \"08.07.2019\"},{\"appid\": 2115170,\"ordate\": \"03.09.2022\"},{\"appid\": 1202240,\"ordate\": \"29.02.2020\"},{\"appid\": 3262620,\"ordate\": \"31.10.2024\"},{\"appid\": 1485580,\"ordate\": \"18.12.2020\"},{\"appid\": 648070,\"ordate\": \"25.07.2017\"},{\"appid\": 642170,\"ordate\": \"07.07.2017\"},{\"appid\": 672460,\"ordate\": \"31.10.2017\"},{\"appid\": 1234280,\"ordate\": \"25.02.2020\"},{\"appid\": 988100,\"ordate\": \"08.03.2019\"},{\"appid\": 3109700,\"ordate\": \"29.10.2024\"},{\"appid\": 2629120,\"ordate\": \"17.10.2023\"},{\"appid\": 1789180,\"ordate\": \"10.12.2021\"},{\"appid\": 3206830,\"ordate\": \"18.10.2024\"},{\"appid\": 1412470,\"ordate\": \"11.11.2020\"},{\"appid\": 1449290,\"ordate\": \"15.05.2021\"},{\"appid\": 514240,\"ordate\": \"24.08.2016\"},{\"appid\": 1622560,\"ordate\": \"27.11.2021\"},{\"appid\": 2770250,\"ordate\": \"10.02.2024\"},{\"appid\": 1010450,\"ordate\": \"31.01.2019\"},{\"appid\": 1425920,\"ordate\": \"16.10.2020\"},{\"appid\": 992620,\"ordate\": \"20.03.2019\"},{\"appid\": 1702350,\"ordate\": \"29.09.2021\"},{\"appid\": 1650130,\"ordate\": \"06.07.2021\"},{\"appid\": 293840,\"ordate\": \"15.05.2014\"},{\"appid\": 1678760,\"ordate\": \"07.08.2021\"},{\"appid\": 708340,\"ordate\": \"07.10.2017\"},{\"appid\": 3126470,\"ordate\": \"30.09.2024\"},{\"appid\": 416040,\"ordate\": \"30.09.2016\"},{\"appid\": 3237300,\"ordate\": \"12.11.2024\"},{\"appid\": 3210160,\"ordate\": \"21.11.2024\"},{\"appid\": 2180430,\"ordate\": \"04.01.2023\"},{\"appid\": 325860,\"ordate\": \"19.10.2014\"},{\"appid\": 1216300,\"ordate\": \"26.06.2020\"},{\"appid\": 2620000,\"ordate\": \"19.11.2023\"},{\"appid\": 2154000,\"ordate\": \"06.10.2022\"},{\"appid\": 1300390,\"ordate\": \"24.07.2020\"},{\"appid\": 2739900,\"ordate\": \"03.05.2024\"},{\"appid\": 665930,\"ordate\": \"14.07.2017\"},{\"appid\": 578190,\"ordate\": \"17.01.2017\"},{\"appid\": 706440,\"ordate\": \"14.10.2017\"},{\"appid\": 861710,\"ordate\": \"29.05.2018\"},{\"appid\": 2010370,\"ordate\": \"02.12.2022\"},{\"appid\": 2628400,\"ordate\": \"10.01.2024\"},{\"appid\": 974180,\"ordate\": \"23.11.2018\"},{\"appid\": 317440,\"ordate\": \"20.10.2014\"},{\"appid\": 2440620,\"ordate\": \"19.12.2023\"},{\"appid\": 438820,\"ordate\": \"01.02.2016\"},{\"appid\": 517110,\"ordate\": \"18.01.2017\"},{\"appid\": 1750810,\"ordate\": \"27.09.2021\"},{\"appid\": 387840,\"ordate\": \"20.07.2015\"},{\"appid\": 684770,\"ordate\": \"02.09.2017\"},{\"appid\": 1406340,\"ordate\": \"08.01.2021\"},{\"appid\": 1129200,\"ordate\": \"23.08.2019\"},{\"appid\": 1289770,\"ordate\": \"07.05.2020\"},{\"appid\": 1218250,\"ordate\": \"18.02.2020\"},{\"appid\": 1798770,\"ordate\": \"13.11.2021\"},{\"appid\": 1921250,\"ordate\": \"12.03.2022\"},{\"appid\": 2359220,\"ordate\": \"04.07.2023\"},{\"appid\": 857510,\"ordate\": \"26.05.2018\"},{\"appid\": 600630,\"ordate\": \"03.04.2017\"},{\"appid\": 2894070,\"ordate\": \"09.04.2024\"},{\"appid\": 1063560,\"ordate\": \"24.04.2019\"},{\"appid\": 1744450,\"ordate\": \"25.11.2021\"},{\"appid\": 1405740,\"ordate\": \"21.08.2021\"},{\"appid\": 1671330,\"ordate\": \"02.12.2021\"},{\"appid\": 2192640,\"ordate\": \"08.11.2022\"},{\"appid\": 1054850,\"ordate\": \"30.12.2019\"},{\"appid\": 1976850,\"ordate\": \"28.06.2022\"},{\"appid\": 339280,\"ordate\": \"09.04.2015\"},{\"appid\": 2860800,\"ordate\": \"16.03.2024\"},{\"appid\": 1325380,\"ordate\": \"30.09.2020\"},{\"appid\": 1526500,\"ordate\": \"20.03.2021\"},{\"appid\": 2766020,\"ordate\": \"01.05.2024\"},{\"appid\": 2672510,\"ordate\": \"24.10.2024\"},{\"appid\": 3302960,\"ordate\": \"28.12.2024\"},{\"appid\": 339860,\"ordate\": \"15.01.2015\"},{\"appid\": 1351120,\"ordate\": \"19.07.2020\"},{\"appid\": 1783180,\"ordate\": \"27.01.2022\"},{\"appid\": 386540,\"ordate\": \"19.08.2015\"},{\"appid\": 454060,\"ordate\": \"01.04.2016\"},{\"appid\": 504210,\"ordate\": \"06.10.2016\"},{\"appid\": 1521980,\"ordate\": \"25.03.2021\"},{\"appid\": 2985510,\"ordate\": \"18.07.2024\"},{\"appid\": 3076400,\"ordate\": \"29.08.2024\"},{\"appid\": 1505470,\"ordate\": \"12.01.2021\"},{\"appid\": 555230,\"ordate\": \"05.12.2016\"},{\"appid\": 376350,\"ordate\": \"12.06.2015\"},{\"appid\": 2544870,\"ordate\": \"06.11.2023\"},{\"appid\": 2023250,\"ordate\": \"27.06.2022\"},{\"appid\": 2513240,\"ordate\": \"15.02.2024\"},{\"appid\": 1949930,\"ordate\": \"20.04.2022\"},{\"appid\": 1772920,\"ordate\": \"19.11.2021\"},{\"appid\": 2085790,\"ordate\": \"29.07.2022\"},{\"appid\": 2715370,\"ordate\": \"03.01.2025\"},{\"appid\": 2102000,\"ordate\": \"19.10.2022\"},{\"appid\": 1325420,\"ordate\": \"12.02.2021\"},{\"appid\": 2266740,\"ordate\": \"07.12.2023\"},{\"appid\": 1172050,\"ordate\": \"16.08.2020\"},{\"appid\": 1058370,\"ordate\": \"13.05.2019\"},{\"appid\": 1255660,\"ordate\": \"13.03.2020\"},{\"appid\": 1439340,\"ordate\": \"13.11.2020\"},{\"appid\": 1522010,\"ordate\": \"29.01.2021\"},{\"appid\": 2395620,\"ordate\": \"08.06.2023\"},{\"appid\": 1837140,\"ordate\": \"09.05.2022\"},{\"appid\": 1812950,\"ordate\": \"29.06.2022\"},{\"appid\": 1480810,\"ordate\": \"25.07.2023\"},{\"appid\": 1015090,\"ordate\": \"27.07.2019\"},{\"appid\": 1191510,\"ordate\": \"24.11.2019\"},{\"appid\": 1132540,\"ordate\": \"23.06.2020\"},{\"appid\": 546400,\"ordate\": \"10.01.2017\"},{\"appid\": 528190,\"ordate\": \"18.10.2016\"},{\"appid\": 964920,\"ordate\": \"23.11.2018\"},{\"appid\": 1359650,\"ordate\": \"15.08.2020\"},{\"appid\": 501440,\"ordate\": \"20.07.2016\"},{\"appid\": 2797410,\"ordate\": \"06.03.2024\"},{\"appid\": 790130,\"ordate\": \"21.03.2018\"},{\"appid\": 1281980,\"ordate\": \"23.04.2020\"},{\"appid\": 2606270,\"ordate\": \"24.11.2023\"},{\"appid\": 2114180,\"ordate\": \"16.11.2022\"},{\"appid\": 1505390,\"ordate\": \"22.01.2021\"},{\"appid\": 3098700,\"ordate\": \"17.10.2024\"},{\"appid\": 2719600,\"ordate\": \"17.12.2023\"},{\"appid\": 751320,\"ordate\": \"21.10.2022\"},{\"appid\": 1891270,\"ordate\": \"17.03.2022\"},{\"appid\": 2100040,\"ordate\": \"12.02.2023\"},{\"appid\": 2307690,\"ordate\": \"10.03.2023\"},{\"appid\": 2406870,\"ordate\": \"14.07.2023\"},{\"appid\": 576400,\"ordate\": \"16.02.2017\"},{\"appid\": 1854510,\"ordate\": \"28.01.2022\"},{\"appid\": 2871930,\"ordate\": \"05.06.2024\"},{\"appid\": 1952740,\"ordate\": \"10.05.2022\"},{\"appid\": 470490,\"ordate\": \"31.07.2016\"},{\"appid\": 1322180,\"ordate\": \"02.06.2020\"},{\"appid\": 937970,\"ordate\": \"04.10.2018\"},{\"appid\": 2214890,\"ordate\": \"20.12.2022\"},{\"appid\": 1067060,\"ordate\": \"01.05.2019\"},{\"appid\": 781030,\"ordate\": \"24.01.2019\"},{\"appid\": 1344830,\"ordate\": \"13.08.2020\"},{\"appid\": 981260,\"ordate\": \"30.11.2018\"},{\"appid\": 2020590,\"ordate\": \"21.10.2022\"},{\"appid\": 816650,\"ordate\": \"13.04.2018\"},{\"appid\": 1596240,\"ordate\": \"26.04.2021\"},{\"appid\": 1701380,\"ordate\": \"23.10.2021\"},{\"appid\": 630490,\"ordate\": \"23.07.2019\"},{\"appid\": 2985900,\"ordate\": \"08.06.2024\"},{\"appid\": 412620,\"ordate\": \"16.01.2017\"},{\"appid\": 2093050,\"ordate\": \"17.02.2023\"},{\"appid\": 2455370,\"ordate\": \"17.08.2023\"},{\"appid\": 1691370,\"ordate\": \"30.09.2021\"},{\"appid\": 760930,\"ordate\": \"12.12.2017\"},{\"appid\": 1067110,\"ordate\": \"10.05.2019\"},{\"appid\": 1337340,\"ordate\": \"19.06.2020\"},{\"appid\": 1470670,\"ordate\": \"02.09.2021\"},{\"appid\": 887520,\"ordate\": \"17.07.2018\"},{\"appid\": 1503350,\"ordate\": \"08.01.2021\"},{\"appid\": 547090,\"ordate\": \"28.10.2016\"},{\"appid\": 1538170,\"ordate\": \"01.03.2021\"},{\"appid\": 2222260,\"ordate\": \"17.12.2022\"},{\"appid\": 1339790,\"ordate\": \"02.10.2020\"},{\"appid\": 1261640,\"ordate\": \"23.03.2020\"},{\"appid\": 877230,\"ordate\": \"06.07.2018\"},{\"appid\": 335770,\"ordate\": \"20.12.2014\"},{\"appid\": 1902900,\"ordate\": \"16.03.2022\"},{\"appid\": 1229260,\"ordate\": \"10.02.2020\"},{\"appid\": 2463290,\"ordate\": \"03.08.2024\"},{\"appid\": 1516580,\"ordate\": \"13.08.2021\"},{\"appid\": 933250,\"ordate\": \"29.09.2018\"},{\"appid\": 2190470,\"ordate\": \"07.03.2023\"},{\"appid\": 1553400,\"ordate\": \"29.04.2022\"},{\"appid\": 1393350,\"ordate\": \"13.10.2020\"},{\"appid\": 2510510,\"ordate\": \"23.08.2023\"},{\"appid\": 322580,\"ordate\": \"20.09.2014\"},{\"appid\": 2459870,\"ordate\": \"05.01.2024\"},{\"appid\": 1824570,\"ordate\": \"08.11.2023\"},{\"appid\": 2794140,\"ordate\": \"13.02.2024\"},{\"appid\": 3302650,\"ordate\": \"22.11.2024\"},{\"appid\": 1671310,\"ordate\": \"28.05.2022\"},{\"appid\": 1254150,\"ordate\": \"11.03.2020\"},{\"appid\": 2684410,\"ordate\": \"28.12.2023\"},{\"appid\": 818610,\"ordate\": \"16.05.2018\"},{\"appid\": 1410360,\"ordate\": \"22.02.2021\"},{\"appid\": 802080,\"ordate\": \"07.07.2018\"},{\"appid\": 3260840,\"ordate\": \"30.10.2024\"},{\"appid\": 1683730,\"ordate\": \"22.07.2021\"},{\"appid\": 566270,\"ordate\": \"19.12.2016\"},{\"appid\": 2681100,\"ordate\": \"02.12.2023\"},{\"appid\": 1834620,\"ordate\": \"08.01.2022\"},{\"appid\": 1564950,\"ordate\": \"20.04.2021\"},{\"appid\": 2343460,\"ordate\": \"14.07.2023\"},{\"appid\": 3366120,\"ordate\": \"20.12.2024\"},{\"appid\": 2595860,\"ordate\": \"08.10.2023\"},{\"appid\": 2271560,\"ordate\": \"07.06.2023\"},{\"appid\": 1335810,\"ordate\": \"18.06.2020\"},{\"appid\": 2515210,\"ordate\": \"03.11.2023\"},{\"appid\": 1080240,\"ordate\": \"13.11.2019\"},{\"appid\": 2163100,\"ordate\": \"15.05.2023\"},{\"appid\": 2687160,\"ordate\": \"07.01.2024\"},{\"appid\": 1117930,\"ordate\": \"22.09.2020\"},{\"appid\": 1879000,\"ordate\": \"06.02.2022\"},{\"appid\": 3168390,\"ordate\": \"15.11.2024\"},{\"appid\": 2438290,\"ordate\": \"07.11.2024\"},{\"appid\": 2710590,\"ordate\": \"24.12.2023\"},{\"appid\": 1505460,\"ordate\": \"21.01.2021\"},{\"appid\": 1380830,\"ordate\": \"02.01.2021\"},{\"appid\": 806470,\"ordate\": \"09.03.2018\"},{\"appid\": 571350,\"ordate\": \"27.01.2017\"},{\"appid\": 792720,\"ordate\": \"16.03.2018\"},{\"appid\": 2403940,\"ordate\": \"15.12.2023\"},{\"appid\": 1871000,\"ordate\": \"26.01.2022\"},{\"appid\": 1155120,\"ordate\": \"15.10.2019\"},{\"appid\": 1255550,\"ordate\": \"26.03.2020\"},{\"appid\": 1517150,\"ordate\": \"17.05.2021\"},{\"appid\": 1561560,\"ordate\": \"25.03.2021\"},{\"appid\": 1569620,\"ordate\": \"10.04.2021\"},{\"appid\": 1570720,\"ordate\": \"23.03.2021\"},{\"appid\": 1802570,\"ordate\": \"20.11.2021\"},{\"appid\": 2054220,\"ordate\": \"20.09.2023\"},{\"appid\": 1045650,\"ordate\": \"28.03.2019\"},{\"appid\": 1535500,\"ordate\": \"18.03.2021\"},{\"appid\": 544800,\"ordate\": \"27.10.2016\"},{\"appid\": 529520,\"ordate\": \"26.09.2017\"},{\"appid\": 2591840,\"ordate\": \"01.11.2023\"},{\"appid\": 1681350,\"ordate\": \"19.07.2021\"},{\"appid\": 951220,\"ordate\": \"26.10.2018\"},{\"appid\": 775760,\"ordate\": \"07.03.2019\"},{\"appid\": 610680,\"ordate\": \"25.07.2017\"},{\"appid\": 3155690,\"ordate\": \"13.09.2024\"},{\"appid\": 1456290,\"ordate\": \"28.12.2020\"},{\"appid\": 1288670,\"ordate\": \"15.05.2020\"},{\"appid\": 1935400,\"ordate\": \"11.10.2024\"},{\"appid\": 2544720,\"ordate\": \"11.10.2023\"},{\"appid\": 2253770,\"ordate\": \"08.03.2023\"},{\"appid\": 2767310,\"ordate\": \"04.02.2024\"},{\"appid\": 1874010,\"ordate\": \"01.02.2022\"},{\"appid\": 2491080,\"ordate\": \"06.11.2024\"},{\"appid\": 1197180,\"ordate\": \"01.01.2023\"},{\"appid\": 965580,\"ordate\": \"20.08.2020\"},{\"appid\": 2331040,\"ordate\": \"23.10.2024\"},{\"appid\": 1051870,\"ordate\": \"07.05.2020\"},{\"appid\": 1925500,\"ordate\": \"24.03.2022\"},{\"appid\": 2009300,\"ordate\": \"04.08.2022\"},{\"appid\": 2571350,\"ordate\": \"12.09.2023\"},{\"appid\": 1899400,\"ordate\": \"08.04.2022\"},{\"appid\": 1055620,\"ordate\": \"13.04.2019\"},{\"appid\": 2961510,\"ordate\": \"14.05.2024\"},{\"appid\": 1631090,\"ordate\": \"06.01.2023\"},{\"appid\": 495390,\"ordate\": \"05.07.2016\"},{\"appid\": 274230,\"ordate\": \"27.05.2015\"},{\"appid\": 1843710,\"ordate\": \"22.04.2022\"},{\"appid\": 1864770,\"ordate\": \"26.07.2022\"},{\"appid\": 973860,\"ordate\": \"14.11.2018\"},{\"appid\": 1426990,\"ordate\": \"12.10.2020\"},{\"appid\": 1008680,\"ordate\": \"19.01.2019\"},{\"appid\": 1454390,\"ordate\": \"14.01.2021\"},{\"appid\": 754230,\"ordate\": \"16.12.2017\"},{\"appid\": 2873010,\"ordate\": \"16.05.2024\"},{\"appid\": 1220540,\"ordate\": \"31.01.2020\"},{\"appid\": 1274430,\"ordate\": \"07.05.2020\"},{\"appid\": 1463730,\"ordate\": \"26.05.2021\"},{\"appid\": 2283360,\"ordate\": \"06.05.2023\"},{\"appid\": 692860,\"ordate\": \"10.02.2018\"},{\"appid\": 2228330,\"ordate\": \"28.12.2022\"},{\"appid\": 573040,\"ordate\": \"21.01.2017\"},{\"appid\": 2846380,\"ordate\": \"27.03.2024\"},{\"appid\": 1039370,\"ordate\": \"16.03.2019\"},{\"appid\": 979900,\"ordate\": \"19.12.2018\"},{\"appid\": 931250,\"ordate\": \"04.10.2018\"},{\"appid\": 2613370,\"ordate\": \"13.10.2023\"},{\"appid\": 1559620,\"ordate\": \"25.10.2024\"},{\"appid\": 1724010,\"ordate\": \"30.08.2021\"},{\"appid\": 1135890,\"ordate\": \"04.11.2021\"},{\"appid\": 1832010,\"ordate\": \"02.02.2022\"},{\"appid\": 2966150,\"ordate\": \"10.06.2024\"},{\"appid\": 404870,\"ordate\": \"08.06.2023\"},{\"appid\": 1071970,\"ordate\": \"14.06.2019\"},{\"appid\": 1302180,\"ordate\": \"13.05.2020\"},{\"appid\": 1824450,\"ordate\": \"09.12.2021\"},{\"appid\": 2343240,\"ordate\": \"24.03.2023\"},{\"appid\": 2569240,\"ordate\": \"24.09.2023\"},{\"appid\": 2799110,\"ordate\": \"18.02.2024\"},{\"appid\": 983170,\"ordate\": \"07.03.2019\"},{\"appid\": 1485450,\"ordate\": \"17.12.2020\"},{\"appid\": 1037410,\"ordate\": \"07.06.2019\"},{\"appid\": 1071770,\"ordate\": \"11.05.2019\"},{\"appid\": 1179190,\"ordate\": \"18.11.2019\"},{\"appid\": 1146940,\"ordate\": \"04.11.2019\"},{\"appid\": 1689310,\"ordate\": \"10.12.2021\"},{\"appid\": 2084520,\"ordate\": \"27.08.2022\"},{\"appid\": 1283330,\"ordate\": \"29.05.2020\"},{\"appid\": 486880,\"ordate\": \"12.07.2016\"},{\"appid\": 1208980,\"ordate\": \"20.08.2020\"},{\"appid\": 1923780,\"ordate\": \"12.04.2022\"},{\"appid\": 1352590,\"ordate\": \"29.06.2020\"},{\"appid\": 1877830,\"ordate\": \"14.02.2022\"},{\"appid\": 2751980,\"ordate\": \"29.02.2024\"},{\"appid\": 755570,\"ordate\": \"26.12.2017\"},{\"appid\": 1420980,\"ordate\": \"01.02.2021\"},{\"appid\": 1179540,\"ordate\": \"15.12.2019\"},{\"appid\": 2818510,\"ordate\": \"30.04.2024\"},{\"appid\": 2758730,\"ordate\": \"04.10.2024\"},{\"appid\": 3161510,\"ordate\": \"02.10.2024\"},{\"appid\": 1565840,\"ordate\": \"10.07.2021\"},{\"appid\": 2565550,\"ordate\": \"26.08.2024\"},{\"appid\": 863380,\"ordate\": \"01.07.2018\"},{\"appid\": 1279480,\"ordate\": \"13.05.2020\"},{\"appid\": 2401370,\"ordate\": \"19.01.2024\"},{\"appid\": 2022030,\"ordate\": \"25.12.2023\"},{\"appid\": 1547160,\"ordate\": \"12.06.2021\"},{\"appid\": 2301040,\"ordate\": \"17.02.2023\"},{\"appid\": 886040,\"ordate\": \"04.07.2018\"},{\"appid\": 2057070,\"ordate\": \"01.08.2022\"},{\"appid\": 1391990,\"ordate\": \"26.08.2020\"},{\"appid\": 1390830,\"ordate\": \"24.08.2020\"},{\"appid\": 2107470,\"ordate\": \"02.05.2023\"},{\"appid\": 1676710,\"ordate\": \"17.08.2021\"},{\"appid\": 786020,\"ordate\": \"11.05.2019\"},{\"appid\": 1286370,\"ordate\": \"17.04.2020\"},{\"appid\": 2100840,\"ordate\": \"19.09.2022\"},{\"appid\": 2505160,\"ordate\": \"18.10.2023\"},{\"appid\": 2748530,\"ordate\": \"24.01.2024\"},{\"appid\": 697010,\"ordate\": \"19.12.2017\"},{\"appid\": 2363140,\"ordate\": \"14.04.2023\"},{\"appid\": 1176020,\"ordate\": \"04.11.2019\"},{\"appid\": 2435960,\"ordate\": \"14.07.2023\"},{\"appid\": 895750,\"ordate\": \"18.08.2018\"},{\"appid\": 1505450,\"ordate\": \"04.02.2021\"},{\"appid\": 509850,\"ordate\": \"13.08.2016\"},{\"appid\": 444590,\"ordate\": \"27.04.2016\"},{\"appid\": 2927880,\"ordate\": \"17.05.2024\"},{\"appid\": 1082990,\"ordate\": \"17.06.2019\"},{\"appid\": 756380,\"ordate\": \"28.02.2018\"},{\"appid\": 1066240,\"ordate\": \"30.04.2019\"},{\"appid\": 2848840,\"ordate\": \"24.05.2024\"},{\"appid\": 1576110,\"ordate\": \"01.05.2021\"},{\"appid\": 3315750,\"ordate\": \"15.01.2025\"},{\"appid\": 2751820,\"ordate\": \"05.12.2024\"},{\"appid\": 2706320,\"ordate\": \"23.12.2023\"},{\"appid\": 2254540,\"ordate\": \"20.01.2023\"},{\"appid\": 1345150,\"ordate\": \"23.06.2020\"},{\"appid\": 2614320,\"ordate\": \"09.10.2023\"},{\"appid\": 1264770,\"ordate\": \"19.04.2020\"},{\"appid\": 1095820,\"ordate\": \"01.08.2020\"},{\"appid\": 2626740,\"ordate\": \"16.10.2023\"},{\"appid\": 2519310,\"ordate\": \"20.08.2023\"},{\"appid\": 613020,\"ordate\": \"30.03.2017\"},{\"appid\": 2414920,\"ordate\": \"18.05.2023\"},{\"appid\": 800510,\"ordate\": \"15.03.2018\"},{\"appid\": 470270,\"ordate\": \"28.07.2016\"},{\"appid\": 1071620,\"ordate\": \"07.02.2023\"},{\"appid\": 1459850,\"ordate\": \"21.11.2020\"},{\"appid\": 1557780,\"ordate\": \"21.07.2021\"},{\"appid\": 2358290,\"ordate\": \"31.03.2023\"},{\"appid\": 2392240,\"ordate\": \"28.04.2023\"},{\"appid\": 2413820,\"ordate\": \"15.05.2023\"},{\"appid\": 2482460,\"ordate\": \"06.07.2023\"},{\"appid\": 2494280,\"ordate\": \"18.07.2023\"},{\"appid\": 314980,\"ordate\": \"18.09.2014\"},{\"appid\": 1475180,\"ordate\": \"28.01.2021\"},{\"appid\": 544840,\"ordate\": \"21.11.2016\"},{\"appid\": 971540,\"ordate\": \"25.11.2018\"},{\"appid\": 2674580,\"ordate\": \"30.11.2023\"},{\"appid\": 2808860,\"ordate\": \"14.02.2024\"},{\"appid\": 2380590,\"ordate\": \"25.04.2023\"},{\"appid\": 386350,\"ordate\": \"19.10.2015\"},{\"appid\": 1511780,\"ordate\": \"05.07.2022\"},{\"appid\": 1993530,\"ordate\": \"14.06.2022\"},{\"appid\": 786180,\"ordate\": \"23.02.2018\"},{\"appid\": 1109720,\"ordate\": \"28.02.2020\"},{\"appid\": 2810470,\"ordate\": \"13.06.2024\"},{\"appid\": 569870,\"ordate\": \"21.11.2018\"},{\"appid\": 3398070,\"ordate\": \"04.01.2025\"},{\"appid\": 636220,\"ordate\": \"03.10.2017\"},{\"appid\": 399670,\"ordate\": \"04.09.2015\"},{\"appid\": 2157110,\"ordate\": \"01.11.2022\"},{\"appid\": 2259060,\"ordate\": \"29.01.2023\"},{\"appid\": 1608460,\"ordate\": \"11.06.2021\"},{\"appid\": 443630,\"ordate\": \"07.04.2016\"},{\"appid\": 864110,\"ordate\": \"04.06.2018\"},{\"appid\": 653190,\"ordate\": \"04.08.2017\"},{\"appid\": 2437660,\"ordate\": \"28.10.2023\"},{\"appid\": 2143740,\"ordate\": \"27.09.2022\"},{\"appid\": 2649910,\"ordate\": \"07.11.2023\"},{\"appid\": 597670,\"ordate\": \"09.03.2017\"},{\"appid\": 2170100,\"ordate\": \"10.03.2023\"},{\"appid\": 1290480,\"ordate\": \"15.09.2020\"},{\"appid\": 1820330,\"ordate\": \"14.03.2022\"},{\"appid\": 1084530,\"ordate\": \"24.06.2019\"},{\"appid\": 1268150,\"ordate\": \"22.06.2020\"},{\"appid\": 1352080,\"ordate\": \"15.03.2021\"},{\"appid\": 1797880,\"ordate\": \"04.08.2022\"},{\"appid\": 2050560,\"ordate\": \"22.09.2022\"},{\"appid\": 1525390,\"ordate\": \"16.04.2021\"},{\"appid\": 1080130,\"ordate\": \"25.05.2019\"},{\"appid\": 446070,\"ordate\": \"09.04.2016\"},{\"appid\": 1381290,\"ordate\": \"17.08.2020\"},{\"appid\": 1204670,\"ordate\": \"08.01.2020\"},{\"appid\": 316080,\"ordate\": \"26.03.2015\"},{\"appid\": 1570480,\"ordate\": \"28.04.2021\"},{\"appid\": 2270700,\"ordate\": \"05.02.2023\"},{\"appid\": 2160030,\"ordate\": \"12.11.2022\"},{\"appid\": 896160,\"ordate\": \"10.11.2018\"},{\"appid\": 604500,\"ordate\": \"26.09.2017\"},{\"appid\": 1585400,\"ordate\": \"14.12.2022\"},{\"appid\": 1437600,\"ordate\": \"30.10.2020\"},{\"appid\": 1308950,\"ordate\": \"08.06.2020\"},{\"appid\": 1402740,\"ordate\": \"04.09.2020\"},{\"appid\": 1008800,\"ordate\": \"09.04.2019\"},{\"appid\": 1857580,\"ordate\": \"03.02.2022\"},{\"appid\": 1758460,\"ordate\": \"02.10.2021\"},{\"appid\": 2726720,\"ordate\": \"25.01.2024\"},{\"appid\": 2408700,\"ordate\": \"25.06.2023\"},{\"appid\": 1127290,\"ordate\": \"15.11.2019\"},{\"appid\": 1431190,\"ordate\": \"22.10.2020\"},{\"appid\": 871230,\"ordate\": \"14.07.2018\"},{\"appid\": 1447090,\"ordate\": \"08.11.2020\"},{\"appid\": 1094660,\"ordate\": \"14.06.2019\"},{\"appid\": 1828070,\"ordate\": \"28.12.2021\"},{\"appid\": 363530,\"ordate\": \"26.05.2016\"},{\"appid\": 439880,\"ordate\": \"13.05.2016\"},{\"appid\": 1417670,\"ordate\": \"23.09.2020\"},{\"appid\": 1258840,\"ordate\": \"06.03.2020\"},{\"appid\": 1367110,\"ordate\": \"08.07.2020\"},{\"appid\": 2726240,\"ordate\": \"26.02.2024\"},{\"appid\": 611140,\"ordate\": \"01.04.2017\"},{\"appid\": 2731640,\"ordate\": \"22.02.2024\"},{\"appid\": 834380,\"ordate\": \"20.04.2018\"},{\"appid\": 398970,\"ordate\": \"11.10.2015\"},{\"appid\": 1505420,\"ordate\": \"06.02.2021\"},{\"appid\": 1192730,\"ordate\": \"10.12.2019\"},{\"appid\": 1139240,\"ordate\": \"29.08.2019\"},{\"appid\": 3028880,\"ordate\": \"23.10.2024\"},{\"appid\": 1232130,\"ordate\": \"07.02.2020\"},{\"appid\": 1505400,\"ordate\": \"12.02.2021\"},{\"appid\": 3301040,\"ordate\": \"18.11.2024\"},{\"appid\": 1912170,\"ordate\": \"07.04.2022\"},{\"appid\": 2793810,\"ordate\": \"18.02.2024\"},{\"appid\": 2230680,\"ordate\": \"20.05.2023\"},{\"appid\": 965590,\"ordate\": \"07.03.2020\"},{\"appid\": 1036600,\"ordate\": \"12.03.2019\"},{\"appid\": 3039990,\"ordate\": \"06.09.2024\"},{\"appid\": 3279980,\"ordate\": \"29.11.2024\"},{\"appid\": 461680,\"ordate\": \"29.04.2016\"},{\"appid\": 381220,\"ordate\": \"07.07.2015\"},{\"appid\": 1668800,\"ordate\": \"18.10.2021\"},{\"appid\": 1749170,\"ordate\": \"27.09.2021\"},{\"appid\": 3022340,\"ordate\": \"30.07.2024\"},{\"appid\": 2922030,\"ordate\": \"18.06.2024\"},{\"appid\": 1398180,\"ordate\": \"07.09.2020\"},{\"appid\": 924740,\"ordate\": \"13.12.2019\"},{\"appid\": 890710,\"ordate\": \"31.07.2018\"},{\"appid\": 1138900,\"ordate\": \"15.08.2019\"},{\"appid\": 1651460,\"ordate\": \"14.06.2021\"},{\"appid\": 2797000,\"ordate\": \"25.06.2024\"},{\"appid\": 1164330,\"ordate\": \"15.10.2019\"},{\"appid\": 2907000,\"ordate\": \"10.04.2024\"},{\"appid\": 2463160,\"ordate\": \"21.06.2023\"},{\"appid\": 1139660,\"ordate\": \"03.12.2020\"},{\"appid\": 1481020,\"ordate\": \"07.12.2020\"},{\"appid\": 969970,\"ordate\": \"18.12.2018\"},{\"appid\": 295630,\"ordate\": \"07.05.2014\"},{\"appid\": 2805920,\"ordate\": \"30.06.2024\"},{\"appid\": 1414070,\"ordate\": \"06.10.2020\"},{\"appid\": 2919110,\"ordate\": \"30.06.2024\"},{\"appid\": 1566870,\"ordate\": \"08.04.2021\"},{\"appid\": 2945110,\"ordate\": \"16.05.2024\"},{\"appid\": 2543750,\"ordate\": \"07.05.2024\"},{\"appid\": 1609440,\"ordate\": \"07.05.2021\"},{\"appid\": 946070,\"ordate\": \"30.04.2019\"},{\"appid\": 1053040,\"ordate\": \"25.03.2019\"},{\"appid\": 1265300,\"ordate\": \"04.11.2020\"},{\"appid\": 1517520,\"ordate\": \"04.02.2021\"},{\"appid\": 1969870,\"ordate\": \"27.06.2022\"},{\"appid\": 2643090,\"ordate\": \"01.11.2023\"},{\"appid\": 2419870,\"ordate\": \"02.06.2023\"},{\"appid\": 1132770,\"ordate\": \"31.03.2021\"},{\"appid\": 1031200,\"ordate\": \"13.03.2019\"},{\"appid\": 454030,\"ordate\": \"31.03.2016\"},{\"appid\": 1744050,\"ordate\": \"16.09.2021\"},{\"appid\": 3309620,\"ordate\": \"01.12.2024\"},{\"appid\": 2161630,\"ordate\": \"18.01.2023\"},{\"appid\": 2818420,\"ordate\": \"16.03.2024\"},{\"appid\": 1069270,\"ordate\": \"30.05.2019\"},{\"appid\": 396930,\"ordate\": \"02.11.2015\"},{\"appid\": 1110670,\"ordate\": \"02.08.2019\"},{\"appid\": 1619060,\"ordate\": \"24.06.2021\"},{\"appid\": 1614500,\"ordate\": \"16.06.2021\"},{\"appid\": 2276120,\"ordate\": \"07.02.2023\"},{\"appid\": 463350,\"ordate\": \"27.05.2016\"},{\"appid\": 1201760,\"ordate\": \"22.06.2020\"},{\"appid\": 1773320,\"ordate\": \"17.10.2021\"},{\"appid\": 2954340,\"ordate\": \"03.08.2024\"},{\"appid\": 1215690,\"ordate\": \"13.01.2020\"},{\"appid\": 3341100,\"ordate\": \"09.01.2025\"},{\"appid\": 2752770,\"ordate\": \"22.01.2024\"},{\"appid\": 2668540,\"ordate\": \"20.09.2024\"},{\"appid\": 1929420,\"ordate\": \"11.04.2022\"},{\"appid\": 467790,\"ordate\": \"15.06.2016\"},{\"appid\": 2516820,\"ordate\": \"04.08.2023\"},{\"appid\": 448720,\"ordate\": \"01.04.2016\"},{\"appid\": 1607000,\"ordate\": \"23.06.2021\"},{\"appid\": 1348030,\"ordate\": \"16.07.2020\"},{\"appid\": 2617740,\"ordate\": \"06.04.2024\"},{\"appid\": 3383180,\"ordate\": \"27.12.2024\"},{\"appid\": 2224260,\"ordate\": \"01.09.2023\"},{\"appid\": 570380,\"ordate\": \"03.01.2017\"},{\"appid\": 1897480,\"ordate\": \"03.08.2023\"},{\"appid\": 920460,\"ordate\": \"18.09.2018\"},{\"appid\": 1646280,\"ordate\": \"23.02.2022\"},{\"appid\": 342280,\"ordate\": \"17.11.2015\"},{\"appid\": 1444890,\"ordate\": \"27.10.2020\"},{\"appid\": 773830,\"ordate\": \"04.04.2019\"},{\"appid\": 949930,\"ordate\": \"16.11.2018\"},{\"appid\": 1199540,\"ordate\": \"10.03.2020\"},{\"appid\": 2000040,\"ordate\": \"21.10.2022\"},{\"appid\": 573280,\"ordate\": \"27.12.2016\"},{\"appid\": 916910,\"ordate\": \"25.08.2018\"},{\"appid\": 353580,\"ordate\": \"11.11.2016\"},{\"appid\": 575210,\"ordate\": \"04.01.2017\"},{\"appid\": 1563010,\"ordate\": \"13.03.2021\"},{\"appid\": 573260,\"ordate\": \"26.01.2017\"},{\"appid\": 1496530,\"ordate\": \"06.01.2021\"},{\"appid\": 1447070,\"ordate\": \"29.10.2020\"},{\"appid\": 830620,\"ordate\": \"28.09.2018\"},{\"appid\": 2485900,\"ordate\": \"19.07.2023\"},{\"appid\": 737050,\"ordate\": \"05.01.2021\"},{\"appid\": 2830250,\"ordate\": \"28.02.2024\"},{\"appid\": 1595600,\"ordate\": \"29.05.2021\"},{\"appid\": 3008210,\"ordate\": \"14.08.2024\"},{\"appid\": 2324930,\"ordate\": \"09.03.2023\"},{\"appid\": 2520870,\"ordate\": \"08.09.2023\"},{\"appid\": 574520,\"ordate\": \"26.01.2017\"},{\"appid\": 1403890,\"ordate\": \"13.09.2020\"},{\"appid\": 2379890,\"ordate\": \"12.06.2023\"},{\"appid\": 1668720,\"ordate\": \"02.12.2021\"},{\"appid\": 2562470,\"ordate\": \"15.09.2023\"},{\"appid\": 1505440,\"ordate\": \"12.02.2021\"},{\"appid\": 975710,\"ordate\": \"28.11.2018\"},{\"appid\": 1158690,\"ordate\": \"20.11.2019\"},{\"appid\": 1280100,\"ordate\": \"04.04.2020\"},{\"appid\": 1662740,\"ordate\": \"01.07.2021\"},{\"appid\": 2316480,\"ordate\": \"05.03.2023\"},{\"appid\": 2511280,\"ordate\": \"29.08.2023\"},{\"appid\": 3338570,\"ordate\": \"01.01.2025\"},{\"appid\": 2462450,\"ordate\": \"23.06.2023\"},{\"appid\": 1063820,\"ordate\": \"02.05.2019\"},{\"appid\": 1382370,\"ordate\": \"21.08.2020\"},{\"appid\": 776190,\"ordate\": \"13.01.2018\"},{\"appid\": 845200,\"ordate\": \"26.04.2018\"},{\"appid\": 265670,\"ordate\": \"24.02.2014\"},{\"appid\": 544400,\"ordate\": \"13.03.2017\"},{\"appid\": 698740,\"ordate\": \"01.09.2017\"},{\"appid\": 1713620,\"ordate\": \"19.08.2021\"},{\"appid\": 1327100,\"ordate\": \"01.09.2020\"},{\"appid\": 1281530,\"ordate\": \"15.04.2020\"},{\"appid\": 3003960,\"ordate\": \"10.06.2024\"},{\"appid\": 2264200,\"ordate\": \"23.01.2023\"},{\"appid\": 1007430,\"ordate\": \"01.02.2019\"},{\"appid\": 1578410,\"ordate\": \"15.04.2021\"},{\"appid\": 1164550,\"ordate\": \"21.10.2019\"},{\"appid\": 1198550,\"ordate\": \"20.12.2019\"},{\"appid\": 1547860,\"ordate\": \"01.09.2022\"},{\"appid\": 1594300,\"ordate\": \"23.04.2021\"},{\"appid\": 1379610,\"ordate\": \"01.04.2022\"},{\"appid\": 1558980,\"ordate\": \"13.01.2024\"},{\"appid\": 1451830,\"ordate\": \"13.04.2021\"},{\"appid\": 1268290,\"ordate\": \"03.04.2020\"},{\"appid\": 1252120,\"ordate\": \"01.04.2020\"},{\"appid\": 1507740,\"ordate\": \"09.01.2021\"},{\"appid\": 1653420,\"ordate\": \"01.09.2021\"},{\"appid\": 2318900,\"ordate\": \"15.11.2023\"},{\"appid\": 3146680,\"ordate\": \"12.09.2024\"},{\"appid\": 1285820,\"ordate\": \"25.04.2020\"},{\"appid\": 2298880,\"ordate\": \"29.10.2024\"},{\"appid\": 971430,\"ordate\": \"20.11.2018\"},{\"appid\": 1157340,\"ordate\": \"10.09.2019\"},{\"appid\": 1482060,\"ordate\": \"08.01.2021\"},{\"appid\": 1755270,\"ordate\": \"30.09.2021\"},{\"appid\": 2433820,\"ordate\": \"17.10.2023\"},{\"appid\": 582210,\"ordate\": \"21.01.2017\"},{\"appid\": 2902830,\"ordate\": \"09.08.2024\"},{\"appid\": 2481610,\"ordate\": \"13.07.2023\"},{\"appid\": 1925330,\"ordate\": \"16.08.2022\"},{\"appid\": 1228920,\"ordate\": \"11.07.2020\"},{\"appid\": 2711330,\"ordate\": \"20.02.2024\"},{\"appid\": 3065150,\"ordate\": \"15.08.2024\"},{\"appid\": 494810,\"ordate\": \"30.06.2016\"},{\"appid\": 1114710,\"ordate\": \"30.01.2020\"},{\"appid\": 671600,\"ordate\": \"13.08.2019\"},{\"appid\": 1195410,\"ordate\": \"26.02.2020\"},{\"appid\": 1267860,\"ordate\": \"09.04.2020\"},{\"appid\": 1281080,\"ordate\": \"05.04.2020\"},{\"appid\": 2163210,\"ordate\": \"06.06.2023\"},{\"appid\": 951320,\"ordate\": \"06.11.2018\"},{\"appid\": 304950,\"ordate\": \"04.05.2015\"},{\"appid\": 826160,\"ordate\": \"26.06.2018\"},{\"appid\": 1014810,\"ordate\": \"01.05.2019\"},{\"appid\": 536680,\"ordate\": \"13.10.2016\"},{\"appid\": 1558070,\"ordate\": \"11.03.2021\"},{\"appid\": 1437050,\"ordate\": \"22.12.2020\"},{\"appid\": 1808860,\"ordate\": \"20.11.2021\"},{\"appid\": 1564940,\"ordate\": \"05.05.2021\"},{\"appid\": 1739420,\"ordate\": \"08.03.2022\"},{\"appid\": 673630,\"ordate\": \"29.11.2017\"},{\"appid\": 906050,\"ordate\": \"13.09.2018\"},{\"appid\": 781660,\"ordate\": \"24.01.2018\"},{\"appid\": 1157040,\"ordate\": \"18.09.2019\"},{\"appid\": 1307530,\"ordate\": \"12.05.2020\"},{\"appid\": 1311400,\"ordate\": \"28.05.2020\"},{\"appid\": 1497110,\"ordate\": \"09.06.2021\"},{\"appid\": 1768590,\"ordate\": \"06.06.2022\"},{\"appid\": 2520880,\"ordate\": \"23.08.2023\"},{\"appid\": 2588110,\"ordate\": \"05.11.2023\"},{\"appid\": 760680,\"ordate\": \"15.02.2018\"},{\"appid\": 642190,\"ordate\": \"16.11.2018\"},{\"appid\": 610840,\"ordate\": \"05.10.2017\"},{\"appid\": 382300,\"ordate\": \"21.07.2015\"},{\"appid\": 570470,\"ordate\": \"19.12.2016\"},{\"appid\": 1168880,\"ordate\": \"05.11.2019\"},{\"appid\": 1635480,\"ordate\": \"02.11.2021\"},{\"appid\": 800720,\"ordate\": \"19.03.2018\"},{\"appid\": 424830,\"ordate\": \"21.02.2016\"},{\"appid\": 1656640,\"ordate\": \"24.09.2021\"},{\"appid\": 2265160,\"ordate\": \"24.02.2023\"},{\"appid\": 1505430,\"ordate\": \"04.02.2021\"},{\"appid\": 2832640,\"ordate\": \"26.04.2024\"},{\"appid\": 1019630,\"ordate\": \"07.03.2019\"},{\"appid\": 1067200,\"ordate\": \"12.07.2019\"},{\"appid\": 1077450,\"ordate\": \"20.08.2019\"},{\"appid\": 1169000,\"ordate\": \"03.10.2019\"},{\"appid\": 1251770,\"ordate\": \"21.02.2020\"},{\"appid\": 1318690,\"ordate\": \"24.05.2020\"},{\"appid\": 1319220,\"ordate\": \"14.06.2020\"},{\"appid\": 2377910,\"ordate\": \"27.07.2023\"},{\"appid\": 2842520,\"ordate\": \"04.04.2024\"},{\"appid\": 778410,\"ordate\": \"01.02.2018\"},{\"appid\": 576050,\"ordate\": \"07.01.2017\"},{\"appid\": 2472230,\"ordate\": \"07.09.2023\"},{\"appid\": 1012830,\"ordate\": \"13.02.2019\"},{\"appid\": 578920,\"ordate\": \"08.03.2017\"},{\"appid\": 2308460,\"ordate\": \"21.02.2023\"},{\"appid\": 1804390,\"ordate\": \"18.11.2021\"},{\"appid\": 1650040,\"ordate\": \"14.07.2021\"},{\"appid\": 272890,\"ordate\": \"22.02.2014\"},{\"appid\": 2463500,\"ordate\": \"21.06.2023\"},{\"appid\": 2965370,\"ordate\": \"23.05.2024\"},{\"appid\": 1378390,\"ordate\": \"17.08.2020\"},{\"appid\": 3060850,\"ordate\": \"18.07.2024\"},{\"appid\": 2006430,\"ordate\": \"13.06.2022\"},{\"appid\": 1603200,\"ordate\": \"19.08.2021\"},{\"appid\": 1867480,\"ordate\": \"23.04.2022\"},{\"appid\": 1217720,\"ordate\": \"03.07.2020\"},{\"appid\": 1029920,\"ordate\": \"01.03.2019\"},{\"appid\": 1423780,\"ordate\": \"28.10.2020\"},{\"appid\": 1717130,\"ordate\": \"12.11.2021\"},{\"appid\": 1097400,\"ordate\": \"21.08.2019\"},{\"appid\": 2406860,\"ordate\": \"17.05.2023\"},{\"appid\": 2689380,\"ordate\": \"14.08.2024\"},{\"appid\": 3433030,\"ordate\": \"29.01.2025\"},{\"appid\": 1073960,\"ordate\": \"18.05.2019\"},{\"appid\": 1560130,\"ordate\": \"01.05.2021\"},{\"appid\": 2918120,\"ordate\": \"23.04.2024\"},{\"appid\": 728950,\"ordate\": \"10.11.2017\"},{\"appid\": 1707560,\"ordate\": \"09.12.2021\"},{\"appid\": 1235810,\"ordate\": \"15.02.2020\"},{\"appid\": 913090,\"ordate\": \"02.09.2018\"},{\"appid\": 1667100,\"ordate\": \"22.09.2021\"},{\"appid\": 1420950,\"ordate\": \"28.09.2020\"},{\"appid\": 1146890,\"ordate\": \"09.09.2019\"},{\"appid\": 696490,\"ordate\": \"31.08.2017\"},{\"appid\": 819160,\"ordate\": \"29.09.2018\"},{\"appid\": 1410740,\"ordate\": \"18.01.2021\"},{\"appid\": 579160,\"ordate\": \"05.02.2017\"},{\"appid\": 1150850,\"ordate\": \"07.11.2019\"},{\"appid\": 1927780,\"ordate\": \"19.08.2022\"},{\"appid\": 2699850,\"ordate\": \"15.01.2024\"},{\"appid\": 1017560,\"ordate\": \"14.02.2019\"},{\"appid\": 534320,\"ordate\": \"02.12.2016\"},{\"appid\": 794040,\"ordate\": \"08.10.2019\"},{\"appid\": 1213890,\"ordate\": \"15.01.2020\"},{\"appid\": 2396380,\"ordate\": \"14.05.2023\"},{\"appid\": 1196620,\"ordate\": \"04.01.2020\"},{\"appid\": 2705900,\"ordate\": \"23.01.2024\"},{\"appid\": 1627240,\"ordate\": \"01.07.2021\"},{\"appid\": 1655490,\"ordate\": \"01.07.2021\"},{\"appid\": 2724740,\"ordate\": \"20.12.2023\"},{\"appid\": 1122830,\"ordate\": \"14.08.2019\"},{\"appid\": 2504000,\"ordate\": \"09.08.2023\"},{\"appid\": 2163560,\"ordate\": \"20.11.2022\"},{\"appid\": 1223110,\"ordate\": \"29.01.2020\"},{\"appid\": 899630,\"ordate\": \"11.09.2018\"},{\"appid\": 1694110,\"ordate\": \"02.08.2021\"},{\"appid\": 1427540,\"ordate\": \"22.10.2020\"},{\"appid\": 1216770,\"ordate\": \"24.01.2020\"},{\"appid\": 1607730,\"ordate\": \"06.05.2021\"},{\"appid\": 2437910,\"ordate\": \"07.06.2023\"},{\"appid\": 1564720,\"ordate\": \"20.03.2021\"},{\"appid\": 1427450,\"ordate\": \"25.07.2022\"},{\"appid\": 2598450,\"ordate\": \"28.09.2023\"},{\"appid\": 1353560,\"ordate\": \"03.07.2020\"},{\"appid\": 1174270,\"ordate\": \"05.08.2022\"},{\"appid\": 607350,\"ordate\": \"01.09.2020\"},{\"appid\": 1126840,\"ordate\": \"10.08.2019\"},{\"appid\": 2389800,\"ordate\": \"19.05.2023\"},{\"appid\": 2925330,\"ordate\": \"01.05.2024\"},{\"appid\": 2108640,\"ordate\": \"25.10.2023\"},{\"appid\": 913160,\"ordate\": \"07.01.2019\"},{\"appid\": 1174120,\"ordate\": \"25.10.2019\"},{\"appid\": 1486620,\"ordate\": \"19.01.2021\"},{\"appid\": 2264970,\"ordate\": \"27.02.2023\"},{\"appid\": 1064580,\"ordate\": \"24.04.2019\"},{\"appid\": 1745220,\"ordate\": \"26.11.2021\"},{\"appid\": 1303930,\"ordate\": \"19.05.2020\"},{\"appid\": 2277610,\"ordate\": \"15.02.2023\"},{\"appid\": 1691010,\"ordate\": \"03.08.2021\"},{\"appid\": 934630,\"ordate\": \"14.02.2020\"},{\"appid\": 1822040,\"ordate\": \"23.12.2021\"},{\"appid\": 669320,\"ordate\": \"22.09.2017\"},{\"appid\": 562450,\"ordate\": \"04.12.2016\"},{\"appid\": 1215870,\"ordate\": \"22.04.2020\"},{\"appid\": 1559960,\"ordate\": \"01.04.2021\"},{\"appid\": 914140,\"ordate\": \"16.08.2018\"},{\"appid\": 661180,\"ordate\": \"23.07.2017\"},{\"appid\": 2987010,\"ordate\": \"29.06.2024\"},{\"appid\": 1564920,\"ordate\": \"14.04.2021\"},{\"appid\": 1412510,\"ordate\": \"21.10.2020\"},{\"appid\": 1979550,\"ordate\": \"18.05.2022\"},{\"appid\": 3092040,\"ordate\": \"26.07.2024\"},{\"appid\": 1415750,\"ordate\": \"28.09.2020\"},{\"appid\": 1345050,\"ordate\": \"11.08.2020\"},{\"appid\": 667000,\"ordate\": \"25.07.2017\"},{\"appid\": 977110,\"ordate\": \"21.11.2018\"},{\"appid\": 412370,\"ordate\": \"05.11.2015\"},{\"appid\": 1023060,\"ordate\": \"20.02.2019\"},{\"appid\": 770460,\"ordate\": \"11.01.2018\"},{\"appid\": 3299520,\"ordate\": \"15.11.2024\"},{\"appid\": 1168210,\"ordate\": \"01.03.2020\"},{\"appid\": 2272010,\"ordate\": \"06.02.2023\"},{\"appid\": 1505980,\"ordate\": \"22.01.2021\"},{\"appid\": 2746490,\"ordate\": \"15.01.2024\"},{\"appid\": 1146880,\"ordate\": \"09.10.2019\"},{\"appid\": 2002720,\"ordate\": \"10.06.2022\"},{\"appid\": 1563820,\"ordate\": \"05.04.2021\"},{\"appid\": 2262200,\"ordate\": \"17.05.2024\"},{\"appid\": 2773070,\"ordate\": \"02.02.2024\"},{\"appid\": 1417680,\"ordate\": \"21.10.2020\"},{\"appid\": 1855180,\"ordate\": \"28.12.2022\"},{\"appid\": 2772170,\"ordate\": \"31.10.2024\"},{\"appid\": 1166740,\"ordate\": \"19.10.2019\"},{\"appid\": 2454480,\"ordate\": \"01.07.2023\"},{\"appid\": 2736350,\"ordate\": \"27.01.2024\"},{\"appid\": 1564980,\"ordate\": \"14.05.2021\"},{\"appid\": 1078130,\"ordate\": \"12.06.2019\"},{\"appid\": 440020,\"ordate\": \"03.03.2016\"},{\"appid\": 1447050,\"ordate\": \"06.11.2020\"},{\"appid\": 1765180,\"ordate\": \"21.10.2021\"},{\"appid\": 1361520,\"ordate\": \"18.07.2020\"},{\"appid\": 1563830,\"ordate\": \"09.04.2021\"},{\"appid\": 2347360,\"ordate\": \"24.03.2023\"},{\"appid\": 2767220,\"ordate\": \"28.01.2024\"},{\"appid\": 1635920,\"ordate\": \"15.07.2021\"},{\"appid\": 1429530,\"ordate\": \"15.12.2020\"},{\"appid\": 1425280,\"ordate\": \"15.10.2020\"},{\"appid\": 2848850,\"ordate\": \"11.03.2024\"},{\"appid\": 1564930,\"ordate\": \"23.04.2021\"},{\"appid\": 2984130,\"ordate\": \"01.06.2024\"},{\"appid\": 894000,\"ordate\": \"14.01.2019\"},{\"appid\": 2470700,\"ordate\": \"14.07.2023\"},{\"appid\": 1143680,\"ordate\": \"14.09.2019\"},{\"appid\": 524060,\"ordate\": \"03.09.2016\"},{\"appid\": 1875160,\"ordate\": \"07.10.2022\"},{\"appid\": 916580,\"ordate\": \"15.09.2018\"},{\"appid\": 1294160,\"ordate\": \"21.04.2020\"},{\"appid\": 392040,\"ordate\": \"18.01.2019\"},{\"appid\": 1101200,\"ordate\": \"10.06.2019\"},{\"appid\": 1214360,\"ordate\": \"11.06.2020\"},{\"appid\": 1527460,\"ordate\": \"05.03.2021\"},{\"appid\": 1669930,\"ordate\": \"30.09.2021\"},{\"appid\": 1768540,\"ordate\": \"13.06.2022\"},{\"appid\": 2186000,\"ordate\": \"03.08.2023\"},{\"appid\": 2349870,\"ordate\": \"18.04.2023\"},{\"appid\": 2684720,\"ordate\": \"28.11.2023\"},{\"appid\": 1685610,\"ordate\": \"31.07.2021\"},{\"appid\": 1771880,\"ordate\": \"13.11.2021\"},{\"appid\": 535270,\"ordate\": \"01.11.2016\"},{\"appid\": 977900,\"ordate\": \"01.12.2018\"},{\"appid\": 2630310,\"ordate\": \"20.10.2023\"},{\"appid\": 1069250,\"ordate\": \"20.08.2019\"},{\"appid\": 1256220,\"ordate\": \"08.05.2020\"},{\"appid\": 2262240,\"ordate\": \"17.08.2023\"},{\"appid\": 1406000,\"ordate\": \"26.02.2021\"},{\"appid\": 1333810,\"ordate\": \"13.06.2020\"},{\"appid\": 2308540,\"ordate\": \"02.04.2023\"},{\"appid\": 931150,\"ordate\": \"14.11.2018\"},{\"appid\": 918320,\"ordate\": \"05.10.2018\"},{\"appid\": 1146910,\"ordate\": \"11.09.2019\"},{\"appid\": 3083660,\"ordate\": \"08.08.2024\"},{\"appid\": 471770,\"ordate\": \"24.08.2016\"},{\"appid\": 2376280,\"ordate\": \"20.04.2023\"},{\"appid\": 1041450,\"ordate\": \"17.04.2019\"},{\"appid\": 2009510,\"ordate\": \"07.07.2022\"},{\"appid\": 2875440,\"ordate\": \"31.07.2024\"},{\"appid\": 3147950,\"ordate\": \"31.08.2024\"},{\"appid\": 970530,\"ordate\": \"22.11.2018\"},{\"appid\": 1157020,\"ordate\": \"26.09.2019\"},{\"appid\": 1648550,\"ordate\": \"26.01.2022\"},{\"appid\": 1673920,\"ordate\": \"12.07.2021\"},{\"appid\": 554710,\"ordate\": \"06.05.2022\"},{\"appid\": 763790,\"ordate\": \"23.12.2017\"},{\"appid\": 1064910,\"ordate\": \"23.10.2019\"},{\"appid\": 265120,\"ordate\": \"31.03.2014\"},{\"appid\": 352460,\"ordate\": \"30.07.2015\"},{\"appid\": 417990,\"ordate\": \"04.12.2015\"},{\"appid\": 2268440,\"ordate\": \"14.02.2023\"},{\"appid\": 773510,\"ordate\": \"14.01.2018\"},{\"appid\": 1114990,\"ordate\": \"21.09.2019\"},{\"appid\": 2266980,\"ordate\": \"01.08.2023\"},{\"appid\": 1210740,\"ordate\": \"20.01.2020\"},{\"appid\": 1298830,\"ordate\": \"30.05.2020\"},{\"appid\": 1814360,\"ordate\": \"06.03.2022\"},{\"appid\": 2165120,\"ordate\": \"13.10.2022\"},{\"appid\": 2704260,\"ordate\": \"26.12.2023\"},{\"appid\": 2260700,\"ordate\": \"29.05.2023\"},{\"appid\": 428950,\"ordate\": \"12.01.2016\"},{\"appid\": 1369830,\"ordate\": \"11.08.2020\"},{\"appid\": 3396900,\"ordate\": \"24.01.2025\"},{\"appid\": 708450,\"ordate\": \"22.09.2017\"},{\"appid\": 1151090,\"ordate\": \"05.12.2019\"},{\"appid\": 2558680,\"ordate\": \"21.09.2023\"},{\"appid\": 343360,\"ordate\": \"31.01.2015\"},{\"appid\": 1295990,\"ordate\": \"25.05.2021\"},{\"appid\": 1776350,\"ordate\": \"20.10.2021\"},{\"appid\": 2427640,\"ordate\": \"02.06.2023\"},{\"appid\": 1354510,\"ordate\": \"14.08.2020\"},{\"appid\": 3098490,\"ordate\": \"18.10.2024\"},{\"appid\": 529500,\"ordate\": \"05.10.2016\"},{\"appid\": 1155600,\"ordate\": \"15.10.2019\"},{\"appid\": 1987140,\"ordate\": \"31.07.2022\"},{\"appid\": 498280,\"ordate\": \"30.07.2016\"},{\"appid\": 1102720,\"ordate\": \"09.08.2019\"},{\"appid\": 1567400,\"ordate\": \"25.05.2022\"},{\"appid\": 552990,\"ordate\": \"13.11.2017\"},{\"appid\": 555890,\"ordate\": \"06.01.2017\"},{\"appid\": 814900,\"ordate\": \"26.04.2018\"},{\"appid\": 860870,\"ordate\": \"28.05.2018\"},{\"appid\": 2558660,\"ordate\": \"25.09.2023\"},{\"appid\": 2558650,\"ordate\": \"25.09.2023\"},{\"appid\": 2558690,\"ordate\": \"25.09.2023\"},{\"appid\": 2588960,\"ordate\": \"22.09.2023\"},{\"appid\": 2558670,\"ordate\": \"23.09.2023\"},{\"appid\": 704070,\"ordate\": \"12.09.2017\"},{\"appid\": 1339140,\"ordate\": \"18.02.2022\"},{\"appid\": 1446130,\"ordate\": \"08.11.2020\"},{\"appid\": 1446470,\"ordate\": \"26.11.2020\"},{\"appid\": 1494390,\"ordate\": \"22.01.2021\"},{\"appid\": 2055130,\"ordate\": \"06.09.2022\"},{\"appid\": 2654040,\"ordate\": \"29.11.2023\"},{\"appid\": 2253200,\"ordate\": \"24.08.2023\"},{\"appid\": 2912450,\"ordate\": \"22.06.2024\"},{\"appid\": 841120,\"ordate\": \"07.05.2018\"},{\"appid\": 298050,\"ordate\": \"25.02.2016\"},{\"appid\": 405960,\"ordate\": \"02.12.2015\"},{\"appid\": 493820,\"ordate\": \"31.12.2016\"},{\"appid\": 576320,\"ordate\": \"04.01.2017\"},{\"appid\": 378420,\"ordate\": \"10.06.2015\"},{\"appid\": 454180,\"ordate\": \"27.03.2016\"},{\"appid\": 484350,\"ordate\": \"08.06.2016\"},{\"appid\": 550360,\"ordate\": \"03.11.2016\"},{\"appid\": 614030,\"ordate\": \"06.04.2017\"},{\"appid\": 699680,\"ordate\": \"11.10.2017\"},{\"appid\": 805850,\"ordate\": \"31.03.2018\"},{\"appid\": 1389190,\"ordate\": \"20.01.2021\"},{\"appid\": 2245330,\"ordate\": \"03.04.2023\"},{\"appid\": 1949140,\"ordate\": \"25.05.2022\"},{\"appid\": 564720,\"ordate\": \"18.01.2017\"},{\"appid\": 295110,\"ordate\": \"15.01.2015\"},{\"appid\": 758100,\"ordate\": \"26.04.2018\"},{\"appid\": 2196230,\"ordate\": \"06.01.2023\"},{\"appid\": 1012290,\"ordate\": \"07.02.2019\"},{\"appid\": 454580,\"ordate\": \"18.11.2016\"},{\"appid\": 266370,\"ordate\": \"26.03.2014\"},{\"appid\": 757240,\"ordate\": \"28.01.2018\"},{\"appid\": 539090,\"ordate\": \"27.12.2016\"},{\"appid\": 691720,\"ordate\": \"05.09.2017\"},{\"appid\": 515740,\"ordate\": \"04.10.2016\"},{\"appid\": 444670,\"ordate\": \"11.05.2016\"},{\"appid\": 1495580,\"ordate\": \"13.01.2021\"},{\"appid\": 705390,\"ordate\": \"06.09.2017\"},{\"appid\": 684200,\"ordate\": \"12.07.2018\"},{\"appid\": 1714470,\"ordate\": \"13.07.2024\"},{\"appid\": 667970,\"ordate\": \"03.08.2017\"},{\"appid\": 458660,\"ordate\": \"16.07.2017\"},{\"appid\": 664720,\"ordate\": \"24.11.2018\"},{\"appid\": 789090,\"ordate\": \"14.01.2019\"},{\"appid\": 860960,\"ordate\": \"15.10.2021\"},{\"appid\": 914700,\"ordate\": \"26.12.2018\"},{\"appid\": 994200,\"ordate\": \"18.01.2019\"},{\"appid\": 1012410,\"ordate\": \"14.08.2019\"},{\"appid\": 1078960,\"ordate\": \"16.07.2019\"},{\"appid\": 1099070,\"ordate\": \"11.10.2019\"},{\"appid\": 1105560,\"ordate\": \"28.07.2019\"},{\"appid\": 1116110,\"ordate\": \"08.06.2020\"},{\"appid\": 1163140,\"ordate\": \"26.10.2020\"},{\"appid\": 1369770,\"ordate\": \"14.08.2020\"},{\"appid\": 1424720,\"ordate\": \"11.11.2020\"},{\"appid\": 1450150,\"ordate\": \"31.12.2020\"},{\"appid\": 1465480,\"ordate\": \"25.11.2020\"},{\"appid\": 1481970,\"ordate\": \"10.12.2020\"},{\"appid\": 1759580,\"ordate\": \"05.10.2021\"},{\"appid\": 3137310,\"ordate\": \"13.12.2024\"},{\"appid\": 3156590,\"ordate\": \"31.10.2024\"},{\"appid\": 3327910,\"ordate\": \"04.12.2024\"},{\"appid\": 333950,\"ordate\": \"19.02.2015\"},{\"appid\": 1769740,\"ordate\": \"17.10.2021\"},{\"appid\": 512560,\"ordate\": \"29.12.2016\"},{\"appid\": 674550,\"ordate\": \"26.03.2019\"},{\"appid\": 793280,\"ordate\": \"28.02.2018\"},{\"appid\": 282740,\"ordate\": \"14.05.2014\"},{\"appid\": 564330,\"ordate\": \"22.03.2017\"},{\"appid\": 619080,\"ordate\": \"23.01.2018\"},{\"appid\": 508790,\"ordate\": \"08.09.2016\"},{\"appid\": 1447190,\"ordate\": \"19.02.2021\"},{\"appid\": 744750,\"ordate\": \"12.02.2018\"},{\"appid\": 1086070,\"ordate\": \"06.06.2019\"},{\"appid\": 371100,\"ordate\": \"01.06.2015\"},{\"appid\": 1069650,\"ordate\": \"07.04.2021\"},{\"appid\": 1160550,\"ordate\": \"12.11.2019\"},{\"appid\": 1161440,\"ordate\": \"27.11.2019\"},{\"appid\": 3182930,\"ordate\": \"25.10.2024\"},{\"appid\": 529820,\"ordate\": \"30.09.2016\"},{\"appid\": 457010,\"ordate\": \"08.04.2016\"},{\"appid\": 773520,\"ordate\": \"15.10.2018\"},{\"appid\": 720850,\"ordate\": \"09.11.2017\"},{\"appid\": 446540,\"ordate\": \"12.10.2016\"},{\"appid\": 265770,\"ordate\": \"04.02.2014\"},{\"appid\": 272270,\"ordate\": \"26.01.2016\"},{\"appid\": 321260,\"ordate\": \"14.11.2014\"},{\"appid\": 337820,\"ordate\": \"14.01.2015\"},{\"appid\": 361420,\"ordate\": \"16.12.2016\"},{\"appid\": 364420,\"ordate\": \"06.11.2015\"},{\"appid\": 376410,\"ordate\": \"25.02.2016\"},{\"appid\": 393460,\"ordate\": \"02.03.2016\"},{\"appid\": 402310,\"ordate\": \"01.03.2016\"},{\"appid\": 407840,\"ordate\": \"01.12.2015\"},{\"appid\": 409040,\"ordate\": \"19.02.2016\"},{\"appid\": 411720,\"ordate\": \"14.12.2015\"},{\"appid\": 412400,\"ordate\": \"12.11.2015\"},{\"appid\": 425820,\"ordate\": \"14.12.2015\"},{\"appid\": 427730,\"ordate\": \"23.12.2015\"},{\"appid\": 431870,\"ordate\": \"22.01.2016\"},{\"appid\": 434360,\"ordate\": \"03.02.2016\"},{\"appid\": 434870,\"ordate\": \"26.02.2016\"},{\"appid\": 489370,\"ordate\": \"09.02.2017\"},{\"appid\": 518720,\"ordate\": \"16.11.2016\"},{\"appid\": 556230,\"ordate\": \"09.12.2016\"},{\"appid\": 562430,\"ordate\": \"01.12.2016\"},{\"appid\": 564050,\"ordate\": \"15.12.2017\"},{\"appid\": 572480,\"ordate\": \"17.02.2017\"},{\"appid\": 576750,\"ordate\": \"03.02.2017\"},{\"appid\": 597030,\"ordate\": \"26.01.2018\"},{\"appid\": 667810,\"ordate\": \"11.01.2018\"},{\"appid\": 674860,\"ordate\": \"28.11.2017\"},{\"appid\": 704640,\"ordate\": \"02.02.2018\"},{\"appid\": 705120,\"ordate\": \"06.11.2017\"},{\"appid\": 723880,\"ordate\": \"01.12.2017\"},{\"appid\": 728730,\"ordate\": \"14.12.2017\"},{\"appid\": 735850,\"ordate\": \"15.02.2018\"},{\"appid\": 739950,\"ordate\": \"01.02.2018\"},{\"appid\": 742460,\"ordate\": \"16.12.2017\"},{\"appid\": 763430,\"ordate\": \"08.12.2017\"},{\"appid\": 767310,\"ordate\": \"05.03.2018\"},{\"appid\": 777040,\"ordate\": \"25.01.2018\"},{\"appid\": 777820,\"ordate\": \"30.01.2018\"},{\"appid\": 807070,\"ordate\": \"10.03.2018\"},{\"appid\": 293220,\"ordate\": \"19.05.2015\"},{\"appid\": 313130,\"ordate\": \"20.10.2014\"},{\"appid\": 315130,\"ordate\": \"06.04.2015\"},{\"appid\": 338530,\"ordate\": \"01.07.2015\"},{\"appid\": 339720,\"ordate\": \"20.06.2017\"},{\"appid\": 348490,\"ordate\": \"30.06.2015\"},{\"appid\": 354860,\"ordate\": \"01.05.2015\"},{\"appid\": 360390,\"ordate\": \"02.04.2015\"},{\"appid\": 363930,\"ordate\": \"14.07.2016\"},{\"appid\": 366180,\"ordate\": \"01.10.2015\"},{\"appid\": 368680,\"ordate\": \"20.08.2015\"},{\"appid\": 371010,\"ordate\": \"14.07.2015\"},{\"appid\": 371120,\"ordate\": \"25.06.2015\"},{\"appid\": 371510,\"ordate\": \"10.08.2015\"},{\"appid\": 371530,\"ordate\": \"17.06.2015\"},{\"appid\": 375600,\"ordate\": \"02.06.2015\"},{\"appid\": 376310,\"ordate\": \"10.09.2015\"},{\"appid\": 377250,\"ordate\": \"22.09.2015\"},{\"appid\": 380600,\"ordate\": \"11.08.2015\"},{\"appid\": 384960,\"ordate\": \"29.04.2016\"},{\"appid\": 385830,\"ordate\": \"11.08.2015\"},{\"appid\": 395600,\"ordate\": \"22.10.2015\"},{\"appid\": 397160,\"ordate\": \"29.04.2016\"},{\"appid\": 397860,\"ordate\": \"15.09.2015\"},{\"appid\": 403860,\"ordate\": \"14.10.2015\"},{\"appid\": 407420,\"ordate\": \"13.10.2015\"},{\"appid\": 408340,\"ordate\": \"21.10.2016\"},{\"appid\": 416450,\"ordate\": \"17.03.2016\"},{\"appid\": 423490,\"ordate\": \"21.03.2016\"},{\"appid\": 428690,\"ordate\": \"18.05.2016\"},{\"appid\": 440650,\"ordate\": \"15.09.2016\"},{\"appid\": 444190,\"ordate\": \"25.03.2016\"},{\"appid\": 446100,\"ordate\": \"05.07.2016\"},{\"appid\": 485360,\"ordate\": \"20.06.2016\"},{\"appid\": 485450,\"ordate\": \"04.06.2016\"},{\"appid\": 486780,\"ordate\": \"07.07.2016\"},{\"appid\": 488310,\"ordate\": \"20.06.2016\"},{\"appid\": 494150,\"ordate\": \"01.07.2016\"},{\"appid\": 510130,\"ordate\": \"30.08.2016\"},{\"appid\": 511560,\"ordate\": \"07.10.2016\"},{\"appid\": 517230,\"ordate\": \"09.09.2016\"},{\"appid\": 522020,\"ordate\": \"29.09.2016\"},{\"appid\": 523960,\"ordate\": \"31.10.2017\"},{\"appid\": 526740,\"ordate\": \"02.11.2016\"},{\"appid\": 548340,\"ordate\": \"01.11.2016\"},{\"appid\": 550670,\"ordate\": \"03.11.2016\"},{\"appid\": 565390,\"ordate\": \"11.07.2017\"},{\"appid\": 589320,\"ordate\": \"06.04.2017\"},{\"appid\": 602000,\"ordate\": \"27.03.2017\"},{\"appid\": 602490,\"ordate\": \"17.07.2018\"},{\"appid\": 603330,\"ordate\": \"06.10.2017\"},{\"appid\": 603350,\"ordate\": \"05.05.2017\"},{\"appid\": 610380,\"ordate\": \"21.07.2017\"},{\"appid\": 614630,\"ordate\": \"08.08.2017\"},{\"appid\": 616560,\"ordate\": \"12.04.2017\"},{\"appid\": 623540,\"ordate\": \"12.07.2017\"},{\"appid\": 623880,\"ordate\": \"22.08.2017\"},{\"appid\": 624870,\"ordate\": \"06.07.2017\"},{\"appid\": 625320,\"ordate\": \"18.05.2017\"},{\"appid\": 625730,\"ordate\": \"06.04.2018\"},{\"appid\": 639270,\"ordate\": \"02.06.2017\"},{\"appid\": 640050,\"ordate\": \"14.09.2017\"},{\"appid\": 658320,\"ordate\": \"12.10.2017\"},{\"appid\": 663300,\"ordate\": \"04.08.2017\"},{\"appid\": 667770,\"ordate\": \"16.08.2017\"},{\"appid\": 690200,\"ordate\": \"27.04.2018\"},{\"appid\": 698260,\"ordate\": \"12.10.2017\"},{\"appid\": 698610,\"ordate\": \"09.10.2017\"},{\"appid\": 701760,\"ordate\": \"17.09.2017\"},{\"appid\": 711810,\"ordate\": \"14.09.2018\"},{\"appid\": 712660,\"ordate\": \"27.10.2017\"},{\"appid\": 722960,\"ordate\": \"03.08.2018\"},{\"appid\": 732240,\"ordate\": \"05.10.2018\"},{\"appid\": 735600,\"ordate\": \"27.07.2018\"},{\"appid\": 755790,\"ordate\": \"19.09.2018\"},{\"appid\": 776510,\"ordate\": \"26.04.2018\"},{\"appid\": 783310,\"ordate\": \"01.08.2018\"},{\"appid\": 788640,\"ordate\": \"26.04.2018\"},{\"appid\": 794270,\"ordate\": \"18.09.2018\"},{\"appid\": 796030,\"ordate\": \"27.04.2018\"},{\"appid\": 802200,\"ordate\": \"09.05.2018\"},{\"appid\": 802730,\"ordate\": \"20.03.2018\"},{\"appid\": 820460,\"ordate\": \"17.04.2018\"},{\"appid\": 824070,\"ordate\": \"21.06.2018\"},{\"appid\": 840140,\"ordate\": \"27.07.2018\"},{\"appid\": 842150,\"ordate\": \"30.05.2018\"},{\"appid\": 850780,\"ordate\": \"23.05.2018\"},{\"appid\": 853240,\"ordate\": \"11.10.2018\"},{\"appid\": 857940,\"ordate\": \"21.05.2018\"},{\"appid\": 858680,\"ordate\": \"27.07.2018\"},{\"appid\": 879160,\"ordate\": \"26.09.2018\"},{\"appid\": 897300,\"ordate\": \"11.09.2018\"},{\"appid\": 897950,\"ordate\": \"17.09.2018\"},{\"appid\": 908020,\"ordate\": \"21.09.2018\"},{\"appid\": 918430,\"ordate\": \"16.10.2018\"},{\"appid\": 946380,\"ordate\": \"12.10.2018\"},{\"appid\": 1103510,\"ordate\": \"19.07.2019\"},{\"appid\": 943590,\"ordate\": \"15.10.2018\"},{\"appid\": 3344920,\"ordate\": \"07.12.2024\"},{\"appid\": 747210,\"ordate\": \"16.04.2018\"},{\"appid\": 1594790,\"ordate\": \"21.08.2021\"},{\"appid\": 575050,\"ordate\": \"21.01.2017\"},{\"appid\": 823600,\"ordate\": \"19.06.2018\"},{\"appid\": 3203600,\"ordate\": \"19.10.2024\"},{\"appid\": 979390,\"ordate\": \"28.12.2018\"},{\"appid\": 777240,\"ordate\": \"23.02.2018\"},{\"appid\": 1039830,\"ordate\": \"26.04.2019\"},{\"appid\": 1393220,\"ordate\": \"09.10.2020\"},{\"appid\": 2245040,\"ordate\": \"30.06.2023\"},{\"appid\": 798840,\"ordate\": \"01.03.2018\"},{\"appid\": 833230,\"ordate\": \"02.03.2021\"},{\"appid\": 724870,\"ordate\": \"15.11.2017\"},{\"appid\": 2650110,\"ordate\": \"24.11.2023\"},{\"appid\": 1995580,\"ordate\": \"24.11.2023\"},{\"appid\": 412770,\"ordate\": \"03.11.2015\"},{\"appid\": 2159770,\"ordate\": \"07.04.2023\"},{\"appid\": 1402000,\"ordate\": \"26.10.2020\"},{\"appid\": 2006120,\"ordate\": \"15.07.2022\"},{\"appid\": 970970,\"ordate\": \"01.01.2019\"},{\"appid\": 2333320,\"ordate\": \"31.03.2023\"},{\"appid\": 3376430,\"ordate\": \"23.01.2025\"},{\"appid\": 536230,\"ordate\": \"03.11.2016\"},{\"appid\": 1623560,\"ordate\": \"30.06.2021\"},{\"appid\": 2162350,\"ordate\": \"02.11.2022\"},{\"appid\": 523030,\"ordate\": \"14.10.2016\"},{\"appid\": 1816380,\"ordate\": \"29.01.2022\"},{\"appid\": 1179010,\"ordate\": \"12.02.2020\"},{\"appid\": 1226490,\"ordate\": \"02.03.2020\"},{\"appid\": 703960,\"ordate\": \"05.08.2019\"},{\"appid\": 2225890,\"ordate\": \"07.12.2022\"},{\"appid\": 1027520,\"ordate\": \"21.02.2019\"},{\"appid\": 3134690,\"ordate\": \"13.09.2024\"},{\"appid\": 3383390,\"ordate\": \"23.12.2024\"},{\"appid\": 2006470,\"ordate\": \"05.12.2022\"},{\"appid\": 1689930,\"ordate\": \"24.07.2021\"},{\"appid\": 2110320,\"ordate\": \"16.09.2022\"},{\"appid\": 3314040,\"ordate\": \"22.11.2024\"},{\"appid\": 2056800,\"ordate\": \"26.08.2022\"},{\"appid\": 2517680,\"ordate\": \"03.08.2023\"},{\"appid\": 2107040,\"ordate\": \"06.07.2023\"},{\"appid\": 3327030,\"ordate\": \"13.12.2024\"},{\"appid\": 996710,\"ordate\": \"15.03.2019\"},{\"appid\": 1012990,\"ordate\": \"16.05.2019\"},{\"appid\": 3224340,\"ordate\": \"04.10.2024\"},{\"appid\": 1298680,\"ordate\": \"04.08.2021\"},{\"appid\": 1100500,\"ordate\": \"30.12.2021\"},{\"appid\": 1749460,\"ordate\": \"15.10.2021\"},{\"appid\": 1720740,\"ordate\": \"06.09.2021\"},{\"appid\": 1120680,\"ordate\": \"15.08.2019\"},{\"appid\": 2805230,\"ordate\": \"30.08.2024\"},{\"appid\": 1524990,\"ordate\": \"12.03.2021\"},{\"appid\": 3243230,\"ordate\": \"26.11.2024\"},{\"appid\": 1635630,\"ordate\": \"09.02.2022\"},{\"appid\": 3328500,\"ordate\": \"02.12.2024\"},{\"appid\": 1280090,\"ordate\": \"04.06.2020\"},{\"appid\": 2821860,\"ordate\": \"14.03.2024\"},{\"appid\": 1347970,\"ordate\": \"02.03.2023\"},{\"appid\": 961240,\"ordate\": \"02.11.2018\"},{\"appid\": 1073450,\"ordate\": \"17.10.2023\"},{\"appid\": 989400,\"ordate\": \"19.11.2019\"},{\"appid\": 1647990,\"ordate\": \"26.09.2021\"},{\"appid\": 1789680,\"ordate\": \"11.11.2021\"},{\"appid\": 2304710,\"ordate\": \"16.11.2023\"},{\"appid\": 2340600,\"ordate\": \"28.03.2023\"},{\"appid\": 1337930,\"ordate\": \"16.07.2024\"},{\"appid\": 1589020,\"ordate\": \"04.06.2021\"},{\"appid\": 1199610,\"ordate\": \"09.02.2020\"},{\"appid\": 1690200,\"ordate\": \"02.11.2023\"},{\"appid\": 509580,\"ordate\": \"29.08.2019\"},{\"appid\": 1426100,\"ordate\": \"10.05.2022\"},{\"appid\": 1467190,\"ordate\": \"12.10.2021\"},{\"appid\": 1066090,\"ordate\": \"29.04.2019\"},{\"appid\": 2341530,\"ordate\": \"24.05.2023\"},{\"appid\": 2659750,\"ordate\": \"10.05.2024\"},{\"appid\": 2592470,\"ordate\": \"27.10.2023\"},{\"appid\": 2358860,\"ordate\": \"28.07.2023\"},{\"appid\": 2350810,\"ordate\": \"29.03.2023\"},{\"appid\": 1966310,\"ordate\": \"22.04.2022\"},{\"appid\": 2168800,\"ordate\": \"24.06.2023\"},{\"appid\": 2840330,\"ordate\": \"22.03.2024\"},{\"appid\": 923880,\"ordate\": \"16.11.2018\"},{\"appid\": 2492950,\"ordate\": \"18.07.2023\"},{\"appid\": 1922030,\"ordate\": \"25.03.2022\"},{\"appid\": 988340,\"ordate\": \"31.12.2018\"},{\"appid\": 1947210,\"ordate\": \"10.05.2022\"},{\"appid\": 2286240,\"ordate\": \"24.02.2023\"},{\"appid\": 1796900,\"ordate\": \"25.11.2021\"},{\"appid\": 1485240,\"ordate\": \"06.05.2021\"},{\"appid\": 2348850,\"ordate\": \"29.03.2023\"},{\"appid\": 2251480,\"ordate\": \"20.12.2022\"},{\"appid\": 2303820,\"ordate\": \"02.02.2024\"},{\"appid\": 800170,\"ordate\": \"14.08.2019\"},{\"appid\": 2422180,\"ordate\": \"26.02.2024\"},{\"appid\": 2990340,\"ordate\": \"06.06.2024\"},{\"appid\": 1608220,\"ordate\": \"22.06.2021\"},{\"appid\": 2092000,\"ordate\": \"02.08.2024\"},{\"appid\": 1694610,\"ordate\": \"25.02.2022\"},{\"appid\": 3231370,\"ordate\": \"10.11.2024\"},{\"appid\": 3291270,\"ordate\": \"16.11.2024\"},{\"appid\": 2200700,\"ordate\": \"18.11.2022\"},{\"appid\": 1120750,\"ordate\": \"24.09.2021\"},{\"appid\": 1641220,\"ordate\": \"09.06.2021\"},{\"appid\": 1132850,\"ordate\": \"04.11.2019\"},{\"appid\": 2273390,\"ordate\": \"03.02.2023\"},{\"appid\": 2102080,\"ordate\": \"31.08.2022\"},{\"appid\": 2409260,\"ordate\": \"20.06.2024\"},{\"appid\": 341570,\"ordate\": \"05.11.2015\"},{\"appid\": 346330,\"ordate\": \"20.07.2016\"},{\"appid\": 450860,\"ordate\": \"05.05.2017\"},{\"appid\": 514500,\"ordate\": \"15.10.2018\"},{\"appid\": 651150,\"ordate\": \"15.04.2021\"},{\"appid\": 663690,\"ordate\": \"07.11.2017\"},{\"appid\": 745010,\"ordate\": \"22.05.2019\"},{\"appid\": 766150,\"ordate\": \"30.11.2018\"},{\"appid\": 777130,\"ordate\": \"04.04.2019\"},{\"appid\": 790710,\"ordate\": \"12.09.2018\"},{\"appid\": 831530,\"ordate\": \"01.02.2019\"},{\"appid\": 835910,\"ordate\": \"03.12.2018\"},{\"appid\": 843650,\"ordate\": \"22.03.2019\"},{\"appid\": 852340,\"ordate\": \"25.01.2019\"},{\"appid\": 856060,\"ordate\": \"02.02.2019\"},{\"appid\": 863150,\"ordate\": \"31.01.2019\"},{\"appid\": 886520,\"ordate\": \"28.03.2019\"},{\"appid\": 896890,\"ordate\": \"14.12.2018\"},{\"appid\": 898720,\"ordate\": \"03.07.2019\"},{\"appid\": 906750,\"ordate\": \"24.05.2019\"},{\"appid\": 919290,\"ordate\": \"22.06.2022\"},{\"appid\": 947940,\"ordate\": \"30.04.2020\"},{\"appid\": 949810,\"ordate\": \"04.01.2019\"},{\"appid\": 952340,\"ordate\": \"17.06.2020\"},{\"appid\": 957810,\"ordate\": \"19.02.2019\"},{\"appid\": 958280,\"ordate\": \"09.11.2018\"},{\"appid\": 963930,\"ordate\": \"14.12.2018\"},{\"appid\": 973100,\"ordate\": \"04.04.2019\"},{\"appid\": 977180,\"ordate\": \"20.12.2018\"},{\"appid\": 980610,\"ordate\": \"10.07.2020\"},{\"appid\": 1000540,\"ordate\": \"21.03.2019\"},{\"appid\": 1003530,\"ordate\": \"15.01.2019\"},{\"appid\": 1005490,\"ordate\": \"15.07.2022\"},{\"appid\": 1007740,\"ordate\": \"14.03.2019\"},{\"appid\": 1010850,\"ordate\": \"11.02.2019\"},{\"appid\": 1010860,\"ordate\": \"01.02.2019\"},{\"appid\": 1019030,\"ordate\": \"20.03.2019\"},{\"appid\": 1032090,\"ordate\": \"26.02.2019\"},{\"appid\": 1042750,\"ordate\": \"22.03.2019\"},{\"appid\": 1046930,\"ordate\": \"20.06.2019\"},{\"appid\": 1054120,\"ordate\": \"19.04.2019\"},{\"appid\": 1054690,\"ordate\": \"10.03.2020\"},{\"appid\": 1055180,\"ordate\": \"22.04.2019\"},{\"appid\": 1055210,\"ordate\": \"28.05.2020\"},{\"appid\": 1057990,\"ordate\": \"03.05.2019\"},{\"appid\": 1061100,\"ordate\": \"15.07.2020\"},{\"appid\": 1062260,\"ordate\": \"20.06.2019\"},{\"appid\": 1063140,\"ordate\": \"01.07.2019\"},{\"appid\": 1064060,\"ordate\": \"24.04.2019\"},{\"appid\": 1066810,\"ordate\": \"17.09.2020\"},{\"appid\": 1066890,\"ordate\": \"31.03.2020\"},{\"appid\": 1069080,\"ordate\": \"04.03.2022\"},{\"appid\": 1073140,\"ordate\": \"20.02.2020\"},{\"appid\": 1081370,\"ordate\": \"23.01.2020\"},{\"appid\": 1084840,\"ordate\": \"06.03.2020\"},{\"appid\": 1094780,\"ordate\": \"27.10.2019\"},{\"appid\": 1110230,\"ordate\": \"29.07.2019\"},{\"appid\": 1131720,\"ordate\": \"07.01.2020\"},{\"appid\": 1145520,\"ordate\": \"10.01.2020\"},{\"appid\": 1155440,\"ordate\": \"13.12.2019\"},{\"appid\": 1155580,\"ordate\": \"20.12.2019\"},{\"appid\": 1156290,\"ordate\": \"06.10.2019\"},{\"appid\": 1157360,\"ordate\": \"27.09.2019\"},{\"appid\": 1162760,\"ordate\": \"17.10.2019\"},{\"appid\": 1169760,\"ordate\": \"04.01.2022\"},{\"appid\": 1173340,\"ordate\": \"22.10.2019\"},{\"appid\": 1175320,\"ordate\": \"03.02.2020\"},{\"appid\": 1175500,\"ordate\": \"10.01.2020\"},{\"appid\": 1187410,\"ordate\": \"11.04.2020\"},{\"appid\": 1201550,\"ordate\": \"16.04.2020\"},{\"appid\": 1202990,\"ordate\": \"20.12.2019\"},{\"appid\": 1208830,\"ordate\": \"30.01.2020\"},{\"appid\": 1210680,\"ordate\": \"10.01.2020\"},{\"appid\": 1211350,\"ordate\": \"08.02.2020\"},{\"appid\": 1218030,\"ordate\": \"21.01.2020\"},{\"appid\": 1219500,\"ordate\": \"03.04.2020\"},{\"appid\": 1221440,\"ordate\": \"23.01.2020\"},{\"appid\": 1248450,\"ordate\": \"03.09.2021\"},{\"appid\": 1251270,\"ordate\": \"07.04.2020\"},{\"appid\": 1263720,\"ordate\": \"23.03.2020\"},{\"appid\": 1264550,\"ordate\": \"13.05.2020\"},{\"appid\": 1270420,\"ordate\": \"06.04.2020\"},{\"appid\": 1272830,\"ordate\": \"18.04.2020\"},{\"appid\": 1276010,\"ordate\": \"14.04.2020\"},{\"appid\": 1283990,\"ordate\": \"04.05.2020\"},{\"appid\": 1292240,\"ordate\": \"15.12.2020\"},{\"appid\": 1297320,\"ordate\": \"27.12.2020\"},{\"appid\": 1304450,\"ordate\": \"14.05.2020\"},{\"appid\": 1325430,\"ordate\": \"14.09.2021\"},{\"appid\": 1345120,\"ordate\": \"03.09.2020\"},{\"appid\": 1352740,\"ordate\": \"07.07.2020\"},{\"appid\": 1355450,\"ordate\": \"14.07.2020\"},{\"appid\": 1357220,\"ordate\": \"12.04.2021\"},{\"appid\": 1362760,\"ordate\": \"22.07.2020\"},{\"appid\": 1364340,\"ordate\": \"22.07.2020\"},{\"appid\": 1387510,\"ordate\": \"30.10.2020\"},{\"appid\": 1388910,\"ordate\": \"29.08.2020\"},{\"appid\": 1393460,\"ordate\": \"03.09.2020\"},{\"appid\": 1399030,\"ordate\": \"11.03.2021\"},{\"appid\": 1406750,\"ordate\": \"02.11.2020\"},{\"appid\": 1413490,\"ordate\": \"16.10.2020\"},{\"appid\": 1417490,\"ordate\": \"04.04.2021\"},{\"appid\": 1419580,\"ordate\": \"22.10.2020\"},{\"appid\": 1420780,\"ordate\": \"26.02.2021\"},{\"appid\": 1424250,\"ordate\": \"03.12.2020\"},{\"appid\": 1449380,\"ordate\": \"03.11.2020\"},{\"appid\": 1452600,\"ordate\": \"21.07.2021\"},{\"appid\": 1455120,\"ordate\": \"20.12.2020\"},{\"appid\": 1462470,\"ordate\": \"22.03.2021\"},{\"appid\": 1464380,\"ordate\": \"07.10.2021\"},{\"appid\": 1464840,\"ordate\": \"27.11.2020\"},{\"appid\": 1468250,\"ordate\": \"14.12.2021\"},{\"appid\": 1468800,\"ordate\": \"24.01.2021\"},{\"appid\": 1470550,\"ordate\": \"25.12.2020\"},{\"appid\": 1475430,\"ordate\": \"04.01.2022\"},{\"appid\": 1482320,\"ordate\": \"30.12.2021\"},{\"appid\": 1486800,\"ordate\": \"15.12.2020\"},{\"appid\": 1489120,\"ordate\": \"21.12.2021\"},{\"appid\": 1503090,\"ordate\": \"13.01.2021\"},{\"appid\": 1519790,\"ordate\": \"16.04.2021\"},{\"appid\": 1537830,\"ordate\": \"18.04.2023\"},{\"appid\": 1540550,\"ordate\": \"19.02.2021\"},{\"appid\": 1555470,\"ordate\": \"23.12.2021\"},{\"appid\": 1567580,\"ordate\": \"31.05.2021\"},{\"appid\": 1570730,\"ordate\": \"26.03.2021\"},{\"appid\": 1588540,\"ordate\": \"28.02.2024\"},{\"appid\": 1598190,\"ordate\": \"06.11.2021\"},{\"appid\": 1611650,\"ordate\": \"28.05.2021\"},{\"appid\": 1618180,\"ordate\": \"16.12.2021\"},{\"appid\": 1625260,\"ordate\": \"28.05.2021\"},{\"appid\": 1668780,\"ordate\": \"13.01.2022\"},{\"appid\": 1672280,\"ordate\": \"30.07.2021\"},{\"appid\": 1679330,\"ordate\": \"23.08.2021\"},{\"appid\": 1692270,\"ordate\": \"31.01.2022\"},{\"appid\": 1724630,\"ordate\": \"07.09.2021\"},{\"appid\": 1730140,\"ordate\": \"14.04.2022\"},{\"appid\": 1756800,\"ordate\": \"30.11.2021\"},{\"appid\": 1761730,\"ordate\": \"31.12.2024\"},{\"appid\": 1780330,\"ordate\": \"24.11.2021\"},{\"appid\": 1795390,\"ordate\": \"16.12.2021\"},{\"appid\": 1796100,\"ordate\": \"27.12.2021\"},{\"appid\": 1797410,\"ordate\": \"21.01.2022\"},{\"appid\": 1801490,\"ordate\": \"25.11.2021\"},{\"appid\": 1806690,\"ordate\": \"09.04.2022\"},{\"appid\": 1832110,\"ordate\": \"29.07.2022\"},{\"appid\": 1835350,\"ordate\": \"12.03.2022\"},{\"appid\": 1841630,\"ordate\": \"09.02.2022\"},{\"appid\": 1850610,\"ordate\": \"11.04.2022\"},{\"appid\": 1850930,\"ordate\": \"26.03.2022\"},{\"appid\": 1863170,\"ordate\": \"21.01.2022\"},{\"appid\": 1863570,\"ordate\": \"06.03.2022\"},{\"appid\": 1865160,\"ordate\": \"25.02.2022\"},{\"appid\": 1865650,\"ordate\": \"27.10.2022\"},{\"appid\": 1891920,\"ordate\": \"15.07.2022\"},{\"appid\": 1895760,\"ordate\": \"10.03.2022\"},{\"appid\": 1906910,\"ordate\": \"14.03.2022\"},{\"appid\": 1915550,\"ordate\": \"31.05.2022\"},{\"appid\": 1917350,\"ordate\": \"26.03.2022\"},{\"appid\": 1919850,\"ordate\": \"10.03.2022\"},{\"appid\": 1936250,\"ordate\": \"01.04.2022\"},{\"appid\": 1941710,\"ordate\": \"11.12.2024\"},{\"appid\": 1945780,\"ordate\": \"05.08.2022\"},{\"appid\": 1966910,\"ordate\": \"02.05.2022\"},{\"appid\": 1978750,\"ordate\": \"10.07.2022\"},{\"appid\": 1986930,\"ordate\": \"08.07.2022\"},{\"appid\": 1989800,\"ordate\": \"20.05.2022\"},{\"appid\": 2007010,\"ordate\": \"27.10.2022\"},{\"appid\": 2057690,\"ordate\": \"20.02.2024\"},{\"appid\": 2059760,\"ordate\": \"19.07.2022\"},{\"appid\": 2070060,\"ordate\": \"31.03.2023\"},{\"appid\": 2073970,\"ordate\": \"21.07.2022\"},{\"appid\": 2074040,\"ordate\": \"03.08.2022\"},{\"appid\": 2108580,\"ordate\": \"30.08.2022\"},{\"appid\": 2112090,\"ordate\": \"21.06.2023\"},{\"appid\": 2140460,\"ordate\": \"18.11.2022\"},{\"appid\": 2171600,\"ordate\": \"11.11.2022\"},{\"appid\": 2180050,\"ordate\": \"11.05.2023\"},{\"appid\": 2200030,\"ordate\": \"25.04.2023\"},{\"appid\": 2266400,\"ordate\": \"20.04.2023\"},{\"appid\": 2311140,\"ordate\": \"26.04.2023\"},{\"appid\": 2311310,\"ordate\": \"20.10.2023\"},{\"appid\": 2325880,\"ordate\": \"24.12.2023\"},{\"appid\": 2337170,\"ordate\": \"11.11.2024\"},{\"appid\": 2360410,\"ordate\": \"04.07.2024\"},{\"appid\": 2460480,\"ordate\": \"19.07.2023\"},{\"appid\": 2483220,\"ordate\": \"01.12.2023\"},{\"appid\": 2528400,\"ordate\": \"28.12.2023\"},{\"appid\": 2540960,\"ordate\": \"05.09.2023\"},{\"appid\": 2565000,\"ordate\": \"23.09.2024\"},{\"appid\": 2717450,\"ordate\": \"14.03.2024\"},{\"appid\": 2739600,\"ordate\": \"31.01.2024\"},{\"appid\": 2849840,\"ordate\": \"14.04.2024\"},{\"appid\": 2856650,\"ordate\": \"02.06.2024\"},{\"appid\": 2875450,\"ordate\": \"17.06.2024\"},{\"appid\": 2909370,\"ordate\": \"15.07.2024\"},{\"appid\": 2994910,\"ordate\": \"10.11.2024\"},{\"appid\": 3029830,\"ordate\": \"31.08.2024\"},{\"appid\": 3048660,\"ordate\": \"19.07.2024\"},{\"appid\": 3068680,\"ordate\": \"31.07.2024\"},{\"appid\": 3173940,\"ordate\": \"30.09.2024\"},{\"appid\": 3199930,\"ordate\": \"11.11.2024\"},{\"appid\": 3359210,\"ordate\": \"10.12.2024\"},{\"appid\": 3403860,\"ordate\": \"15.01.2025\"},{\"appid\": 3439670,\"ordate\": \"24.01.2025\"},{\"appid\": 218980,\"ordate\": \"28.01.2013\"},{\"appid\": 221100,\"ordate\": \"16.12.2013\"},{\"appid\": 224500,\"ordate\": \"20.03.2013\"},{\"appid\": 242840,\"ordate\": \"22.05.2014\"},{\"appid\": 256440,\"ordate\": \"09.01.2014\"},{\"appid\": 397060,\"ordate\": \"01.03.2016\"},{\"appid\": 492150,\"ordate\": \"17.03.2017\"},{\"appid\": 969680,\"ordate\": \"08.08.2019\"},{\"appid\": 1269260,\"ordate\": \"04.03.2021\"},{\"appid\": 937870,\"ordate\": \"15.02.2020\"},{\"appid\": 779300,\"ordate\": \"24.08.2018\"},{\"appid\": 263480,\"ordate\": \"18.01.2014\"},{\"appid\": 264690,\"ordate\": \"19.11.2013\"},{\"appid\": 328070,\"ordate\": \"05.11.2014\"},{\"appid\": 337280,\"ordate\": \"07.02.2015\"},{\"appid\": 420020,\"ordate\": \"24.12.2016\"},{\"appid\": 427640,\"ordate\": \"17.12.2015\"},{\"appid\": 427950,\"ordate\": \"19.12.2015\"},{\"appid\": 431600,\"ordate\": \"01.03.2016\"},{\"appid\": 520660,\"ordate\": \"07.03.2018\"},{\"appid\": 525210,\"ordate\": \"30.11.2016\"},{\"appid\": 556540,\"ordate\": \"07.01.2017\"},{\"appid\": 556780,\"ordate\": \"20.12.2016\"},{\"appid\": 569640,\"ordate\": \"21.01.2017\"},{\"appid\": 587390,\"ordate\": \"14.02.2017\"},{\"appid\": 599460,\"ordate\": \"27.02.2017\"},{\"appid\": 604300,\"ordate\": \"10.03.2017\"},{\"appid\": 662320,\"ordate\": \"09.11.2017\"},{\"appid\": 724110,\"ordate\": \"31.01.2018\"},{\"appid\": 738880,\"ordate\": \"25.11.2017\"},{\"appid\": 744220,\"ordate\": \"18.11.2017\"},{\"appid\": 745890,\"ordate\": \"07.12.2017\"},{\"appid\": 749780,\"ordate\": \"08.03.2018\"},{\"appid\": 763680,\"ordate\": \"23.02.2018\"},{\"appid\": 763730,\"ordate\": \"21.12.2017\"},{\"appid\": 772270,\"ordate\": \"20.01.2018\"},{\"appid\": 789220,\"ordate\": \"07.02.2018\"},{\"appid\": 269250,\"ordate\": \"06.05.2014\"},{\"appid\": 324120,\"ordate\": \"27.09.2014\"},{\"appid\": 349220,\"ordate\": \"26.06.2015\"},{\"appid\": 357700,\"ordate\": \"16.09.2015\"},{\"appid\": 357910,\"ordate\": \"25.03.2015\"},{\"appid\": 385270,\"ordate\": \"15.07.2015\"},{\"appid\": 446590,\"ordate\": \"16.03.2016\"},{\"appid\": 448240,\"ordate\": \"10.05.2016\"},{\"appid\": 449730,\"ordate\": \"11.06.2016\"},{\"appid\": 450850,\"ordate\": \"30.03.2016\"},{\"appid\": 457380,\"ordate\": \"24.09.2016\"},{\"appid\": 459820,\"ordate\": \"14.05.2016\"},{\"appid\": 485440,\"ordate\": \"03.06.2016\"},{\"appid\": 487160,\"ordate\": \"02.08.2016\"},{\"appid\": 506150,\"ordate\": \"17.09.2016\"},{\"appid\": 512110,\"ordate\": \"02.09.2016\"},{\"appid\": 519540,\"ordate\": \"10.09.2016\"},{\"appid\": 590250,\"ordate\": \"12.06.2017\"},{\"appid\": 617590,\"ordate\": \"26.10.2017\"},{\"appid\": 618200,\"ordate\": \"29.08.2017\"},{\"appid\": 618270,\"ordate\": \"26.04.2017\"},{\"appid\": 624430,\"ordate\": \"19.04.2017\"},{\"appid\": 666310,\"ordate\": \"16.07.2017\"},{\"appid\": 697530,\"ordate\": \"16.09.2017\"},{\"appid\": 709140,\"ordate\": \"13.10.2017\"},{\"appid\": 710190,\"ordate\": \"09.05.2018\"},{\"appid\": 804730,\"ordate\": \"07.04.2018\"},{\"appid\": 818410,\"ordate\": \"13.10.2018\"},{\"appid\": 832020,\"ordate\": \"21.04.2018\"},{\"appid\": 832380,\"ordate\": \"11.05.2018\"},{\"appid\": 833370,\"ordate\": \"21.07.2018\"},{\"appid\": 840260,\"ordate\": \"27.08.2019\"},{\"appid\": 844330,\"ordate\": \"16.06.2018\"},{\"appid\": 845490,\"ordate\": \"31.08.2018\"},{\"appid\": 856220,\"ordate\": \"22.05.2018\"},{\"appid\": 885780,\"ordate\": \"01.08.2018\"},{\"appid\": 1176170,\"ordate\": \"20.11.2019\"},{\"appid\": 718530,\"ordate\": \"02.11.2017\"},{\"appid\": 959280,\"ordate\": \"27.11.2019\"},{\"appid\": 965250,\"ordate\": \"06.02.2019\"},{\"appid\": 1349830,\"ordate\": \"19.02.2021\"},{\"appid\": 937780,\"ordate\": \"26.09.2018\"},{\"appid\": 439550,\"ordate\": \"03.02.2016\"},{\"appid\": 537020,\"ordate\": \"18.12.2016\"},{\"appid\": 783860,\"ordate\": \"31.01.2018\"},{\"appid\": 283040,\"ordate\": \"28.03.2014\"},{\"appid\": 466210,\"ordate\": \"15.05.2016\"},{\"appid\": 473140,\"ordate\": \"29.05.2016\"},{\"appid\": 479000,\"ordate\": \"26.05.2016\"},{\"appid\": 571430,\"ordate\": \"22.06.2017\"},{\"appid\": 676310,\"ordate\": \"12.09.2018\"},{\"appid\": 849870,\"ordate\": \"13.05.2018\"},{\"appid\": 868710,\"ordate\": \"16.06.2018\"},{\"appid\": 390960,\"ordate\": \"13.01.2017\"},{\"appid\": 821230,\"ordate\": \"15.10.2018\"},{\"appid\": 542620,\"ordate\": \"12.11.2016\"},{\"appid\": 348860,\"ordate\": \"23.02.2015\"},{\"appid\": 809450,\"ordate\": \"15.03.2018\"},{\"appid\": 606850,\"ordate\": \"23.03.2017\"},{\"appid\": 546070,\"ordate\": \"13.01.2017\"},{\"appid\": 645650,\"ordate\": \"17.02.2018\"},{\"appid\": 393660,\"ordate\": \"24.08.2015\"},{\"appid\": 513960,\"ordate\": \"18.09.2016\"},{\"appid\": 1141880,\"ordate\": \"04.09.2019\"},{\"appid\": 1161270,\"ordate\": \"24.10.2019\"},{\"appid\": 1235310,\"ordate\": \"13.02.2020\"},{\"appid\": 345030,\"ordate\": \"14.02.2015\"},{\"appid\": 405550,\"ordate\": \"05.01.2016\"},{\"appid\": 428190,\"ordate\": \"22.12.2015\"},{\"appid\": 451900,\"ordate\": \"15.03.2016\"},{\"appid\": 321060,\"ordate\": \"05.09.2014\"},{\"appid\": 349460,\"ordate\": \"24.04.2015\"},{\"appid\": 466420,\"ordate\": \"11.05.2016\"},{\"appid\": 477170,\"ordate\": \"27.05.2016\"},{\"appid\": 612510,\"ordate\": \"19.08.2017\"},{\"appid\": 636950,\"ordate\": \"21.05.2017\"},{\"appid\": 682790,\"ordate\": \"27.08.2018\"},{\"appid\": 885000,\"ordate\": \"16.07.2018\"},{\"appid\": 473550,\"ordate\": \"23.12.2019\"},{\"appid\": 864920,\"ordate\": \"21.12.2018\"},{\"appid\": 1163130,\"ordate\": \"16.12.2019\"},{\"appid\": 640310,\"ordate\": \"19.06.2017\"},{\"appid\": 951330,\"ordate\": \"16.10.2018\"},{\"appid\": 342350,\"ordate\": \"05.02.2015\"},{\"appid\": 589850,\"ordate\": \"21.06.2017\"},{\"appid\": 833400,\"ordate\": \"03.05.2018\"},{\"appid\": 1002230,\"ordate\": \"03.01.2019\"},{\"appid\": 425300,\"ordate\": \"22.01.2016\"},{\"appid\": 601590,\"ordate\": \"08.03.2017\"},{\"appid\": 728050,\"ordate\": \"22.11.2017\"},{\"appid\": 288000,\"ordate\": \"19.10.2015\"},{\"appid\": 1440510,\"ordate\": \"25.12.2020\"},{\"appid\": 610730,\"ordate\": \"30.12.2017\"},{\"appid\": 448110,\"ordate\": \"23.04.2016\"},{\"appid\": 939000,\"ordate\": \"27.09.2018\"},{\"appid\": 1281990,\"ordate\": \"27.04.2020\"},{\"appid\": 452320,\"ordate\": \"09.04.2016\"},{\"appid\": 465710,\"ordate\": \"02.06.2017\"},{\"appid\": 526290,\"ordate\": \"05.10.2016\"},{\"appid\": 620580,\"ordate\": \"07.05.2017\"},{\"appid\": 516510,\"ordate\": \"23.08.2016\"},{\"appid\": 600120,\"ordate\": \"27.03.2017\"},{\"appid\": 741650,\"ordate\": \"17.12.2017\"},{\"appid\": 641780,\"ordate\": \"27.06.2017\"},{\"appid\": 652030,\"ordate\": \"24.07.2017\"},{\"appid\": 854950,\"ordate\": \"06.08.2018\"},{\"appid\": 735030,\"ordate\": \"02.06.2018\"},{\"appid\": 1542010,\"ordate\": \"15.04.2021\"},{\"appid\": 763300,\"ordate\": \"27.12.2017\"},{\"appid\": 1477870,\"ordate\": \"03.12.2020\"},{\"appid\": 676070,\"ordate\": \"15.08.2017\"},{\"appid\": 657300,\"ordate\": \"10.11.2017\"},{\"appid\": 1452180,\"ordate\": \"16.11.2020\"},{\"appid\": 298220,\"ordate\": \"24.05.2014\"},{\"appid\": 399240,\"ordate\": \"18.04.2016\"},{\"appid\": 745820,\"ordate\": \"07.05.2018\"},{\"appid\": 1564180,\"ordate\": \"25.05.2021\"},{\"appid\": 1072890,\"ordate\": \"20.05.2019\"},{\"appid\": 1482720,\"ordate\": \"16.12.2020\"},{\"appid\": 773490,\"ordate\": \"22.02.2018\"},{\"appid\": 1539780,\"ordate\": \"26.02.2021\"},{\"appid\": 543050,\"ordate\": \"31.01.2017\"},{\"appid\": 868470,\"ordate\": \"08.06.2018\"},{\"appid\": 1121000,\"ordate\": \"31.07.2019\"},{\"appid\": 1325970,\"ordate\": \"18.06.2020\"},{\"appid\": 1224050,\"ordate\": \"25.02.2020\"},{\"appid\": 471710,\"ordate\": \"28.06.2016\"},{\"appid\": 1352520,\"ordate\": \"06.08.2020\"},{\"appid\": 964960,\"ordate\": \"16.01.2019\"},{\"appid\": 1339640,\"ordate\": \"17.07.2020\"},{\"appid\": 677700,\"ordate\": \"09.08.2017\"},{\"appid\": 1053740,\"ordate\": \"18.04.2019\"},{\"appid\": 579130,\"ordate\": \"08.03.2017\"},{\"appid\": 528900,\"ordate\": \"17.12.2017\"},{\"appid\": 801120,\"ordate\": \"09.03.2018\"},{\"appid\": 594200,\"ordate\": \"26.04.2017\"},{\"appid\": 1252250,\"ordate\": \"06.03.2020\"},{\"appid\": 511390,\"ordate\": \"24.12.2016\"},{\"appid\": 615070,\"ordate\": \"10.10.2017\"},{\"appid\": 1463430,\"ordate\": \"08.04.2021\"},{\"appid\": 1540560,\"ordate\": \"11.03.2021\"},{\"appid\": 470470,\"ordate\": \"10.10.2016\"},{\"appid\": 253630,\"ordate\": \"29.10.2013\"},{\"appid\": 1440050,\"ordate\": \"08.12.2020\"},{\"appid\": 1141170,\"ordate\": \"04.01.2020\"},{\"appid\": 867550,\"ordate\": \"20.06.2018\"},{\"appid\": 782460,\"ordate\": \"06.06.2018\"},{\"appid\": 1383580,\"ordate\": \"14.06.2021\"},{\"appid\": 804830,\"ordate\": \"14.03.2018\"},{\"appid\": 820480,\"ordate\": \"27.08.2018\"},{\"appid\": 673480,\"ordate\": \"25.07.2017\"},{\"appid\": 250580,\"ordate\": \"05.09.2013\"},{\"appid\": 661690,\"ordate\": \"18.02.2018\"},{\"appid\": 569370,\"ordate\": \"09.01.2017\"},{\"appid\": 848890,\"ordate\": \"26.10.2018\"},{\"appid\": 535190,\"ordate\": \"12.10.2016\"},{\"appid\": 340860,\"ordate\": \"29.03.2015\"},{\"appid\": 705920,\"ordate\": \"04.12.2017\"},{\"appid\": 924420,\"ordate\": \"23.06.2022\"},{\"appid\": 1049640,\"ordate\": \"26.03.2020\"},{\"appid\": 1178130,\"ordate\": \"14.07.2022\"},{\"appid\": 1049800,\"ordate\": \"01.04.2019\"},{\"appid\": 264380,\"ordate\": \"25.04.2014\"},{\"appid\": 1140620,\"ordate\": \"20.01.2021\"},{\"appid\": 523750,\"ordate\": \"02.06.2018\"}]}","USE_Sledilka_migrated_v2_from_wishlistTracker":"btrue"}},"enabled":true,"position":1,"file_url":"https://update.greasyfork.org/scripts/526180/Ultimate%20Steam%20Enhancer.user.js","uuid":"032824c1-e3d1-4822-8d9c-fb33d7936d7b","source":"","requires":[{"meta":{"name":"jquery-3.6.0.min.js","url":"https://code.jquery.com/jquery-3.6.0.min.js","ts":1750836287897,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"nouislider.min.js","url":"https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.1/nouislider.min.js","ts":1750836287806,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"chart.umd.min.js","url":"https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js","ts":1750836287894,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"chartjs-plugin-datalabels.min.js","url":"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js","ts":1750836287894,"mimetype":"text/javascript"},"source":""}]},{"name":"[VOT] - Voice Over Translation","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["yandex.ru","disk.yandex.kz","disk.yandex.com","disk.yandex.com.am","disk.yandex.com.ge","disk.yandex.com.tr","disk.yandex.by","disk.yandex.az","disk.yandex.co.il","disk.yandex.ee","disk.yandex.lt","disk.yandex.lv","disk.yandex.md","disk.yandex.net","disk.yandex.tj","disk.yandex.tm","disk.yandex.uz","yandex.net","timeweb.cloud","raw.githubusercontent.com","vimeo.com","toil.cc","deno.dev","onrender.com","workers.dev","speed.cloudflare.com","porntn.com","googlevideo.com"],"orig_excludes":["file://*/*.mp4*","file://*/*.webm*","*://accounts.youtube.com/*"],"orig_includes":[],"orig_matches":["*://*.youtube.com/*","*://*.youtube-nocookie.com/*","*://*.youtubekids.com/*","*://*.twitch.tv/*","*://*.xvideos.com/*","*://*.xvideos-ar.com/*","*://*.xvideos005.com/*","*://*.xv-ru.com/*","*://*.pornhub.com/*","*://*.pornhub.org/*","*://*.vk.com/*","*://*.vkvideo.ru/*","*://*.vk.ru/*","*://*.vimeo.com/*","*://*.imdb.com/*","*://*.9gag.com/*","*://*.twitter.com/*","*://*.x.com/*","*://*.facebook.com/*","*://*.rutube.ru/*","*://*.bilibili.com/*","*://my.mail.ru/*","*://*.bitchute.com/*","*://*.coursera.org/*","*://*.udemy.com/course/*","*://*.tiktok.com/*","*://*.douyin.com/*","*://rumble.com/*","*://*.eporner.com/*","*://*.dailymotion.com/*","*://*.ok.ru/*","*://trovo.live/*","*://disk.yandex.ru/*","*://disk.yandex.kz/*","*://disk.yandex.com/*","*://disk.yandex.com.am/*","*://disk.yandex.com.ge/*","*://disk.yandex.com.tr/*","*://disk.yandex.by/*","*://disk.yandex.az/*","*://disk.yandex.co.il/*","*://disk.yandex.ee/*","*://disk.yandex.lt/*","*://disk.yandex.lv/*","*://disk.yandex.md/*","*://disk.yandex.net/*","*://disk.yandex.tj/*","*://disk.yandex.tm/*","*://disk.yandex.uz/*","*://youtube.googleapis.com/embed/*","*://*.banned.video/*","*://*.madmaxworld.tv/*","*://*.weverse.io/*","*://*.newgrounds.com/*","*://*.egghead.io/*","*://*.youku.com/*","*://*.archive.org/*","*://*.patreon.com/*","*://*.reddit.com/*","*://*.kodik.info/*","*://*.kodik.biz/*","*://*.kodik.cc/*","*://*.kick.com/*","*://developer.apple.com/*","*://dev.epicgames.com/*","*://*.rapid-cloud.co/*","*://odysee.com/*","*://learning.sap.com/*","*://*.watchporn.to/*","*://*.linkedin.com/*","*://*.incestflix.net/*","*://*.incestflix.to/*","*://*.porntn.com/*","*://*.dzen.ru/*","*://*.cloudflarestream.com/*","*://*.loom.com/*","*://*.artstation.com/learning/*","*://*.rt.com/*","*://*.bitview.net/*","*://*.kickstarter.com/*","*://*.thisvid.com/*","*://*.ign.com/*","*://*.bunkr.site/*","*://*.bunkr.black/*","*://*.bunkr.cat/*","*://*.bunkr.media/*","*://*.bunkr.red/*","*://*.bunkr.ws/*","*://*.bunkr.org/*","*://*.bunkr.sk/*","*://*.bunkr.si/*","*://*.bunkr.su/*","*://*.bunkr.ci/*","*://*.bunkr.cr/*","*://*.bunkr.fi/*","*://*.bunkr.ph/*","*://*.bunkr.pk/*","*://*.bunkr.ps/*","*://*.bunkr.ru/*","*://*.bunkr.la/*","*://*.bunkr.is/*","*://*.bunkr.to/*","*://*.bunkr.ac/*","*://*.bunkr.ax/*","*://web.telegram.org/k/*","*://t2mc.toil.cc/*","*://mylearn.oracle.com/*","*://learn.deeplearning.ai/*","*://learn-staging.deeplearning.ai/*","*://learn-dev.deeplearning.ai/*","*://*.netacad.com/content/i2cs/*","*://*/*.mp4*","*://*/*.webm*","*://*.yewtu.be/*","*://yt.artemislena.eu/*","*://invidious.flokinet.to/*","*://iv.melmac.space/*","*://inv.nadeko.net/*","*://inv.tux.pizza/*","*://invidious.private.coffee/*","*://yt.drgnz.club/*","*://vid.puffyan.us/*","*://invidious.dhusch.de/*","*://*.piped.video/*","*://piped.tokhmi.xyz/*","*://piped.moomoo.me/*","*://piped.syncpundit.io/*","*://piped.mha.fi/*","*://watch.whatever.social/*","*://piped.garudalinux.org/*","*://efy.piped.pages.dev/*","*://watch.leptons.xyz/*","*://piped.lunar.icu/*","*://yt.dc09.ru/*","*://piped.mint.lgbt/*","*://*.il.ax/*","*://piped.privacy.com.de/*","*://piped.esmailelbob.xyz/*","*://piped.projectsegfau.lt/*","*://piped.in.projectsegfau.lt/*","*://piped.us.projectsegfau.lt/*","*://piped.privacydev.net/*","*://piped.palveluntarjoaja.eu/*","*://piped.smnz.de/*","*://piped.adminforge.de/*","*://piped.qdi.fi/*","*://piped.hostux.net/*","*://piped.chauvet.pro/*","*://piped.jotoma.de/*","*://piped.pfcd.me/*","*://piped.frontendfriendly.xyz/*","*://proxitok.pabloferreiro.es/*","*://proxitok.pussthecat.org/*","*://tok.habedieeh.re/*","*://proxitok.esmailelbob.xyz/*","*://proxitok.privacydev.net/*","*://tok.artemislena.eu/*","*://tok.adminforge.de/*","*://tt.vern.cc/*","*://cringe.whatever.social/*","*://proxitok.lunar.icu/*","*://proxitok.privacy.com.de/*","*://peertube.1312.media/*","*://tube.shanti.cafe/*","*://*.bee-tube.fr/*","*://video.sadmin.io/*","*://*.dalek.zone/*","*://review.peertube.biz/*","*://*.peervideo.club/*","*://tube.la-dina.net/*","*://peertube.tmp.rcp.tf/*","*://*.peertube.su/*","*://video.blender.org/*","*://videos.viorsan.com/*","*://tube-sciences-technologies.apps.education.fr/*","*://tube-numerique-educatif.apps.education.fr/*","*://tube-arts-lettres-sciences-humaines.apps.education.fr/*","*://*.beetoons.tv/*","*://comics.peertube.biz/*","*://*.makertube.net/*","*://*.poketube.fun/*","*://pt.sudovanilla.org/*","*://poke.ggtyler.dev/*","*://poke.uk2.littlekai.co.uk/*","*://poke.blahai.gay/*","*://*.ricktube.ru/*","*://*.coursehunter.net/*","*://*.coursetrain.net/*"],"orig_noframes":null,"orig_run_at":"document-idle","orig_run_in":[],"orig_tags":[],"use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"run_in":null,"sandbox":null,"tags":[],"unwrap":null,"user_modified":null},"storage":{"ts":1750858828953,"data":{}},"enabled":true,"position":2,"file_url":"https://raw.githubusercontent.com/ilyhalight/voice-over-translation/master/dist/vot.user.js","uuid":"9ef181cd-8626-49ec-b9ee-90d9921ec25d","source":"","requires":[{"meta":{"name":"hls.light.min.js","url":"https://cdnjs.cloudflare.com/ajax/libs/hls.js/1.5.18/hls.light.min.js","ts":1750858829797,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"gm-addstyle-polyfill.js","url":"https://gist.githubusercontent.com/ilyhalight/6eb5bb4dffc7ca9e3c57d6933e2452f3/raw/7ab38af2228d0bed13912e503bc8a9ee4b11828d/gm-addstyle-polyfill.js","ts":1750858829646,"mimetype":"text/javascript"},"source":"aWYgKHR5cGVvZiBHTV9hZGRTdHlsZSA9PSAndW5kZWZpbmVkJykgewogIHRoaXMuR01fYWRkU3R5bGUgPSAoYUNzcykgPT4gewogICAgJ3VzZSBzdHJpY3QnOwogICAgbGV0IGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdOwogICAgaWYgKGhlYWQpIHsKICAgICAgbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7CiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYUNzczsKICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CiAgICAgIHJldHVybiBzdHlsZTsKICAgIH0KICAgIHJldHVybiBudWxsOwogIH07Cn0="}]}]}